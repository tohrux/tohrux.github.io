<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习Bootstrap的一些个人笔记</title>
    <link href="undefined2019/11/19/bootstrapv4-3/"/>
    <url>2019/11/19/bootstrapv4-3/</url>
    
    <content type="html"><![CDATA[<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><p>直接在CSS中使用</p><pre><code class="css">@media and (min-width: 600px) and (max-width: 800px){    css属性:css属性值}//👆限定了浏览器窗口宽度在600px~800px样式的变化</code></pre><h2 id="栅格水平布局"><a href="#栅格水平布局" class="headerlink" title="栅格水平布局"></a>栅格水平布局</h2><pre><code class="html">&lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row justify-content-start text-center&quot;&gt;            &lt;div class=&quot;col-auto&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;col-auto&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;col-auto&quot;&gt;1&lt;/div&gt;        &lt;/div&gt;s&lt;/div&gt;    👆&quot;start&quot;的值可以替换为end/around/between/center</code></pre><h2 id="栅格垂直布局"><a href="#栅格垂直布局" class="headerlink" title="栅格垂直布局"></a>栅格垂直布局</h2><pre><code class="html">&lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row align-items-start text-center&quot;&gt;            &lt;div class=&quot;col-auto&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;col-auto&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;col-auto&quot;&gt;1&lt;/div&gt;        &lt;/div&gt;&lt;/div&gt;    👆&quot;start&quot;的值可以替换为center/end</code></pre><h2 id="水平垂直混合布局"><a href="#水平垂直混合布局" class="headerlink" title="水平垂直混合布局"></a>水平垂直混合布局</h2><p>💡这种布局是把类添加到单独的栅格里</p><pre><code class="html">    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row border&quot;&gt;            &lt;div class=&quot;col-3 align-self-start&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;col-3 align-self-center&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;col-3 align-self-endZ&quot;&gt;1&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;</code></pre><h2 id="栅格的排序和偏移"><a href="#栅格的排序和偏移" class="headerlink" title="栅格的排序和偏移"></a>栅格的排序和偏移</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>我们可以使用”order-数值(从0开始)”这个类进行栅格排序</p><p>数值越小的会排在越前面</p><p>💡记得 如果想要使用这个属性的话 一定要给所有的row下面的<strong>至少两个</strong>栅格都添加这个属性</p><h3 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h3><p>在栅格中添加”offset-数值”类的方式让栅格进行偏移</p><p>👆它的实现方式是为元素添加<strong>margin-left属性</strong>,这个栅格后面的格子也会跟着这个栅格进行偏移</p><p>今天就到这吧 晚安教室!</p>]]></content>
    
    
    
    <tags>
      
      <tag>bootstrap</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sass基础语法</title>
    <link href="undefined2019/11/18/sass/"/>
    <url>2019/11/18/sass/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>Sass是基于ruby开发的,但是用的人却不用懂得写Ruby.</p><p>首先,在编写Sass前要先下载安装Ruby</p><p>(在网上搜索Ruby的时候 看到的评价都在说这门语言很优雅,以后有空的话会去接触下的!)</p><p>👇</p><p>然后在命令行中 输入 </p><pre><code class="命令行">gem install sass </code></pre><p>等待执行完毕后 然后输入在命令行输入</p><pre><code class="c">sass -v</code></pre><p>如果出现了相应的版本号 就意味着安装成功了👏</p><h1 id="开始基础语法"><a href="#开始基础语法" class="headerlink" title="开始基础语法"></a>开始基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code class="scss">/*注释*/ 👈这种注释会在编译后的CSS中显示//注释   👈这种则不会</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code class="scss">$变量名字:变量属性值</code></pre><p>使用! default 会让之前的样式覆盖掉当前的样式</p><pre><code class="SCSS">//你好 我是sass$defaultColor: red;$defaultColor: #0000ff !default;h1{color:$defaultColor;}</code></pre><p>编译后的css:</p><pre><code class="css">h1 {  color: red;}</code></pre><h2 id="关于变量的作用域"><a href="#关于变量的作用域" class="headerlink" title="关于变量的作用域"></a>关于变量的作用域</h2><p>💡需要注意的是如果上述变量的作用域在所有类的外面,那它就是全局变量,否则他的作用域只在当前的类</p><h2 id="嵌套CSS规则"><a href="#嵌套CSS规则" class="headerlink" title="嵌套CSS规则"></a>嵌套CSS规则</h2><pre><code class="scss">/* SASS嵌套 */$defaultColor: red;#content{    article{        h1{color: $defaultColor;}        p{color: $defaultColor;}    }    aside{        color: aqua;     }}</code></pre><p>编译后的css:</p><pre><code class="css">#content article h1 {  color: red;}#content article p {  color: red;}#content aside {  color: aqua;}</code></pre><h2 id="“-”同时也可以代表父元素选择器"><a href="#“-”同时也可以代表父元素选择器" class="headerlink" title="“$”同时也可以代表父元素选择器"></a>“$”同时也可以代表父元素选择器</h2><pre><code class="scss">/*sass*/a{    font-weight: bold;    text-decoration: none;    $:hover{ color:yellow; }    p.login $ {font:weight:normal}}</code></pre><pre><code class="css">/*编译后的CSS*/a{    font-weight: bold;    text-decoration: none;}a:hover{        color:yellow;        }p.login a {font:weight:normal}</code></pre><h2 id="定义混合指令"><a href="#定义混合指令" class="headerlink" title="定义混合指令"></a>定义混合指令</h2><p>如果网站中有很多地方需要部署相似的样式,可以使用@mixin来进行封装</p><pre><code class="scss">/*Sass*/    @mixin large-text {        font:{            family: Arial;            size: 20px;            weight: bold;        }        color: #ff0000;    }    p {@include large-text()}    a {@include large-text()}</code></pre><pre><code class="css">/*编译后的CSS*/p {  font-family: Arial;  font-size: 20px;  font-weight: bold;  color: #ff0000;}a {  font-family: Arial;  font-size: 20px;  font-weight: bold;  color: #ff0000;}</code></pre><h3 id="使用-指向父类选择器"><a href="#使用-指向父类选择器" class="headerlink" title="使用$指向父类选择器"></a>使用$指向父类选择器</h3><pre><code class="scss">/*Sass*///@mixin 混合指令  $xu:#010203;$w:10px;@mixin text{    font:{       family: 华文宋体;       weight: bold;       size: $w*2.5;    }    &amp;:hover{      cursor: pointer;      text-decoration:underline #a94442 ;    }  }  p{    //通过@include调用  导入    @include text;  }</code></pre><pre><code class="css">/*编译成CSS*/p {  font-family: 华文宋体;  font-weight: bold;  font-size: 25px;}p:hover {  cursor: pointer;  text-decoration: underline #a94442;}</code></pre><h3 id="通过传参-gt-有参函数"><a href="#通过传参-gt-有参函数" class="headerlink" title="通过传参  =&gt; 有参函数"></a>通过传参  =&gt; 有参函数</h3><p>(可以给定默认值 例如$width = 1 ,这样在不给参数的时候就会默认显示1)</p><pre><code class="scss">/*sass*/  @mixin myborder($color,$width,$style){    border:{      width: $width;      color: $color;      style: $style;    } } .b{   //  传参需要一一对应   @include myborder(red,5px,solid); }</code></pre><pre><code class="css">/*编译成CSS*/.b {  border-width: 5px;  border-color: red;  border-style: solid;}</code></pre><h3 id="不确定参数的数量时…"><a href="#不确定参数的数量时…" class="headerlink" title="不确定参数的数量时…"></a>不确定参数的数量时…</h3><pre><code class="scss">//  不确定参数的写法@mixin box-s($shadow...){    -moz-box-shadow:$shadow;    box-shadow:$shadow;    -o-box-shadow: $shadow;}.b3{ //    属性可以省略   参数3不能负数//           水平阴影 垂直 阴影半径 阴影程度 颜色 Insert内扩@include box-s(5px 5px 5px 5px #123654);}</code></pre><pre><code class="css">/*编译后*/.b3 {  -moz-box-shadow: 5px 5px 5px 5px #123654;  box-shadow: 5px 5px 5px 5px #123654;  -o-box-shadow: 5px 5px 5px 5px #123654;}</code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><p>Sass支持 +,-,*,/,%等运算</p><p>如果在运算时不给单位的话,则会自动补充单位</p><pre><code class="scss">.fon{    $a:10px;    $b:10;    $c:#123456;    min-width: $a/2;    max-width: $a*2;     margin: (10px/2);//两个数字之间要加括号才可以进行除法运算    padding: #{$a}/#{$b};//使用#{$a}可以不进行除法运算}</code></pre><pre><code class="css">/*编译后的css*/.fon{min-width:5px;max-width:20px;margin:5px;padding:10px/10}</code></pre><h2 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h2><pre><code class="scss">.str {    $s:&quot;宋体&quot;;    $t:&quot;微软雅黑&quot;;    $r:&quot;sans&quot;;    font-family: $s + $t;    font-family: $r + &quot;-self&quot;;}</code></pre><pre><code class="css">/*编译后的CSS*/.str{    font-family:&quot;宋体微软雅黑&quot;;    font-family:&quot;sans-self&quot;}</code></pre><h2 id="条件判断和循环"><a href="#条件判断和循环" class="headerlink" title="条件判断和循环"></a>条件判断和循环</h2><h3 id="使用-if-和-else"><a href="#使用-if-和-else" class="headerlink" title="使用@if 和 @else"></a>使用@if 和 @else</h3><p>(支持and/or/on/not)</p><pre><code class="scss">.bol{    $age:25;    @if ($age &gt; 18 and $age &lt; 27){        color: yellow;    }@else{        color: green;    }}</code></pre><pre><code class="css">/*编译后的CSS*/.bol{color:yellow}</code></pre><p>eg2:</p><pre><code class="scss">@mixin block($bol){    @if($bol){        dispaly:block;    }@else{        display: none;    }}.block{    @include block(true);}.hidden{    @include block(false);}</code></pre><pre><code class="css">/*编译后的css*/.block {  dispaly: block;}.hidden {  display: none;}</code></pre><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="@for 循环"></a>@for 循环</h3><p>@for $i from <start> through <end> {}(会through最后一个数字)</p><p>@for $i from <start> to <end>{} (忽略最后一个数字)</p><pre><code class="scss">@for $var from 1 through(或者to) 3 {    .item-#{$var} {width: 2em * $var;}}</code></pre><pre><code class="css">/*编译后的css*/.item-1 {  width: 2em;}.item-2 {  width: 4em;}.item-3 {  width: 6em;}</code></pre><h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><p>@each $example in example1,example2,example3{}</p><pre><code class="scss">@each $animal in puma, sea-slug, egret,salamander{    .#{$animal}-icon{        background-image: url(&#39;image/#{$animal}.png&#39;);    }}@each $header, $size in (h1:2em, h2:1.5em, h3:1em){    #{$header}{        font-size: $size;    }}</code></pre><pre><code class="css">/*编译后CSS*/.puma-icon {  background-image: url(&quot;image/puma.png&quot;);}.sea-slug-icon {  background-image: url(&quot;image/sea-slug.png&quot;);}.egret-icon {  background-image: url(&quot;image/egret.png&quot;);}.salamander-icon {  background-image: url(&quot;image/salamander.png&quot;);}h1 {  font-size: 2em;}h2 {  font-size: 1.5em;}h3 {  font-size: 1em;}</code></pre><h3 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h3><p>while循环使用指令重复输出格式知道表达式返回结果为false.可以实现比@for循环更为复杂的指令</p><pre><code class="scss">$i: 5;@while $i&gt;0{    .h#{$i} {        width: 2em * $i;        $i : $i - 2;    }}</code></pre><pre><code class="css">.h5 {  width: 10em;}.h3 {  width: 6em;}.h1 {  width: 2em;}</code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Sass的数组常常被称为”map”,它总是以键值对的形式出现–”key:value”</p><p>语法格式:</p><pre><code class="scss">$map: (    key1:value1,    key2: (        key2-1: value2-1,        key2-2: value2-2,    ),    key3: value3);</code></pre><p>例子:</p><pre><code class="scss">$some-color:(    a: #ea4c89,    b: #3b5998,     c: #171515);.btn-a{    color:map-get($some-color, a ) //👈这里使用了map-get方法 这是map自带的方法}</code></pre><pre><code class="css">/*编译后*/.btn-a {  color: #ea4c89;}</code></pre><h3 id="选择器继承-extend"><a href="#选择器继承-extend" class="headerlink" title="选择器继承@extend"></a>选择器继承@extend</h3><pre><code class="scss">.father{    border: 1px solid black;}.son{    @extend .father;}</code></pre><pre><code class="css">.father, .son {  border: 1px solid black;}</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>终于完成了,😭,虽然有些疲惫.</p><p>以上都是基于我的老师@帅帅徐 笔记内容&amp;上课所讲,以及 书(@web前端开发中级 下册) 和自己微不足道的总结,</p><p>感谢阅读🙌</p><p>2019/11/19</p><p>下午 6:47</p><hr><p>刚刚问了老师一句,”实际开发中会用到sass吗 ?”</p><p>然后他回了我一句”你应该反过来问” 😂</p>]]></content>
    
    
    
    <tags>
      
      <tag>sass</tag>
      
      <tag>css</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hey,Are you henrietta? CLICK HERE PLS</title>
    <link href="undefined2019/11/17/henrietta/"/>
    <url>2019/11/17/henrietta/</url>
    
    <content type="html"><![CDATA[<h1 id="hey-henriettaV01"><a href="#hey-henriettaV01" class="headerlink" title="hey henriettaV01!"></a>hey henriettaV01!</h1><h4 id="I’m-tohru-this-article-is-written-for-you"><a href="#I’m-tohru-this-article-is-written-for-you" class="headerlink" title="I’m tohru ,this article is written for you."></a>I’m tohru ,this article is written for you.</h4><h4 id="welcome-to-my-blog-it-was-created-two-days-ago…"><a href="#welcome-to-my-blog-it-was-created-two-days-ago…" class="headerlink" title="welcome to my blog, it was created two days ago…"></a>welcome to my blog, it was created two days ago…</h4><h4 id="I’ll-never-forget-the-happy-time-when-we-played-Apex-on-pc-amp-ps4"><a href="#I’ll-never-forget-the-happy-time-when-we-played-Apex-on-pc-amp-ps4" class="headerlink" title="I’ll never forget the happy time when we played Apex on pc &amp; ps4,"></a>I’ll never forget the happy time when we played Apex on pc &amp; ps4,</h4><h4 id="and-I’ll-never-forget-your-birthday-XD"><a href="#and-I’ll-never-forget-your-birthday-XD" class="headerlink" title="and I’ll never forget your birthday XD"></a>and I’ll never forget your birthday XD</h4><blockquote><p>9/10 </p></blockquote><h4 id="have-a-nice-day-henrietta-or-should-I-called-you-‘胡琼琼’-😄😄😄"><a href="#have-a-nice-day-henrietta-or-should-I-called-you-‘胡琼琼’-😄😄😄" class="headerlink" title="have a nice day~ henrietta,or should I called you ‘胡琼琼’? 😄😄😄"></a>have a nice day~ henrietta,or should I called you ‘胡琼琼’? 😄😄😄</h4>]]></content>
    
    
    
    <tags>
      
      <tag>friend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CDN来加速网页的访问</title>
    <link href="undefined2019/11/17/cdn/"/>
    <url>2019/11/17/cdn/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天是搭建github.io的第二天,很多功能都还在完善,比如说在一些地方(没错,说的就是你,天朝!)访问GitHub.Page很慢的问题,通过上网一番查找发现似乎可以用CDN来解决.</p><h1 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN?"></a>什么是CDN?</h1><p>这里粘贴一段阿里云官网上面对CDN的描述:</p><blockquote><p>将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。<br>解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</p></blockquote><p>总之它可以让别人访问自己的GitHub.Page的速度更快就对了!</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>这里就拿我们网页中需要加载很久的图片来举例8,</p><p>首先我们要找到放置自己github.io 页面的那个repo,如下图所示:</p><p><img src="/img/cdn2.png" srcset="undefined" alt=""></p><p>我们需要的图片他们现在都静静的躺在img那个文件夹里</p><p>如果想用CDN获取他们的话</p><p>可以点击图片最顶端的release来发布版本</p><p>例如我这里发布的版本为1.0  发布完成后我们就可通过jsDelivr来引用我们的资源了</p><p><img src="/img/cdn1.png" srcset="undefined" alt=""></p><p>如上面的地址所示:</p><p>​    gh 代表 github</p><p>​    tohrux是我的GitHub用户名</p><p>​    tohrux.github.io是我仓库的名字</p><p>​    1.0 是版本号</p><p>​    img/fullVersionxx.jpg 是想要获取的文件</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/tohrux/tohrux.github.io@1.0//img/fullVersionxx.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/tohrux/tohrux.github.io@1.0//img/fullVersionxx.jpg</a></p></blockquote><p>然后用这个外链来替换掉你想要替换的文件就大功告成了~</p><p>同理,用CDN来引入网页中jQuery,bootstrap等文件也是很常用的做法哦</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这算是第一次写博文8,其实就是把今晚的问题解决了,然后再总结一下,站在巨人的肩膀上真的很爽啊😊(憨憨笑)</p><p>说实话我也不知道CDN到底有没有带来显著的效果,不过欢迎在下方的评论区留言告诉我网页的加载速度有没有变化,感谢阅读!</p><p>​            </p><hr><p>2019/11/17日更新:</p><p>​    👇新发现!其实可以用github + jsDelivr + picgo 更方便快捷地实现图片的插入    </p><blockquote><p>​        <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a> </p><p>​        <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener" title="picgo地址">picgo</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>build</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现在开始我拥有了自己的博客!</title>
    <link href="undefined2019/11/17/test1/"/>
    <url>2019/11/17/test1/</url>
    
    <content type="html"><![CDATA[<h1 id="现在开始我拥有了自己的博客"><a href="#现在开始我拥有了自己的博客" class="headerlink" title="现在开始我拥有了自己的博客!"></a>现在开始我拥有了自己的博客!</h1><p>终于完成了,现在都快5点了,希望明天可以不上课8,(但估计打完这篇md要做的第一件事就是设闹钟了),</p><p>晚安世界~</p><p>上课的笔记什么的明天再更吧</p><p>总之还是开心的!</p><p>ps.这原本是11-16日凌晨4点写下的,因为一些原因现在重新上传了一遍</p>]]></content>
    
    
    
    <tags>
      
      <tag>happy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片加载测试</title>
    <link href="undefined2019/11/16/ceshi/"/>
    <url>2019/11/16/ceshi/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/rikka.jpg" srcset="undefined" alt=""></p><p><img src="/img/akane.jpg" srcset="undefined" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>ssss</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/11/15/hello-world/"/>
    <url>2019/11/15/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>