<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>11_28</title>
    <link href="undefined2019/11/28/11-28/"/>
    <url>2019/11/28/11-28/</url>
    
    <content type="html"><![CDATA[<p>时间过得好快,打下这篇文章的开头的时候发现现在已经是11/28了,web的考试时间是12/21,现在开始到12/21blog的内容都会以书上的内容为准了,尽量通过写下这些笔记的方式来让自己记得更牢固</p><p>今天想到这些:</p><p>世界上有很多人不是因为游戏好玩才去玩游戏的,而是时间太多而不知道干什么才去玩,睡觉同理,不是因为困了才睡觉,而是想要快一点度过这段时光才去睡觉,就像在我的世界里一样,制作好床,然后右键就可以睡觉了,下一秒就是第二天,那我可以说像这样的人活着是没有意义的吗?在我高三时,我就是这样的,那段时间真是暗淡无比.</p><p>现在在我身边也有很多这样的例子,不过这也和我没什么关系了,每个人都有自己人生的过法,”不要去干涉人家怎么活”.但是这种状态却会影响周围的人,其实也不单指这种状态吧,每个人的行为都会影响到他人,无论是积极正面的还是消极的,关于这点我最近也深有体会.</p><p>写到这,我在思考一件事,人们在写东西的时候会极力追求事件的真实性或者是第一想法吗?起码我刚刚没有做到,比如上面那段的最后,原本我是想写成<code>最近也有很多体会</code>但是我觉得换成<code>深有体会</code>会好一点,只是因为为了确保文章的流程性?还是说因为在很多地方<code>体会</code>一般都是会和<code>深有</code>搭配,所以我才会这样写?写东西没有固定的格式,这点我很喜欢,可以随心所欲地敲下脑海里出现的想法.我开始理解了为什么有些人会喜欢去写小说之类的文学作品了.</p><p>说到这里我突然想到以前在youtube看过一个视频,视频里的那个人为了让写出来的歌词押韵完全不在乎所有的歌词组合在一起究竟讲的是一个怎样的故事,而是让故事随着押韵的歌词不可预料地进行下去.我猜很多人在写东西时也不会去在乎写的东西有什么意义,比如古代的诗人写的诗,我初中时尤其讨厌诗歌鉴赏,为什么要让几百年后的人们去理解当时的人在写下诗歌时的想法,即使是现在的我也无法理解,起码答案不是固定的吧,一千个心中有一千个哈姆雷特,为什么在考试时一定要写下唯一解才能拿分?</p><p>之前在天气之子上映的时候,新海诚接受了b站的一个采访,在被问到 制作<strong>天气之子</strong>电影时要同步进行小说的创作有什么想法时,其中一段话我感受很深,他说</p><blockquote><p>“觉得影像是一种时间表现,(看影像时)时间会不断地流逝,要如何控制观众地时间是影像最重要地问题,因为时间是会流动的.反之,文字的话是读者自己在分配时间,没有音乐,声音,影像,所以完全是不一样的,影像一秒钟能说清楚的,文字的话即使写一两页也可能无法描述清楚,反之,也有用文字一秒钟就能表达的,用影像却不知道怎么实现.比如,文字中说,’’他像迷路的孩子一样的不安的表情’’,看书的人会马上领悟到,迷路的孩子一样不安的少年,但是,迷路的孩子一样不安的表情,在动画中,要画这样的表情就非常的困难,即便是真的演员正确地表演迷路的孩子的表情也是很难的,但文字却可以.”</p></blockquote><p>这就是文字的魅力吧,可以让每一个不同的人都根据相同的一段文字在脑海中产生不同的想象,诗歌之类的就尤为明显了.</p><p>附上那个youtube视频的b站链接:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=16907446&cid=27635253&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    
    <tags>
      
      <tag>summary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex布局中 align-items和align-content</title>
    <link href="undefined2019/11/27/flex2/"/>
    <url>2019/11/27/flex2/</url>
    
    <content type="html"><![CDATA[<h3 id="首先先给出我当前的CSS和HTML"><a href="#首先先给出我当前的CSS和HTML" class="headerlink" title="首先先给出我当前的CSS和HTML"></a>首先先给出我当前的CSS和HTML</h3><pre><code class="html">    &lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-wrap: wrap;            flex-direction: row;            justify-content: space-between;            align-items: flex-start;            align-content: space-between;            background-color: #0080ff;            height: 700px;        }        .container&gt;div {            width: 100px;            height: 100px;            /* border: 1px solid black; */        }        .item1 {            background-color: #a3daff;            line-height: 100px;            /* font-size: 120px; */        }        .item2 {            background-color: #1ec0ff;            width: 200px !important;            height: 130px !important;            font-size: 100px;            line-height: 130px;        }        .item3 {            background-color: #FBFFB9;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;&lt;/div&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item1&quot;&gt;1&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;2&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;4&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;5&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;6&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;7&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;8&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;9&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;10&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;11&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;12&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;13&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;14&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;15&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;16&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="👩这里我同时给了align-item和align-content的值"><a href="#👩这里我同时给了align-item和align-content的值" class="headerlink" title="👩这里我同时给了align-item和align-content的值"></a>👩这里我同时给了<code>align-item</code>和<code>align-content</code>的值</h3><pre><code class="css">align-items: flex-start;align-content: space-between;</code></pre><p>呈现如下:</p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127150714.png" srcset="undefined" style="zoom:67%;" /><p>可以看到,<code>align-item</code>只在每一行中起效果,即在每行中所有的<code>item</code>都会顶到当前行的最上方</p><h3 id="👩再给他们换别的值"><a href="#👩再给他们换别的值" class="headerlink" title="👩再给他们换别的值"></a>👩再给他们换别的值</h3><p>现在我把他们修改为,并调整了窗口的大小:</p><pre><code class="css">align-items: flex-end;align-content: flex-start;</code></pre><p>呈现如下:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127151648.png" srcset="undefined" alt=""></p><p>可以看到<code>align-content</code>作用于整个<code>container</code>,而<code>align-item</code>则作用于他自己那行,和之前的结论一样,<s>好像这段没有必要的样子</s></p><h3 id="👨注释掉align-content"><a href="#👨注释掉align-content" class="headerlink" title="👨注释掉align-content"></a>👨注释掉align-content</h3><pre><code class="css">align-items: flex-end;/* align-content: flex-start; */</code></pre><p>这次我把<code>align-content</code>给注释掉了,并且修改了窗口大小,呈现如下:</p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127161505.png" srcset="undefined" style="zoom:67%;" /><h3 id="👴给align-content-flex-end"><a href="#👴给align-content-flex-end" class="headerlink" title="👴给align-content: flex-end;"></a>👴给align-content: flex-end;</h3><pre><code class="css">align-items: flex-end;align-content: flex-end;</code></pre><p>这次给了<code>align-content</code>值,同样为<code>flex-end</code></p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127162559.png" srcset="undefined" style="zoom:67%;" /><p>我们可以看到在全局下(指<code>container</code>) ,每一行的间距已经变成了0.</p><h3 id="👵将align-item注释掉"><a href="#👵将align-item注释掉" class="headerlink" title="👵将align-item注释掉"></a>👵将align-item注释掉</h3><pre><code class="css">/* align-items: flex-end; */align-content: flex-end;</code></pre><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127163124.png" srcset="undefined" style="zoom: 67%;" /><p>这里的<code>align-item</code>的value已经成为了默认值<code>flex-start</code>了</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>align-item</code>只作用于每一行的行本身,而<code>align-content</code>则作用于全<code>container</code>;如果只给<code>align-item</code>值,则在全局的每一行间都会有一段默认的不为0的距离,👈这是她的兼职工作,同时<code>align-item</code>也会完成她的本分工作:在每一行设置<code>item</code>水平排列方式;如果在这时加入个专门做调整全局(<code>container</code>)布局的<code>align-content</code>的话,<code>align-item</code>的兼职工作就会被接过.此时,<code>align-content</code>仿佛在对<code>align-item</code>说,”你就是<code>align-item</code>吗?感谢你之前做的一切,从现在开始请不要担♥任何事,因为我来了!”.然后留下<code>align-item</code>在原地露出迷妹般的星星眼.</p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127165804.gif" srcset="undefined" style="zoom: 150%;" /><h3 id="that’s-all"><a href="#that’s-all" class="headerlink" title="that’s all!"></a>that’s all!</h3>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>flex</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex布局</title>
    <link href="undefined2019/11/26/flex/"/>
    <url>2019/11/26/flex/</url>
    
    <content type="html"><![CDATA[<p>发现很多地方都会用上Flex布局,所以就决定今晚把Flex给整活了,冲冲冲🐛</p><p>在看了一些博客后决定结合自己的理解写下一些笔记</p><p>参照：</p><blockquote><p><a href="https://juejin.im/post/5ddc78f851882573520fb199" target="_blank" rel="noopener">https://juejin.im/post/5ddc78f851882573520fb199</a>  作者：<strong>锐玩道</strong></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/4b14a7a1c6cc" target="_blank" rel="noopener">https://www.jianshu.com/p/4b14a7a1c6cc</a>                  作者：<strong>sxfshdf</strong></p><p><a href="https://blog.csdn.net/m0_37058714/article/details/80765562" target="_blank" rel="noopener">https://blog.csdn.net/m0_37058714/article/details/80765562</a>     作者 <strong>wxk_前端开发</strong></p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a>  作者: <strong>阮一峰</strong></p></blockquote><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><p>首先使用Flex布局一定要知道的一点是,这种布局总是以父子的形式存在,父级元素被称为 <strong>容器</strong>(container),有些地方也会称为<strong>弹性盒</strong>,而所有的子级元素会自动地成为这个<strong>容器</strong>的成员,成为 Flex项目(item)</p><p>在下文会用 <strong>container</strong> 表示容器, <strong>item</strong>表示Flex项目</p><pre><code class="html">display:flex//当一个元素的display被设置为flex后，它就会成为一个 *container</code></pre><blockquote><p>:hand:这里需要注意的是一旦一个元素被设置为display：flex，子元素的 float,clear,vertical-align将会失效</p></blockquote><h1 id="主轴（main-axis-amp-副轴-侧轴-cross-axis"><a href="#主轴（main-axis-amp-副轴-侧轴-cross-axis" class="headerlink" title="主轴（main axis )&amp; 副轴/侧轴(cross axis)"></a><strong>主轴</strong>（main axis )&amp; <strong>副轴</strong>/侧轴(cross axis)</h1><p><strong>container</strong>中默认会存在这两条轴，</p><p>一般来说，主轴是指水平方向的轴，而副轴是指垂直方向的轴,但是却不是绝对的,比如说下面的这个<code>flex-direction</code>属性就可以决定主轴的方向👇</p><h1 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h1><p>这个属性决定的是主轴的方向 ,即item们的排列方式</p><p>一共有 4个值 分别为 <strong>row</strong> | <strong>row-reverse</strong> | <strong>column</strong> | <strong>column-reverse</strong>; </p><pre><code class="html">.container{    display: flex;    flex-direction:  row | row-reverse | column | column-reverse;}</code></pre><p>在demo中，我的初始代码如下：</p><pre><code class="html">//css部分&lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-direction: row;        }        .container&gt;div {            width: 100px;            height: 100px;        }        .item1 {            background-color: red;        }        .item2 {            background-color: yellow;        }        .item3 {            background-color: blue;        }    &lt;/style&gt;----------------------------------------------------------------------------------//body部分    &lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item1&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item3&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><p>现在分别展示4种 <strong>flex-direction</strong>的效果 :</p><p>👩要注意的是，在我的代码中<strong>container</strong>默认宽度是整个<strong>body</strong>的宽度,而高度则内容物(分别是红,黄,蓝三个盒子)而确定.</p><h3 id="row-从左向右排列"><a href="#row-从左向右排列" class="headerlink" title="row :从左向右排列"></a>row :从左向右排列</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a1.png" srcset="undefined" alt=""></p><h3 id="row-reverse-从右向左排列"><a href="#row-reverse-从右向左排列" class="headerlink" title="row-reverse:从右向左排列"></a>row-reverse:从右向左排列</h3><p>👩这种布局中,并不是单纯地将三个盒子调转了顺序,而是还加了一步:把<strong>item</strong>全都在<strong>container</strong>中从右向左排列.</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a2.png" srcset="undefined" alt=""></p><h3 id="column-从上到下排列"><a href="#column-从上到下排列" class="headerlink" title="column:从上到下排列"></a>column:从上到下排列</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a3.png" srcset="undefined" alt=""></p><h3 id="column-reverse-从下到上排列"><a href="#column-reverse-从下到上排列" class="headerlink" title="column-reverse:从下到上排列"></a>column-reverse:从下到上排列</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a4.png" srcset="undefined" alt=""></p><h1 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h1><p>这个属性定义的是,如果在一条水平线上已经存在了过多的<strong>item</strong>(意思就是挤不下了),这些<strong>item</strong>将如何换行.</p><p>这个属性有3个值:</p><pre><code class="html">.container{    display: flex;    flex-wrap: nowrap | wrap | wrap-reverse;}</code></pre><p>在demo中我的初始代码如下:</p><pre><code class="html">css部分-----------------------------------------------------------------------------------------&lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-direction: row;            flex-wrap: nowrap;        }        .container&gt;div {            width: 100px;            height: 100px;            border: 1px solid black;        }body部分-----------------------------------------------------------------------------------------    &lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div&gt;7&lt;/div&gt;        &lt;div&gt;8&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><p>下面来看看效果吧:</p><h3 id="默认效果"><a href="#默认效果" class="headerlink" title="默认效果:"></a>默认效果:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b1.png" srcset="undefined" alt=""></p><h3 id="nowrap-不换行"><a href="#nowrap-不换行" class="headerlink" title="nowrap:不换行"></a><strong>nowrap</strong>:不换行</h3><p>现在我减小了浏览器窗口的宽度👇</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b2.png" srcset="undefined" alt=""></p><p>再缩小:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b3.png" srcset="undefined" alt=""></p><p>👨hey!!我似乎发现了华点!这就是 <strong>弹性布局</strong>这个名字的由来吗?👆</p><h3 id="wrap-换行"><a href="#wrap-换行" class="headerlink" title="wrap:换行"></a>wrap:换行</h3><p>减小浏览器的宽度:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b4.png" srcset="undefined" alt=""></p><p>再减小:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b5.png" srcset="undefined" alt=""></p><h3 id="wrap-reverse-颠倒顺序的换行方式"><a href="#wrap-reverse-颠倒顺序的换行方式" class="headerlink" title="wrap-reverse:颠倒顺序的换行方式"></a>wrap-reverse:颠倒顺序的换行方式</h3><p>减小浏览器的宽度:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b6.png" srcset="undefined" alt=""></p><p>再减小:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b7.png" srcset="undefined" alt=""></p><p>👩可以看到wrap-reverse和wrap中的item顺序是完全反过来的</p><h1 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h1><p>这个属性就不多说辣,他的作用是将上面两个属性 <strong>flex-direction</strong> ,<strong>flex-wrap</strong> 写在一行,属于一种简写形式</p><pre><code class="html">.container{    flex-flow:&lt;flex-direction&gt; &lt;flex-wrap&gt; ;}</code></pre><p>比如说:</p><pre><code class="html">.container {            display: flex;            flex-direction: row;            flex-wrap: wrap-reverse;        }</code></pre><p>👇👆效果完全一样</p><pre><code class="html">.container {            display: flex;            flex-flow: nowrap row;        }</code></pre><p>👩tips:这里 <strong>flex-direction</strong> <strong>flex-wrap</strong> 这两个值的顺序是可以调换的</p><h1 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h1><p>这个属性可以设置item们在主轴上的排列方式</p><pre><code class="html">.container{    justify-content: flex-start | flex-end | center | space-between | space-around    //常用的有这5个值}</code></pre><p>这是我的初始代码:</p><pre><code class="html">    &lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-flow: nowrap row;            justify-content: flex-start;            background-color: #0080ff;            height: 150px;        }        .container&gt;div {            width: 100px;            height: 100px;            border: 1px solid black;        }        .item1 {            background-color: #a3daff;        }        .item2 {            background-color: #1ec0ff;            width: 200px !important;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;flex-start&lt;/div&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item1&quot;&gt;1&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;2&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><p>👩这里设置了一个<code>item2</code>,它的样子与众不同,已此来形成对比</p><h3 id="flex-start"><a href="#flex-start" class="headerlink" title="flex-start"></a>flex-start</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127105724.png" srcset="undefined" alt=""></p><h3 id="flex-end"><a href="#flex-end" class="headerlink" title="flex-end"></a>flex-end</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_justify_content_end.png" srcset="undefined" alt=""></p><h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127114926.png" srcset="undefined" alt=""></p><h3 id="space-between"><a href="#space-between" class="headerlink" title="space-between"></a>space-between</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127114600.png" srcset="undefined" alt=""></p><h3 id="space-around"><a href="#space-around" class="headerlink" title="space-around"></a>space-around</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127114814.png" srcset="undefined" alt=""></p><p>👩注意:<code>space-around</code>和<code>space-between</code>的区别是:<code>space-around</code>会在所有<code>item</code>们的两边生成空隙,空隙的<code>width</code>=1/2相邻<code>item</code>的间距</p><h1 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h1><p>这个属性可以设置<code>item</code>们在副轴上的排列方式,一共有5个可选值</p><pre><code class="html">align-item: flex-start | flex-end | center | baseline | stretch;</code></pre><p>效果如下:</p><h3 id="flex-start-1"><a href="#flex-start-1" class="headerlink" title="flex-start:"></a>flex-start:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127124701.png" srcset="undefined" alt=""></p><h3 id="flex-end-1"><a href="#flex-end-1" class="headerlink" title="flex-end:"></a>flex-end:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127124750.png" srcset="undefined" alt=""></p><h3 id="center-1"><a href="#center-1" class="headerlink" title="center:"></a>center:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127124852.png" srcset="undefined" alt=""></p><h3 id="baseline"><a href="#baseline" class="headerlink" title="baseline:"></a>baseline:</h3><p>​    <img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127130434.png" srcset="undefined" alt=""></p><p>👩此处我为每个<code>item</code>都设置了 <code>line-height</code>=<code>height</code>,可以看到 <strong>baseline</strong>的对齐方式很特别,是以文字的基线作为标准的,我觉得可以用来做一些视觉设计.</p><h3 id="stretch"><a href="#stretch" class="headerlink" title="stretch"></a>stretch</h3><p>待续</p><h1 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h1><p>设置<code>container</code>的中<code>item</code>们垂直方向上的对齐方式</p><pre><code class="html">align-content: flex-start | flex-end | center | stretch | spave-between | space-around</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="center-2"><a href="#center-2" class="headerlink" title="center"></a>center</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140350.png" srcset="undefined" alt=""></p><h3 id="flex-start-2"><a href="#flex-start-2" class="headerlink" title="flex-start"></a>flex-start</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140505.png" srcset="undefined" alt=""></p><h3 id="flex-end-2"><a href="#flex-end-2" class="headerlink" title="flex-end"></a>flex-end</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140728.png" srcset="undefined" alt=""></p><h3 id="stretch-1"><a href="#stretch-1" class="headerlink" title="stretch"></a>stretch</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140909.png" srcset="undefined" alt=""></p><p>👩这里的话<code>stretch</code>的效果是把整个<code>container</code>除去内容后剩余的高度平均分配成行间距,有一点需要说明一下:第一行是会顶到顶部的,而最后一行下面会留下行间距. 大家可以和 <code>align-content: flex-start</code>进行对比哦</p><h3 id="space-between-1"><a href="#space-between-1" class="headerlink" title="space-between"></a>space-between</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127142848.png" srcset="undefined" alt=""></p><h3 id="space-around-1"><a href="#space-around-1" class="headerlink" title="space-around"></a>space-around</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127142802.png" srcset="undefined" alt=""></p><p>👩看到这里大家在心里会有个疑惑吧,<code>align-item</code>和<code>align-content</code>的区别是什么呢,其实这是我现在内心中的问号,于是我写下了这篇👇</p><blockquote><p><a href="https://tohrux.github.io/2019/11/27/flex2/" target="_blank" rel="noopener">https://tohrux.github.io/2019/11/27/flex2/</a></p></blockquote><h1 id="item上的属性"><a href="#item上的属性" class="headerlink" title="item上的属性"></a><code>item</code>上的属性</h1><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>可以为<code>item</code>加上order属性,来改变<code>item</code>们的顺序,order值越大的会排在越前面.</p><pre><code class="css">//语法.item1{order = 2};.item2{order = 1};</code></pre><p>原本默认的顺序(未加上order属性时):</p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/1574908489659.png" srcset="undefined" alt="1574908489659"></p><p>加上上面代码块的默认属性后:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191128103407.png" srcset="undefined" alt=""></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>可以设置<code>item</code>的扩展比率,根据所给予的数字大小来分配剩余空间(<code>width</code>).</p><p><strong>分配空间的计算方式</strong>:</p><blockquote><p>例如整个container的宽度为1000px,现在有三个item在其中,item1的宽度为100px,item2的宽度为200px,item3的宽度为300px,现在container内剩余的宽度为1000px-600px = 400px,现在给三个item分别给与flex-grow属性,item1:0; item2:3; item3:1;现在container将不会有剩余空间,item1的宽度依旧为100,item2则为3/(3+1)*400+200=500px,item3的宽度为1/(3+1)*400+300=400px;</p></blockquote><p>👩小tips:如果在container存在一堆item,只要为其中一个赋予flex-grow的值(可以是任何数字)它就会把剩余的空间都占用;</p><p>👨tips2:flex-grow的值可以为小数;</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>这个元素可以定义<code>item</code>的宽度,同时我们知道<code>width</code>也可以定义元素的宽度,但<code>flex-basis</code>会覆盖<code>width</code>的值.</p><h3 id="flex-shrink-amp-flex-basis-amp-flex-grow"><a href="#flex-shrink-amp-flex-basis-amp-flex-grow" class="headerlink" title="flex-shrink&amp;flex-basis&amp;flex-grow"></a>flex-shrink&amp;flex-basis&amp;flex-grow</h3><p>关于这三剑客,我推荐大家到这个blog看一下,讲得真的很通俗易懂,很棒,原本是抱着学习的心态去看,看完后发现自己写完全没有意义了</p><p><a href="https://blog.csdn.net/m0_37058714/article/details/80765562" target="_blank" rel="noopener">https://blog.csdn.net/m0_37058714/article/details/80765562</a></p><p>作者 <strong>wxk_前端开发</strong></p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>这个属性可以单独定义<code>item</code>在 <strong>cross axis</strong> 上的属性,并且可以覆盖<code>align-item</code>的属性,前五个值和之前的<code>align-item</code>用法一样,如果不给值,则默认给<code>auto</code>,表示继承 <code>align-item</code>,如果<code>align-item</code>也没有给值,则默认值为<code>flex-start</code>.</p><pre><code class="css">.item {  align-self: flex-start | flex-end | center | baseline | stretch | auto ;}</code></pre><p>未来可能会回来更新,因为到目前为止都只是把案例打了一遍,实际运用中遇到的问题,会记录下来,感谢在互联网上分享知识的人们,i了i了.</p><p>关于一些实际运用可以参考阮一峰老师的这篇博文:</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>flex</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel的继承与包含(extend&amp;include</title>
    <link href="undefined2019/11/25/laravel-extends/"/>
    <url>2019/11/25/laravel-extends/</url>
    
    <content type="html"><![CDATA[<h1 id="include"><a href="#include" class="headerlink" title="@include"></a>@include</h1><p>可以用来引进别的页面</p><pre><code class="php">@include(&#39;文件名&#39;)</code></pre><h1 id="extends"><a href="#extends" class="headerlink" title="@extends"></a>@extends</h1><pre><code class="php">父级页面 语法:@yield(&#39;名字&#39;) </code></pre><pre><code class="php">子级页面:@extends(&#39;view下的路径&#39;)@section(&#39;名字&#39;)内容@endsection</code></pre><p><strong>实例</strong>:</p><p>父级页面:</p><pre><code class="php">&lt;h1&gt;我是头部&lt;/h1&gt;{{-- 可变区 --}}@yield(&#39;myBody&#39;){{-- 可变区 --}}&lt;h1&gt;我是尾部&lt;/h1&gt;</code></pre><p>自己页面:</p><pre><code class="php">@extends(&#39;test/test2&#39;)@section(&#39;myBody&#39;)&lt;h1&gt;    Lorem ipsum dolor sit amet consectetur a    dipisicing elit. Ea quibusdam quas nobis minima, aspernatur laborum nihil, natus omnis quia solu    ta beatae recusandae deleniti neque    ? Voluptatibus, nulla mollitia. Possimus, laborum adipisci?&lt;/h1&gt;@endsection</code></pre><p>结果:</p><pre><code class="php">我是头部Lorem ipsum dolor sit amet consectetur a dipisicing elit. Ea quibusdam quas nobis minima, aspernatur laborum nihil, natus omnis quia solu ta beatae recusandae deleniti neque ? Voluptatibus, nulla mollitia. Possimus, laborum adipisci?我是尾部</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>larave表单验证</title>
    <link href="undefined2019/11/25/laravel1-25/"/>
    <url>2019/11/25/laravel1-25/</url>
    
    <content type="html"><![CDATA[<h1 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证:"></a>表单验证:</h1><p>多个验证规则可以通过”|”隔开:</p><p>语法:</p><pre><code class="php">$this-&gt;validate(数据对象,[数组形式的验证规则])</code></pre><table><thead><tr><th align="center">规则名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">require</td><td align="center">不能为空</td></tr><tr><td align="center">max:value</td><td align="center">字段值必须小于或等于value,如果是字符串 value则为字符串的个数</td></tr><tr><td align="center">email</td><td align="center">验证邮箱是否合法</td></tr><tr><td align="center">confirmed</td><td align="center">验证两个字段是否相同,如果是password则必须输入与之匹配的paasword_confirmation字段</td></tr><tr><td align="center">url</td><td align="center">字段必须为有效URL</td></tr><tr><td align="center">integer</td><td align="center">必须为整数</td></tr><tr><td align="center">numeric</td><td align="center">必须为数值</td></tr><tr><td align="center">max</td><td align="center">最多255字符</td></tr><tr><td align="center">min</td><td align="center">最少1字符</td></tr></tbody></table><h1 id="实现用户验证功能"><a href="#实现用户验证功能" class="headerlink" title="实现用户验证功能"></a>实现用户验证功能</h1><ol><li><p>创建一个用户控制器</p></li><li><p>新建一个index.blade.php页面</p></li><li><p>引入静态资源 CSS,Js等 </p></li><li><p>配置路由</p></li><li><p>csrf验证:</p><pre><code class="php">{{csrf_token()}}//会在页面显示 纯文本显示 用在异步提交 ajax{{csrf_field()}}//一般已html元素的形式生成 自动hidden👇也可以直接写成这个    @csrf</code></pre><p>csrf_field自动生成的html元素:</p><pre><code class="html">&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;i4Q2RwjAN5NpYyUwJogKSjsza9VBi4hYtwQ7gvvu&quot;&gt;</code></pre></li></ol><h1 id="如何得知一个请求类型"><a href="#如何得知一个请求类型" class="headerlink" title="如何得知一个请求类型"></a>如何得知一个请求类型</h1><pre><code class="php"> public function index(Request $request)    {        echo $request-&gt;method();    }</code></pre><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><pre><code class="php">//CONTROLLER.PHP:    public function index(Request $request)    {        if ($request-&gt;method() == &#39;POST&#39;) {            echo $request-&gt;method();            $this-&gt;validate($request, [                &#39;name&#39; =&gt; &#39;required|min:2|max:20&#39;,                &#39;password&#39; =&gt; &#39;required|min:6&#39;            ]);            echo &quot;success!&quot;;        } else {            echo $request-&gt;method();            return view(&#39;users.index.index&#39;);        }    }//INDEX.BLADE.PHP:    @if(count($errors) &gt; 0)    &lt;div class=&quot;alert alert-danger&quot;&gt;        &lt;ul&gt;            @foreach ($errors-&gt;all() as $error)                &lt;li&gt;{{ $error }}&lt;/li&gt;            @endforeach        &lt;/ul&gt;    &lt;/div&gt;    @endif    &lt;form action=&quot;&quot; method=&quot;post&quot; &gt;            &lt;p&gt;usrname&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;/p&gt;            &lt;p&gt;password&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;            @csrf            &lt;p&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/p&gt;       &lt;/form&gt;//WEB.PHP        Route::any(&#39;/users/index/adduser&#39;, &#39;UserController@index&#39;);</code></pre><h2 id="独立验证实现"><a href="#独立验证实现" class="headerlink" title="独立验证实现"></a>独立验证实现</h2><pre><code class="php">$validate = Validator::make($request-&gt;all(), [&#39;name&#39; =&gt; &#39;required|min:2|max:20&#39;,&#39;password&#39; =&gt; &#39;required|min:6&#39;]);//打印对象所有的方法 04:failsdump(get_class_methods($validate));if ($validate-&gt;fails()) {//通过重定向回退// return redirect()-&gt;back()-&gt;withErros($validate);}</code></pre><h2 id="通过验证器文件来实现"><a href="#通过验证器文件来实现" class="headerlink" title="通过验证器文件来实现"></a>通过验证器文件来实现</h2><p>通过命令行创建一个验证器文件</p><pre><code class="cmd">php artisan make:request UserRequest</code></pre><p>然后在该文件进行配置</p><pre><code class="php">    public function rules()    {        return [            //编写自定义规则            &#39;name&#39; =&gt; &#39;required|min:2|max:20&#39;,            &#39;password&#39; =&gt; &#39;required|min:6&#39;        ];    }    //如果需要中文的错误提示,则需要手动写方法    public function message()    {        return [            &#39;name.requiired&#39; =&gt; &#39;不能为空&#39;,            &#39;password.requiired&#39; =&gt; &#39;不能为空&#39;        ];    }</code></pre><h2 id="关于验证语言包"><a href="#关于验证语言包" class="headerlink" title="关于验证语言包"></a>关于验证语言包</h2><p>可以通过这个网站去下载<a href="https://packagist.org/packages/caouecs/laravel-lang" target="_blank" rel="noopener" title="packagist">packagist</a></p><p>使用composer安装完后 再到vendor下拿到这个文件复制到\resources\lang下</p><p>再在validation把locale修改为想要的语言就🆗</p>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lavavel视图</title>
    <link href="undefined2019/11/24/jkjk/"/>
    <url>2019/11/24/jkjk/</url>
    
    <content type="html"><![CDATA[<h1 id="视图文件的命名和渲染"><a href="#视图文件的命名和渲染" class="headerlink" title="视图文件的命名和渲染"></a>视图文件的命名和渲染</h1><ol><li>文件名习惯小写</li><li>后缀为 <strong>blade.php</strong> </li><li>不使用 <strong>balde.php</strong>结尾的话就不能使用laravel提供的标签语法显示数据,只能使用原生语法显示数据</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>在开发中可以使用compact(php内置函数)来进行数组的打包</p><h3 id="TextController"><a href="#TextController" class="headerlink" title="TextController:"></a>TextController:</h3><pre><code class="php">    public function test3()    {        //现在时间        $date = date(&#39;Y-m-d H:i:s&#39;, time());        //获取今天的星期        $day = &#39;sunday&#39;;        //show 视图        //return view(&#39;home/index/test3&#39;, [&#39;date&#39; =&gt; $date, &#39;day&#39; =&gt; $day]);        👆      效果一样            👇        return view(&#39;home/index/test3&#39;, compact(&#39;date&#39;, &#39;day&#39;));    }</code></pre><h3 id="web-php"><a href="#web-php" class="headerlink" title="web.php:"></a>web.php:</h3><pre><code class="php">Route::get(&#39;/home/index/test3&#39;, &quot;TextController@test3&quot;);</code></pre><h3 id="text3-blade-php"><a href="#text3-blade-php" class="headerlink" title="text3.blade.php:"></a>text3.blade.php:</h3><pre><code class="php">当前访问的是home/index/test3.blade.php文件&lt;br/&gt;现在是: {{$date}},今天是星期{{$day}}</code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出:"></a>输出:</h3><pre><code class="html">当前访问的是home/index/test3.blade.php文件现在是: 2019-11-23 01:47:37,今天是星期sunday</code></pre><h3 id="之前输出当前时间"><a href="#之前输出当前时间" class="headerlink" title="之前输出当前时间:"></a>之前输出当前时间:</h3><pre><code class="php">时间戳 {{date('Y-m-d H:i:s',$time)}}</code></pre><h3 id="一年后的时间"><a href="#一年后的时间" class="headerlink" title="一年后的时间:"></a>一年后的时间:</h3><pre><code class="PHP">{{date('Y-m-d H:i:s',strtotime('+1 year'))}};</code></pre><h1 id="循环分支语法标签"><a href="#循环分支语法标签" class="headerlink" title="循环分支语法标签"></a>循环分支语法标签</h1><p>下面是一个案例</p><p><strong>Controller</strong>中:</p><pre><code class="php">use DB;class TestController extends Controller{    //start    public function test1()    {        $db = DB::table(&#39;member&#39;)-&gt;get();        // dd($db);        return view(&#39;test.test1&#39;, compact(&#39;db&#39;));    }}</code></pre><p><strong>blade</strong>中:</p><pre><code class="php">id&amp;emsp;&amp;emsp;name&amp;emsp;&amp;emsp;email&amp;emsp;&lt;br&gt;@foreach ($db as $key =&gt; $value){{-- 如果不要key的话可以直接省略 ($db as $value) --}}    {{$value -> id}}&amp;emsp;&amp;emsp;    {{$value -> name}}&amp;emsp;&amp;emsp;    {{$value -> email}}    &lt;br&gt;@endforeach</code></pre><p><strong>输出结果:</strong></p><pre><code class="html">id  name  email 1   阿龙   al@gmail2   阿B   ab@gmail</code></pre><p>🙋‍特别注意</p><p>get查询道德结果集中的每一条都是一个对象,因此在循环具体字段的时候需要注意使用对象调用属性的方式才可以获取其数据</p><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><pre><code class="php">if在模板引擎的写法@if (Expression1)statement1@elseif(Expression2)statement2...@elsestatement3@endif</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel中关于数据库的操作</title>
    <link href="undefined2019/11/22/laravel4/"/>
    <url>2019/11/22/laravel4/</url>
    
    <content type="html"><![CDATA[<h1 id="所有项目都由这六个部分组成"><a href="#所有项目都由这六个部分组成" class="headerlink" title="所有项目都由这六个部分组成"></a>所有项目都由这六个部分组成</h1><ol><li>增删改查</li><li>循环</li><li>判断</li></ol><h1 id="DB类操作数据库"><a href="#DB类操作数据库" class="headerlink" title="DB类操作数据库"></a>DB类操作数据库</h1><p>按照MVC架构,对数据的操作都应该放在Model中完成.但如果不使用Model,也可以在laravel框架提供的DB类数据库操作数据.laravel中DB类的基本用法:<strong>DB::table(‘tableName’)</strong></p><p>在对数据库进行操作使用的是<strong>navicat</strong></p><ol><li><p>new 一个新的数据库 <strong>qz04</strong></p></li><li><p>在 <strong>qz04</strong>下 new 一个新的table <strong>member</strong></p></li><li><p>新建查询,代码如下:</p></li></ol><pre><code class="mysql">create table member(    id int primary key auto_increment,    name varchar(32) not null,    age tinyint unsigned not null,    email varchar(32) not null)engine myisam charset utf8;</code></pre><ol start="4"><li><p>在laravel中对 <strong>.env</strong>文件进行修改,链接到数据库</p><pre><code class="txt">DB_CONNECTION=mysqlDB_HOST=localhostDB_PORT=3306DB_DATABASE=qz04DB_USERNAME=rootDB_PASSWORD=</code></pre></li><li><p>在TextController控制器中引入DB门面</p><pre><code class="php">use DB;//因为已经在app.php文件中定义,所以可以直接use</code></pre></li><li><p>在web.php注册路由</p><pre><code class="php">//增删改查Route::group([&#39;prefix&#39; =&gt; &#39;home/index&#39;], function () {    Route::get(&#39;/add&#39;, &quot;TextController@add&quot;);    Route::get(&#39;/del&#39;, &quot;TextController@del&quot;);    Route::get(&#39;/update&#39;, &quot;TextController@update&quot;);    Route::get(&#39;/select&#39;, &quot;TextController@select&quot;);});</code></pre></li></ol><h2 id="增加信息-insert"><a href="#增加信息-insert" class="headerlink" title="增加信息(insert)"></a>增加信息(insert)</h2><p>▶<strong>insert(数组)可以同时添加一条或多条,返回的是布尔类型</strong></p><pre><code class="php">DB::table(&#39;无前缀表名&#39;) -&gt; insert(); //链式操作;</code></pre><p>向member表同时添加多条数据:</p><pre><code class="php">    public function add()    {        //定义相关联的表名        $db = DB::table(&#39;member&#39;);        //使用insert增加数据        $result = $db-&gt;insert([            [                &#39;name&#39; =&gt; &#39;安洁莉娜&#39;,                &#39;age&#39;  =&gt; &#39;17&#39;,                &#39;email&#39; =&gt; &#39;angelina@gmail.com&#39;            ],            [                &#39;name&#39; =&gt; &#39;艾雅法拉&#39;,                &#39;age&#39;  =&gt; &#39;17&#39;,                &#39;email&#39; =&gt; &#39;eyjafjalla@gmail.com&#39;            ],            [                &#39;name&#39; =&gt; &#39;陈&#39;,                &#39;age&#39;  =&gt; &#39;17&#39;,                &#39;email&#39; =&gt; &#39;chen@gmail.com&#39;            ]        ]);        dd($result);//返回为true    }</code></pre><p>extra🤹‍♀️: 也可以使用以下方法进行 <strong>insert</strong> 的操作:</p><pre><code class="php">$db = DB::table(&#39;member&#39;);$result = $db-&gt; insertGetId([    &#39;name&#39; =&gt; &#39;马冬梅&#39;,     ...])dd($result);//返回id的值;</code></pre><h2 id="修改数据-update"><a href="#修改数据-update" class="headerlink" title="修改数据(update)"></a>修改数据(update)</h2><p>▶修改数据可以使用where(‘字段名’,’符号’,’值’)  -&gt; update([]); 如下:</p><pre><code class="php">  public function update()    {        //定义需要操作的数据表        $db = DB::table(&#39;member&#39;);        //修改id为1的用户的name        $result = $db-&gt;where(&#39;id&#39;, &#39;=&#39;, &#39;1&#39;)-&gt;update([            &#39;name&#39; =&gt; &#39;安洁莉娜是jk&#39;        ]);        dd($result); //👩返回1 表示为收到影响的行数    }</code></pre><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><pre><code class="php">▶DB:table(&#39;member&#39;)-&gt;get(); //相当于 select * from member;</code></pre><pre><code class="php">    public function select()    {        $db = DB::table(&#39;member&#39;);        $result = $db-&gt;get();        //尝试循环遍历数组        foreach ($result as $key =&gt; $value) {            dump($value);        }        //获取指定范围的数据        $kk = $db-&gt;get()-&gt;where(&#39;id&#39;, &#39;&lt;&#39;, &#39;3&#39;)-&gt;where(&#39;id&#39;, &#39;&gt;&#39;, &#39;1&#39;);        //获取where(&#39;id&#39;, &#39;&lt;&#39;, &#39;3&#39;)中的第一行数据        $kk1 = $db-&gt;get()-&gt;where(&#39;id&#39;, &#39;&lt;&#39;, &#39;3&#39;)-&gt;first();        dump($kk);        dump($kk1);    }</code></pre><p>按照指定字段进行特定规则的排序</p><pre><code class="php">$kk2 = DB::table(&#39;member&#39;)-&gt;orderBy(&#39;age&#39;, &#39;desc&#39;)-&gt;get();</code></pre><p>分页操作</p><pre><code class="php">$kk3 = DB::table(&#39;member&#39;)-&gt;limit(2)-&gt;offset(2)-&gt;get();//limit(x) x:最多显示的行数 offset(y) y:从第y行开始取</code></pre><h2 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据(delete)"></a>删除数据(delete)</h2><p>删除中有两种方式,第一种是物理删除(本质是删除),<strong>逻辑删除(本质是修改);</strong></p><p>数据删除可以通过delete函数和truncate函数实现,</p><pre><code class="php">Delete 表示删除记录;Truncate 表示清空整个数据表;</code></pre><pre><code class="php">$db = DB::table(&#39;member&#39;);$result = $db-&gt;where(&#39;id&#39;, &#39;=&#39;, &#39;1&#39;)-&gt;delete();//返回的是受影响的行数;</code></pre><h1 id="书上的增删改查的方法"><a href="#书上的增删改查的方法" class="headerlink" title="书上的增删改查的方法"></a>书上的增删改查的方法</h1>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel控制器基础</title>
    <link href="undefined2019/11/22/laravel2/"/>
    <url>2019/11/22/laravel2/</url>
    
    <content type="html"><![CDATA[<h1 id="控制器文件的位置"><a href="#控制器文件的位置" class="headerlink" title="控制器文件的位置"></a>控制器文件的位置</h1><p>控制器属于项目代码</p><p>位于<strong>app/http/Controllers</strong></p><h1 id="命名控制器文件"><a href="#命名控制器文件" class="headerlink" title="命名控制器文件"></a>命名控制器文件</h1><p>驼峰命名+Controller.php</p><h1 id="控制器的结构代码"><a href="#控制器的结构代码" class="headerlink" title="控制器的结构代码"></a>控制器的结构代码</h1><p>🚫不需要我们自己去写,可以通过artisan来生成</p><p>相应命令:</p><pre><code class="cmd">php artisan make:controller TestController</code></pre><p>创建资源控制器:(自动生成很多方法</p><pre><code class="php">php artisan make:controller TestController --resource //简写 --r</code></pre><p>分目录控制器(没有这个文件夹的话就会创建)</p><pre><code class="cmd">php artisan make:controller Admin/TestController</code></pre><p>创建成功的提示:</p><pre><code class="cmd">Controller created successfully.</code></pre><p>生成的结构代码:</p><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;//命名空间use Illuminate\Http\Request;//命名空间三元素: 常量,方法,类class TestController extends Controller{    //}</code></pre><h1 id="控制器路由"><a href="#控制器路由" class="headerlink" title="控制器路由"></a>控制器路由</h1><p>#使用路由规则调用控制器下的方法,而不再走回调函数.</p><p>格式</p><pre><code class="php">控制器类名@方法名</code></pre><h1 id="控制下的命名空间分组"><a href="#控制下的命名空间分组" class="headerlink" title="控制下的命名空间分组"></a>控制下的命名空间分组</h1><pre><code class="php">Route::group([&#39;namespace&#39;=&gt;&#39;Admin&#39;],function(){    Route:get(&#39;/shit/test1&#39;,&#39;TestController@test1&#39;)})</code></pre><h1 id="接受用户输入"><a href="#接受用户输入" class="headerlink" title="接受用户输入"></a>接受用户输入</h1><p>接受用户输入的类:illuminate\support\facades\input</p><p><strong>facades:介于一个类实例化与没有实例化之间的一个状态,是类的一个接口的实现,说白了就是静态方法.</strong></p><blockquote><p>在laravel中如果需要使用facades,但是又不想写那么长:Use Illuminate\Support\Facades\Input 则可以在config/app.php中定义别名</p></blockquote><pre><code class="php">//自己添加的别名        &#39;Input&#39; =&gt; Illuminate\Support\Facades\Input::class</code></pre><p>👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆</p><p>😤😤😤😤😤😤😤😤😤😤😤😤</p><p>上面真的是血的教训,我用的laravel是最新的6.5的,但是在5.2版本之后就开始用Request替代Input了</p><p>一开始疯狂检测自己的拼写,甚至重装laravel,花了大概一个半小时才解决了问题.</p><p>不过这个过程还是挺有意义的;</p><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;use Illuminate\Http\Request; //声明 这是自动生成的class TextController extends Controller{    public function home(Request $request)//实例化对象    {            //获取全部请求的数据        dump($request-&gt;all());        //只获取a,b字段的值        dump($request-&gt;only([&#39;a&#39;, &#39;b&#39;]));        //获取除了a,b以外的值        dump($request-&gt;except([&#39;a&#39;, &#39;b&#39;]));        //判断是否存在id的这个字段,exists完全等同于has        dump($request-&gt;has(&#39;id&#39;));        dump($request-&gt;exists(&#39;id&#39;));        //获取id的值,如果请求字段为空的话就用 &#39;xxx&#39; 代替        dump($request-&gt;input(&#39;id&#39;, &#39;xxx&#39;));        //&quot;.&quot;可以用来分别获取每个数组元素        dump($request-&gt;input(&#39;books.0&#39;));    }}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel路由规则的使用</title>
    <link href="undefined2019/11/21/lavaral/"/>
    <url>2019/11/21/lavaral/</url>
    
    <content type="html"><![CDATA[<h1 id="4种常用的路由方法"><a href="#4种常用的路由方法" class="headerlink" title="4种常用的路由方法"></a>4种常用的路由方法</h1><p>post/get/any/match</p><pre><code class="php">//get 语法//例如访问/hey的时候可以这样写Route::get (&#39;/hey&#39;, function() {    return &quot;hello&quot;;});//post//post方法可以用postman来获取值//👩post请求需要在VerifycsrfToken中修改把不想要csrf请求的路由写在这里:    protected $except = [        //把不想csrf验证得路由写在这里        &#39;/hello&#39;    ];Route::post (&#39;/hello&#39;, function() {    return &quot;hello from post&quot;;});//any//任意类型Route::any(&#39;/test2&#39;, function () {    echo &#39;当前是用any访问&#39;;});//matchRoute::match([&#39;get&#39;, &#39;post&#39;], &#39;/test3&#39;, function () {    echo &#39;当前是用match访问&#39;;});</code></pre><h1 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h1><p>路由参数其实就是给路由传递参数</p><p>参数分为<strong>必选参数</strong>和<strong>可选参数</strong></p><pre><code class="php">//必选参数 给定默认值Route::any(&#39;users/{id}&#39;, function ($id=&#39;&#39;) {    echo &#39;当前用户的id是&#39;.$id;});👆这样写会报错,不能预先给定值,必须要用户输入数字才可以    eg:example.com/users/123  //输出 当前用户的id是123//可选参数 给定默认值Route::any(&#39;users2/{id?}&#39;, function ($id=&#39;&#39;) {    echo &#39;当前用户的id是&#39;.$id;});👆可预先给定值//通过?形式传递get参数Route::any(&#39;/user3&#39;, function () {    echo &#39;当前用户的id是&#39;.$_GET[&#39;id&#39;];});//限制路由参数 例如:必须是数字 必须有参数Route::get(&#39;hello2/{id}&#39;, function ($id) {    echo &quot;now is&quot;.$id;}) -&gt; where(&#39;id&#39;,&#39;[0-9]+&#39;);</code></pre><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>使代码不累赘</p><p>c –处理用户交互逻辑,如果需要交互就会跳到mdel处理数据</p><p>else -&gt; 直接跳转到view</p><p>model –用于处理数据的增删改查</p><h1 id="路由别名"><a href="#路由别名" class="headerlink" title="路由别名"></a>路由别名</h1><pre><code class="php">//路由别名//🙅不可以直接输入到地址栏,但是可以作为简写被别的方法调用Route::any(&#39;/user4/afadfaf/asdfasfasdf/asdfasd&#39;, function () {    echo &#39;IamUser4&#39;;}) -&gt; name(&#39;user4&#39;);Route::get(&#39;/na&#39;, function () {    return redirect()-&gt;route(&#39;user4&#39;);});Route::group([&#39;prefix&#39; =&gt; &#39;admin&#39;], function () {    Route::get(&#39;/test1&#39;, function () {        return &#39;IamTest1&#39;;    });    Route::get(&#39;/test2&#39;, function () {        echo &quot;IamTest2&quot;;    });});</code></pre><h1 id="查看系统当前路由别名"><a href="#查看系统当前路由别名" class="headerlink" title="查看系统当前路由别名"></a>查看系统当前路由别名</h1><p>在laravel根目录下cmd -&gt; php artisan可以查看所有命令, 找到route:list(这代表了路由列表,然后再cmd -&gt; php artisan route:list  🆗</p><h1 id="路由群组"><a href="#路由群组" class="headerlink" title="路由群组:"></a>路由群组:</h1><p>如果路由层级过多,每次要重新定义路由会很麻烦,我们可以将前缀一样的路由放在路由群组里</p><pre><code class="php">Route::group([&#39;prefix&#39; =&gt; &#39;admin&#39;], function () {    Route::get(&#39;/test1&#39;, function () {        return &#39;IamTest1&#39;;        //匹配 &quot;/admin/test1&quot; URl    });    Route::get(&#39;/test2&#39;, function () {        echo &quot;IamTest2&quot;;        //匹配 &quot;/admin/test2&quot; URl    });    Route::group([&#39;prefix&#39; =&gt; &#39;/test1&#39;], function () {        Route::get(&#39;/login&#39;, function () {            return &#39;我是二级路由test1下面的三级路由login&#39;;        });    });});👆以上代码中admin被称为一级路由,test1/test2被称为2级路由,以此类推</code></pre><h1 id="限制路由参数"><a href="#限制路由参数" class="headerlink" title="限制路由参数"></a>限制路由参数</h1><pre><code class="php">//限制路由参数 例如:必须是数字 必须有参数Route::get(&#39;hello2/{id}&#39;, function ($id) {    echo &quot;now is&quot;.$id;}) -&gt; where(&#39;id&#39;,&#39;[0-9]+&#39;);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>明日方舟:大家,快回来吧!</title>
    <link href="undefined2019/11/20/arknight/"/>
    <url>2019/11/20/arknight/</url>
    
    <content type="html"><![CDATA[<p>​        花了一个中午的时间把明日方舟昨天刚刚更新的内容打完了,不得不说这次更新的内容的确很棒,我愿称这次update为我玩明日方舟以来最棒的一次更新.</p><p>​        这次新关卡的那几首bgm我认为是这次更新的最大亮点,从打鼠王那段令人热血沸腾的摇滚到我现在写着这篇博文依旧还在循环着的企鹅物流背景板的那首轻松愉快且特别的音乐,我都要给个大大的👍,值得一提的是官方也在昨天公布了一首与其他两位创作音乐人的合作曲目,听着感觉还行8,现已上架网易云了,配合着live2D合成的MV应该能获得很多人的喜欢.</p><p>​        另外,今天YJ了发布日服开服前的pv,在看pv时,大家都可以感受到一个事实,那就是明日方舟离动画化不会远了.</p><p>​        沉浸在一切的同时,我感觉制作者的愿望,想法在一步步的实现,真的很羡慕那群人,可以构想出这样一个世界,通过剧情,作画,音乐去一步一步的描述,填充着那个世界,并且让更多的人去加入他们(各种同人制作),我都可以想到制作者在死之前可以无憾地说出”hey,你说的是那个泰拉世界吗?那个世界就交给你们了”.</p><p>​        但是,如果每天为了完成游戏内每日任务而做着一样的事,无限重复,就会变得像个机器人一样了,我真的很厌恶这种感觉,所以等每个月一次的更新实装后再上线,一个月只玩一次,平时去看看同人社区才是我认为最佳的玩明日方舟的姿势.</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/may.png" srcset="undefined" alt=""></p><p>​    hexo d😃今天才知道自己写篇还算流畅的文章有多难,还是需要每天创作来提高自己啊</p><hr><p>分享下这次活动的pv</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=75637996&cid=129392331&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    
    <tags>
      
      <tag>arknights</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日份的美好</title>
    <link href="undefined2019/11/19/11-19/"/>
    <url>2019/11/19/11-19/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos/img/suger.jpg" srcset="undefined" alt=""></p><p>今天得到了这三颗糖,当时真的是很开心,这三颗糖也真的很好吃</p><p>记得在高中的时候就有接触过UHA,不过带给我回忆的都是我不怎么喜欢的人</p><p>今天去查了下UHA才知道是一个日本的牌子</p><p>U-unique H-human A-adventure</p><blockquote><p>UHA=YUU(pleasure)－HA(waves)</p><p>UHA (pronounced YUU-HA) is originally a“coined” Japanese word, symbolizing our wish to provide pleasure through our confectioneries, quietly and gently like calm waves. We name our confectioneries YUU(=pleasure)‐SHOKU(=food) which means “food that is fun to eat.”</p></blockquote><p>原本想留下一颗留念的,但是因为贪心吃掉了,</p><p>吃完糖后想起了往事,想到了自己,心情就开始变得十分难过了</p><p>不过糖还是很好吃的</p>]]></content>
    
    
    
    <tags>
      
      <tag>sad</tag>
      
      <tag>happy</tag>
      
      <tag>subarashii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sass基础语法</title>
    <link href="undefined2019/11/18/sass/"/>
    <url>2019/11/18/sass/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>Sass是基于ruby开发的,但是用的人却不用懂得写Ruby.</p><p>首先,在编写Sass前要先下载安装Ruby</p><p>(在网上搜索Ruby的时候 看到的评价都在说这门语言很优雅,以后有空的话会去接触下的!)</p><p>👇</p><p>然后在命令行中 输入 </p><pre><code class="命令行">gem install sass </code></pre><p>等待执行完毕后 然后输入在命令行输入</p><pre><code class="c">sass -v</code></pre><p>如果出现了相应的版本号 就意味着安装成功了👏</p><h1 id="开始基础语法"><a href="#开始基础语法" class="headerlink" title="开始基础语法"></a>开始基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code class="scss">/*注释*/ 👈这种注释会在编译后的CSS中显示//注释   👈这种则不会</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code class="scss">$变量名字:变量属性值</code></pre><p>使用! default 会让之前的样式覆盖掉当前的样式</p><pre><code class="SCSS">//你好 我是sass$defaultColor: red;$defaultColor: #0000ff !default;h1{color:$defaultColor;}</code></pre><p>编译后的css:</p><pre><code class="css">h1 {  color: red;}</code></pre><h2 id="关于变量的作用域"><a href="#关于变量的作用域" class="headerlink" title="关于变量的作用域"></a>关于变量的作用域</h2><p>💡需要注意的是如果上述变量的作用域在所有类的外面,那它就是全局变量,否则他的作用域只在当前的类</p><h2 id="嵌套CSS规则"><a href="#嵌套CSS规则" class="headerlink" title="嵌套CSS规则"></a>嵌套CSS规则</h2><pre><code class="scss">/* SASS嵌套 */$defaultColor: red;#content{    article{        h1{color: $defaultColor;}        p{color: $defaultColor;}    }    aside{        color: aqua;     }}</code></pre><p>编译后的css:</p><pre><code class="css">#content article h1 {  color: red;}#content article p {  color: red;}#content aside {  color: aqua;}</code></pre><h2 id="“-”同时也可以代表父元素选择器"><a href="#“-”同时也可以代表父元素选择器" class="headerlink" title="“$”同时也可以代表父元素选择器"></a>“$”同时也可以代表父元素选择器</h2><pre><code class="scss">/*sass*/a{    font-weight: bold;    text-decoration: none;    $:hover{ color:yellow; }    p.login $ {font:weight:normal}}</code></pre><pre><code class="css">/*编译后的CSS*/a{    font-weight: bold;    text-decoration: none;}a:hover{        color:yellow;        }p.login a {font:weight:normal}</code></pre><h2 id="定义混合指令"><a href="#定义混合指令" class="headerlink" title="定义混合指令"></a>定义混合指令</h2><p>如果网站中有很多地方需要部署相似的样式,可以使用@mixin来进行封装</p><pre><code class="scss">/*Sass*/    @mixin large-text {        font:{            family: Arial;            size: 20px;            weight: bold;        }        color: #ff0000;    }    p {@include large-text()}    a {@include large-text()}</code></pre><pre><code class="css">/*编译后的CSS*/p {  font-family: Arial;  font-size: 20px;  font-weight: bold;  color: #ff0000;}a {  font-family: Arial;  font-size: 20px;  font-weight: bold;  color: #ff0000;}</code></pre><h3 id="使用-指向父类选择器"><a href="#使用-指向父类选择器" class="headerlink" title="使用$指向父类选择器"></a>使用$指向父类选择器</h3><pre><code class="scss">/*Sass*///@mixin 混合指令  $xu:#010203;$w:10px;@mixin text{    font:{       family: 华文宋体;       weight: bold;       size: $w*2.5;    }    &amp;:hover{      cursor: pointer;      text-decoration:underline #a94442 ;    }  }  p{    //通过@include调用  导入    @include text;  }</code></pre><pre><code class="css">/*编译成CSS*/p {  font-family: 华文宋体;  font-weight: bold;  font-size: 25px;}p:hover {  cursor: pointer;  text-decoration: underline #a94442;}</code></pre><h3 id="通过传参-gt-有参函数"><a href="#通过传参-gt-有参函数" class="headerlink" title="通过传参  =&gt; 有参函数"></a>通过传参  =&gt; 有参函数</h3><p>(可以给定默认值 例如$width = 1 ,这样在不给参数的时候就会默认显示1)</p><pre><code class="scss">/*sass*/  @mixin myborder($color,$width,$style){    border:{      width: $width;      color: $color;      style: $style;    } } .b{   //  传参需要一一对应   @include myborder(red,5px,solid); }</code></pre><pre><code class="css">/*编译成CSS*/.b {  border-width: 5px;  border-color: red;  border-style: solid;}</code></pre><h3 id="不确定参数的数量时…"><a href="#不确定参数的数量时…" class="headerlink" title="不确定参数的数量时…"></a>不确定参数的数量时…</h3><pre><code class="scss">//  不确定参数的写法@mixin box-s($shadow...){    -moz-box-shadow:$shadow;    box-shadow:$shadow;    -o-box-shadow: $shadow;}.b3{ //    属性可以省略   参数3不能负数//           水平阴影 垂直 阴影半径 阴影程度 颜色 Insert内扩@include box-s(5px 5px 5px 5px #123654);}</code></pre><pre><code class="css">/*编译后*/.b3 {  -moz-box-shadow: 5px 5px 5px 5px #123654;  box-shadow: 5px 5px 5px 5px #123654;  -o-box-shadow: 5px 5px 5px 5px #123654;}</code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><p>Sass支持 +,-,*,/,%等运算</p><p>如果在运算时不给单位的话,则会自动补充单位</p><pre><code class="scss">.fon{    $a:10px;    $b:10;    $c:#123456;    min-width: $a/2;    max-width: $a*2;     margin: (10px/2);//两个数字之间要加括号才可以进行除法运算    padding: #{$a}/#{$b};//使用#{$a}可以不进行除法运算}</code></pre><pre><code class="css">/*编译后的css*/.fon{min-width:5px;max-width:20px;margin:5px;padding:10px/10}</code></pre><h2 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h2><pre><code class="scss">.str {    $s:&quot;宋体&quot;;    $t:&quot;微软雅黑&quot;;    $r:&quot;sans&quot;;    font-family: $s + $t;    font-family: $r + &quot;-self&quot;;}</code></pre><pre><code class="css">/*编译后的CSS*/.str{    font-family:&quot;宋体微软雅黑&quot;;    font-family:&quot;sans-self&quot;}</code></pre><h2 id="条件判断和循环"><a href="#条件判断和循环" class="headerlink" title="条件判断和循环"></a>条件判断和循环</h2><h3 id="使用-if-和-else"><a href="#使用-if-和-else" class="headerlink" title="使用@if 和 @else"></a>使用@if 和 @else</h3><p>(支持and/or/on/not)</p><pre><code class="scss">.bol{    $age:25;    @if ($age &gt; 18 and $age &lt; 27){        color: yellow;    }@else{        color: green;    }}</code></pre><pre><code class="css">/*编译后的CSS*/.bol{color:yellow}</code></pre><p>eg2:</p><pre><code class="scss">@mixin block($bol){    @if($bol){        dispaly:block;    }@else{        display: none;    }}.block{    @include block(true);}.hidden{    @include block(false);}</code></pre><pre><code class="css">/*编译后的css*/.block {  dispaly: block;}.hidden {  display: none;}</code></pre><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="@for 循环"></a>@for 循环</h3><p>@for $i from <start> through <end> {}(会through最后一个数字)</p><p>@for $i from <start> to <end>{} (忽略最后一个数字)</p><pre><code class="scss">@for $var from 1 through(或者to) 3 {    .item-#{$var} {width: 2em * $var;}}</code></pre><pre><code class="css">/*编译后的css*/.item-1 {  width: 2em;}.item-2 {  width: 4em;}.item-3 {  width: 6em;}</code></pre><h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><p>@each $example in example1,example2,example3{}</p><pre><code class="scss">@each $animal in puma, sea-slug, egret,salamander{    .#{$animal}-icon{        background-image: url(&#39;image/#{$animal}.png&#39;);    }}@each $header, $size in (h1:2em, h2:1.5em, h3:1em){    #{$header}{        font-size: $size;    }}</code></pre><pre><code class="css">/*编译后CSS*/.puma-icon {  background-image: url(&quot;image/puma.png&quot;);}.sea-slug-icon {  background-image: url(&quot;image/sea-slug.png&quot;);}.egret-icon {  background-image: url(&quot;image/egret.png&quot;);}.salamander-icon {  background-image: url(&quot;image/salamander.png&quot;);}h1 {  font-size: 2em;}h2 {  font-size: 1.5em;}h3 {  font-size: 1em;}</code></pre><h3 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h3><p>while循环使用指令重复输出格式知道表达式返回结果为false.可以实现比@for循环更为复杂的指令</p><pre><code class="scss">$i: 5;@while $i&gt;0{    .h#{$i} {        width: 2em * $i;        $i : $i - 2;    }}</code></pre><pre><code class="css">.h5 {  width: 10em;}.h3 {  width: 6em;}.h1 {  width: 2em;}</code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Sass的数组常常被称为”map”,它总是以键值对的形式出现–”key:value”</p><p>语法格式:</p><pre><code class="scss">$map: (    key1:value1,    key2: (        key2-1: value2-1,        key2-2: value2-2,    ),    key3: value3);</code></pre><p>例子:</p><pre><code class="scss">$some-color:(    a: #ea4c89,    b: #3b5998,     c: #171515);.btn-a{    color:map-get($some-color, a ) //👈这里使用了map-get方法 这是map自带的方法}</code></pre><pre><code class="css">/*编译后*/.btn-a {  color: #ea4c89;}</code></pre><h3 id="选择器继承-extend"><a href="#选择器继承-extend" class="headerlink" title="选择器继承@extend"></a>选择器继承@extend</h3><pre><code class="scss">.father{    border: 1px solid black;}.son{    @extend .father;}</code></pre><pre><code class="css">.father, .son {  border: 1px solid black;}</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>终于完成了,😭,虽然有些疲惫.</p><p>以上都是基于我的老师@帅帅徐 笔记内容&amp;上课所讲,以及 书(@web前端开发中级 下册) 和自己微不足道的总结,</p><p>感谢阅读🙌</p><p>2019/11/19</p><p>下午 6:47</p><hr><p>刚刚问了老师一句,”实际开发中会用到sass吗 ?”</p><p>然后他回了我一句”你应该反过来问” 😂</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>前端</tag>
      
      <tag>sass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hey,Are you henrietta? CLICK HERE PLS</title>
    <link href="undefined2019/11/17/henrietta/"/>
    <url>2019/11/17/henrietta/</url>
    
    <content type="html"><![CDATA[<h1 id="hey-henriettaV01"><a href="#hey-henriettaV01" class="headerlink" title="hey henriettaV01!"></a>hey henriettaV01!</h1><h4 id="I’m-tohru-this-article-is-written-for-you"><a href="#I’m-tohru-this-article-is-written-for-you" class="headerlink" title="I’m tohru ,this article is written for you."></a>I’m tohru ,this article is written for you.</h4><h4 id="welcome-to-my-blog-it-was-created-two-days-ago…"><a href="#welcome-to-my-blog-it-was-created-two-days-ago…" class="headerlink" title="welcome to my blog, it was created two days ago…"></a>welcome to my blog, it was created two days ago…</h4><h4 id="I’ll-never-forget-the-happy-time-when-we-played-Apex-on-pc-amp-ps4"><a href="#I’ll-never-forget-the-happy-time-when-we-played-Apex-on-pc-amp-ps4" class="headerlink" title="I’ll never forget the happy time when we played Apex on pc &amp; ps4,"></a>I’ll never forget the happy time when we played Apex on pc &amp; ps4,</h4><h4 id="and-I’ll-never-forget-your-birthday-XD"><a href="#and-I’ll-never-forget-your-birthday-XD" class="headerlink" title="and I’ll never forget your birthday XD"></a>and I’ll never forget your birthday XD</h4><blockquote><p>9/10 </p></blockquote><h4 id="have-a-nice-day-henrietta-or-should-I-called-you-‘胡琼琼’-😄😄😄"><a href="#have-a-nice-day-henrietta-or-should-I-called-you-‘胡琼琼’-😄😄😄" class="headerlink" title="have a nice day~ henrietta,or should I called you ‘胡琼琼’? 😄😄😄"></a>have a nice day~ henrietta,or should I called you ‘胡琼琼’? 😄😄😄</h4>]]></content>
    
    
    
    <tags>
      
      <tag>friend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CDN来加速网页的访问</title>
    <link href="undefined2019/11/17/cdn/"/>
    <url>2019/11/17/cdn/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天是搭建github.io的第二天,很多功能都还在完善,比如说在一些地方(没错,说的就是你,天朝!)访问GitHub.Page很慢的问题,通过上网一番查找发现似乎可以用CDN来解决.</p><h1 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN?"></a>什么是CDN?</h1><p>这里粘贴一段阿里云官网上面对CDN的描述:</p><blockquote><p>将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。<br>解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</p></blockquote><p>总之它可以让别人访问自己的GitHub.Page的速度更快就对了!</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>这里就拿我们网页中需要加载很久的图片来举例8,</p><p>首先我们要找到放置自己github.io 页面的那个repo,如下图所示:</p><p><img src="/img/cdn2.png" srcset="undefined" alt=""></p><p>我们需要的图片他们现在都静静的躺在img那个文件夹里</p><p>如果想用CDN获取他们的话</p><p>可以点击图片最顶端的release来发布版本</p><p>例如我这里发布的版本为1.0  发布完成后我们就可通过jsDelivr来引用我们的资源了</p><p><img src="/img/cdn1.png" srcset="undefined" alt=""></p><p>如上面的地址所示:</p><p>​    gh 代表 github</p><p>​    tohrux是我的GitHub用户名</p><p>​    tohrux.github.io是我仓库的名字</p><p>​    1.0 是版本号</p><p>​    img/fullVersionxx.jpg 是想要获取的文件</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/tohrux/tohrux.github.io@1.0//img/fullVersionxx.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/tohrux/tohrux.github.io@1.0//img/fullVersionxx.jpg</a></p></blockquote><p>然后用这个外链来替换掉你想要替换的文件就大功告成了~</p><p>同理,用CDN来引入网页中jQuery,bootstrap等文件也是很常用的做法哦</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这算是第一次写博文8,其实就是把今晚的问题解决了,然后再总结一下,站在巨人的肩膀上真的很爽啊😊(憨憨笑)</p><p>说实话我也不知道CDN到底有没有带来显著的效果,不过欢迎在下方的评论区留言告诉我网页的加载速度有没有变化,感谢阅读!</p><p>​            </p><hr><p>2019/11/17日更新:</p><p>​    👇新发现!其实可以用github + jsDelivr + picgo 更方便快捷地实现图片的插入    </p><blockquote><p>​        <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a> </p><p>​        <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener" title="picgo地址">picgo</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>build</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现在开始我拥有了自己的博客!</title>
    <link href="undefined2019/11/17/test1/"/>
    <url>2019/11/17/test1/</url>
    
    <content type="html"><![CDATA[<h1 id="现在开始我拥有了自己的博客"><a href="#现在开始我拥有了自己的博客" class="headerlink" title="现在开始我拥有了自己的博客!"></a>现在开始我拥有了自己的博客!</h1><p>终于完成了,现在都快5点了,希望明天可以不上课8,(但估计打完这篇md要做的第一件事就是设闹钟了),</p><p>晚安世界~</p><p>上课的笔记什么的明天再更吧</p><p>总之还是开心的!</p><p>ps.这原本是11-16日凌晨4点写下的,因为一些原因现在重新上传了一遍</p>]]></content>
    
    
    
    <tags>
      
      <tag>happy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片加载测试</title>
    <link href="undefined2019/11/16/ceshi/"/>
    <url>2019/11/16/ceshi/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/rikka.jpg" srcset="undefined" alt=""></p><p><img src="/img/akane.jpg" srcset="undefined" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>ssss</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/11/15/hello-world/"/>
    <url>2019/11/15/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>