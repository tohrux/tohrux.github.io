<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue添加删除搜索列表中的数据</title>
    <link href="undefined2020/01/28/vue1-28/"/>
    <url>2020/01/28/vue1-28/</url>
    
    <content type="html"><![CDATA[<pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;table class=&quot;table table-light&quot;&gt;            &lt;thead class=&quot;thead-light&quot;&gt;                &lt;tr&gt;                    &lt;th&gt;id&lt;/th&gt;                    &lt;th&gt;name&lt;/th&gt;                    &lt;th&gt;time&lt;/th&gt;                    &lt;th&gt;operation&lt;/th&gt;                &lt;/tr&gt;            &lt;/thead&gt;            &lt;tbody&gt;                &lt;tr v-for=&quot;value in search(result)&quot; :key=&quot;value.id&quot;&gt;                    &lt;td&gt; {{value.id}} &lt;/td&gt;                    &lt;td&gt; {{value.name}} &lt;/td&gt;                    &lt;td&gt; {{value.time}} &lt;/td&gt;                    &lt;td&gt; &lt;a href=&quot;&quot; @click.prevent=&quot;del(value.id)&quot;&gt;del&lt;/a&gt; &lt;/td&gt;                &lt;/tr&gt;            &lt;/tbody&gt;            &lt;tfoot&gt;                &lt;tr&gt;                    &lt;th&gt;#&lt;/th&gt;                &lt;/tr&gt;            &lt;/tfoot&gt;        &lt;/table&gt;        &lt;input type=&quot;text&quot; v-model=&quot;id&quot;&gt;        &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;        &lt;input type=&quot;button&quot; value=&quot;add&quot; @click=&quot;add&quot;&gt;        &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                id: &quot;&quot;,                name: &quot;&quot;,                result: &quot;&quot;,                list: [{                        id: 1,                        name: &quot;angelina&quot;,                        time: new Date()                    },                    {                        id: 2,                        name: &quot;skade&quot;,                        time: new Date()                    },                    {                        id: 3,                        name: &quot;eyjafjala&quot;,                        time: new Date()                    }                ]            },            methods: {                add() {                    this.list.push({                        id: this.id,                        name: this.name,                        time: new Date()                    });                    this.id = &quot;&quot;;                    this.name = &quot;&quot;;                },                del(id) {                    this.list.some((value, index) =&gt; {                        if (value.id == id) {                            this.list.splice(index, 1);                            return true;                        }                    })                },                search(result) {                    var newList = [];                    this.list.forEach((value) =&gt; {                        if (value.name.includes(result)) {                            newList.push(value);                        }                    })                    return newList;                    //es6新提供了一种字符串的检索方式,includes,用法和indexOf类似,                    // filter方法是直接返回一个新的数组,                    //var newList = this.list.filter(value=&gt;{                    // if(value.name.includes(result)){return value}                    // })                    // return newList;                }            },        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1/27</title>
    <link href="undefined2020/01/27/1-27/"/>
    <url>2020/01/27/1-27/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20200127152244.png" srcset="undefined" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>draw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 1/20</title>
    <link href="undefined2020/01/20/vue1-20/"/>
    <url>2020/01/20/vue1-20/</url>
    
    <content type="html"><![CDATA[<p>箭头函数内的this指向的是此函数的外部的this</p><pre><code class="js">methods: {                kk() {                    setInterval(() =&gt; {                        var start = this.msg1.substring(0, 1);                        var end = this.msg1.substring(1);                        this.msg1 = end + start;                        console.log(this.msg1);                    }, 400);                }            }</code></pre><p>👆的this指向的是vue对象</p><h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><p>阻止冒泡stop</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;        &lt;p @click=&quot;imp&quot;&gt;            &lt;span v-text=&quot;msg1&quot; @click.stop=&quot;imspan&quot;&gt;&lt;/span&gt;        &lt;/p&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                msg1: &quot;ImMsg1&quot;,            },            methods: {                imspan() {                    console.log(&quot;imspan&quot;);                },                imp() {                    console.log(&quot;imp&quot;);                }            },        })    &lt;/script&gt;</code></pre><p>阻止默认事件prevent</p><pre><code class="html">        &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent&gt;baidu&lt;/a&gt;</code></pre><p>使用捕获模式capture (加在父元素里面)</p><p>只对自己生效self</p><p>只生效一次once</p><p>👩可以 串联 例如@click.self.once</p><h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><p>只有这个属性可以实现数据的双向绑定</p><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;        &lt;h1&gt; {{msg}}&lt;/h1&gt;        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;    &lt;/div&gt;</code></pre><p>只作用于表单元素</p><h1 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h1><pre><code class="html">&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;input v-model=&quot;n1&quot; type=&quot;text&quot; /&gt;        &lt;select v-model=&quot;opt&quot;&gt;            &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;            &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;            &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;            &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;        &lt;/select&gt;        &lt;input v-model=&quot;n2&quot; type=&quot;text&quot; /&gt;        &lt;button @click=&quot;result1&quot;&gt;=&lt;/button&gt;        &lt;input v-model=&quot;result&quot; type=&quot;text&quot; /&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                n1: 0,                n2: 0,                result: 0,                opt: &quot;+&quot;            },            methods: {                result1() {                    switch (this.opt) {                        case &quot;+&quot;:                            this.result = parseInt(this.n1) + parseInt(this.n2);                            break;                    }                }            },        })    &lt;/script&gt;&lt;/body&gt;</code></pre><h1 id="vue中的样式"><a href="#vue中的样式" class="headerlink" title="vue中的样式"></a>vue中的样式</h1><pre><code class="html">&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;!-- &lt;div :class=&quot;[flag?&#39;red&#39;:&#39;&#39;]&quot;&gt;hello&lt;/div&gt; --&gt;        &lt;!-- &lt;div :class=&quot;[{red:flag}]&quot;&gt;123&lt;/div&gt; --&gt;        &lt;div :class=&quot;flag&quot;&gt;123&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                flag: {                    red: true,                    thin: true,                    fcolor: true                },                ad: true            },            methods: {            },        })    &lt;/script&gt;&lt;/body&gt;</code></pre><h1 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h1><pre><code class="html">&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;div :style=&quot;flag&quot;&gt;123&lt;/div&gt;        &lt;div :style=&quot;flag&quot; v-for=&quot;(item,i) in ad&quot;&gt;索引指{{i}}的每一项是{{item}}&lt;/div&gt;        &lt;div v-for=&quot;user in list&quot;&gt; {{user.id}} {{user.name}} &lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                flag: {                    &#39;color&#39;: &#39;red&#39;,                    &#39;font-weight&#39;: &#39;200&#39;,                    fontSize: &#39;40px&#39;                },                ad: [1, 2, 3, 4, 5],                list: [{                        name: &#39;z1&#39;,                        id: 1                    },                    {                        name: &#39;z2&#39;,                        id: 2                    },                    {                        name: &#39;z3&#39;,                        id: 3                    },                    {                        name: &#39;z4&#39;,                        id: 4                    }                ]            },            methods: {            },        })    &lt;/script&gt;&lt;/body&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 12/25</title>
    <link href="undefined2019/12/26/1225/"/>
    <url>2019/12/26/1225/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue v-text/html/插值表达式/v-bind/v-on</title>
    <link href="undefined2019/12/25/vue2/"/>
    <url>2019/12/25/vue2/</url>
    
    <content type="html"><![CDATA[<pre><code class="html">    &lt;div id=&quot;app&quot;&gt;        &lt;p&gt;            {{msg}}            &lt;div&gt;hello&lt;/div&gt;        &lt;/p&gt;        &lt;div v-html=&quot;msg2&quot;&gt;&lt;/div&gt;        &lt;input type=&quot;button&quot; v-on:click=&quot;show&quot; :value=&quot;msg&quot;&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#app&#39;, //表示上面new的vue的实例,要控制页面上的哪个区域            data: { //data属性中存放的是el中要用到的数据                msg: &#39;hello,我是msg&#39;,                msg2: &#39;&lt;h1&gt;hello ,I am msg2&lt;/h1&gt;&#39;,                btbMsg: &#39;click me&#39;            },            methods: {                show: function(){                    alert(123);                }            }        })    &lt;/script&gt;</code></pre><p>v-html,v-text:👩</p><pre><code>v-html,会直接解析data中的字符串里的html标签两者在使用时,在被绑定的html标签(&lt;div v-html=&quot;msg2&quot;&gt;&lt;/div&gt;中间输入内容是无效的,如果需要输入内容可以使用{{插值表达式}}</code></pre><p>v-bind:</p><pre><code>要为非v-开头的属性赋值时且想用datao里的数据可以使用&quot;v-bind:&quot;,简写&quot;:&quot;,👩:可以加上字符串或数字,把data中的属性当作变量使用👇    :value=&quot;btbMsg+123&quot;</code></pre><p>v-on: Vue提供的事件绑定机制 (简写@ 下面可以直接写成@click=’show’)</p><pre><code>&lt;input type=&quot;button&quot; v-on:click=&quot;show&quot; :value=&quot;msg&quot;&gt;需要在Vue里定义method</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue12-23</title>
    <link href="undefined2019/12/23/vue12-23/"/>
    <url>2019/12/23/vue12-23/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191224154153.png" srcset="undefined" alt=""></p><p>mvvm</p><p>一段基本结构代码</p><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;        &lt;p&gt;            {{msg}}        &lt;/p&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#app&#39;, //表示上面new的vue的实例,要控制页面上的哪个区域            data: { //data属性中存放的是el中要用到的数据                msg: &#39;hello,我是msg&#39;,            }        })</code></pre><p>👩: id=”app”  的div 是 “v”</p><p>​        vm对象是 “vm” 她在”m” 和 “v” 中起了 调度作用</p><p>​        data中的内容是 “m”</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>last day4</title>
    <link href="undefined2019/12/17/12-17/"/>
    <url>2019/12/17/12-17/</url>
    
    <content type="html"><![CDATA[<h1 id="css文本属性"><a href="#css文本属性" class="headerlink" title="css文本属性"></a>css文本属性</h1><p>font-variant: normal/small-caps</p><p>letter-spacing =&gt; 字母 </p><p>word-spacing  =&gt; 单词,西文,对汉字无效</p><p>text-transform =&gt; 设置文本大小写</p><p>text-shadow =&gt; x,y,blur,color</p><p>white-space =&gt; 设置元素内部的空白,值=&gt; pre==<code>&lt;pre&gt;</code>; nowrap-&gt;不换行</p><h1 id="css尺寸"><a href="#css尺寸" class="headerlink" title="css尺寸"></a>css尺寸</h1><p>width,和height不给的话默认为 auto</p><h1 id="css列表属性"><a href="#css列表属性" class="headerlink" title="css列表属性"></a>css列表属性</h1><p>list-style-type =&gt; 设置一些样式</p><p>list-style-position =&gt; outside/inside</p><p>list-style-image =&gt; 添加url </p><p>list-style 以上的简写形式</p><h1 id="css表格属性"><a href="#css表格属性" class="headerlink" title="css表格属性"></a>css表格属性</h1><p>border-collapse =&gt; 设置是否合并表格的边框</p><p>border-spacing =&gt;相邻单元格的距离 可以设置两个值,第一个值表示水平距离,第二个值表示垂直间距</p><p>caption-side =&gt; top/bottom</p><p>empty-cells =&gt; 设置是否显示表格中的空单元格 默认show 表示在空单元格周围绘制边框</p><p>table-layout =&gt; 设置单元格列宽的排列方式,默认为auto,表示列宽由最宽的单元格决定,可以设置为fixed,表示列宽由表格宽度和列宽决定</p><h1 id="css-伪元素选择器"><a href="#css-伪元素选择器" class="headerlink" title="css 伪元素选择器"></a>css 伪元素选择器</h1><p>:first-letter</p><p>:first-line</p><p>配合:before 和 :after伪元素选择器使用,用于插入生成内容,默认生成的内容将显示为行内元素</p><p>content的值可以是 字符串/url</p><h1 id="css-outline"><a href="#css-outline" class="headerlink" title="css outline"></a>css outline</h1><p>outline-style =&gt; dotted/dashed/solid…</p><p>outline-color</p><p>outline-width</p><h1 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h1><p>默认值 visible</p><p>auto: 如果内容被修剪,自动添加滚动条</p><p>hidden : 自动剪裁掉超出的内容</p><p>scroll: 一直会有滚动条</p><h1 id="position"><a href="#position" class="headerlink" title="position"></a>position</h1><p>默认值 static: 会忽略掉top,right,bottom,left,z-index属性</p><p>relative:不会脱离文档流</p><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><pre><code class="css">.clearfix:after{        content: &quot;&quot;;        display: block;        height: 0;        clear:both;        visibility: hidden;}</code></pre><p>clear:left/right/both;</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQ复习 -private</title>
    <link href="undefined2019/12/16/l5/"/>
    <url>2019/12/16/l5/</url>
    
    <content type="html"><![CDATA[<pre><code class="js">&lt;script&gt;        $(document).ready(function () {            $(&quot;body&quot;).click(function () {                var txt = $(&quot;#msg&quot;).html() + &quot;&lt;p&gt;body被点击&lt;/p&gt;&quot;;                $(&quot;#msg&quot;).html(txt);            })            $(&quot;#content&quot;).click(function () {                var txt = $(&quot;#msg&quot;).html() + &quot;&lt;p&gt;外部div被点击&lt;/p&gt;&quot;;                $(&quot;#msg&quot;).html(txt);            })            $(&quot;span&quot;).click(function (event) {                var txt = $(&quot;#msg&quot;).html() + &quot;&lt;p&gt;内部span被点击&lt;/p&gt;&quot;;                $(&quot;#msg&quot;).html(txt);                // event.stopPropagation();            })            // $(&quot;button&quot;).click(function (e) {            //     if ($(&quot;button&quot;).text() == &quot;&quot;) {            //         e.preventDefault();            //     }            // })        })&lt;/script&gt;&lt;body&gt;    &lt;button&gt;&lt;/button&gt;    &lt;div id=&quot;content&quot;&gt;        &lt;span&gt;span&lt;/span&gt;    &lt;/div&gt;    &lt;div id=&quot;msg&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h1 id="键盘事件-选择器"><a href="#键盘事件-选择器" class="headerlink" title="键盘事件,选择器"></a>键盘事件,选择器</h1><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;js/jquery-3.4.1.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        $(document).ready(function () {            $(&quot;span:nth-child(1)&quot;).css(&quot;background&quot;, &quot;yellow&quot;);            $(&quot;p:nth-of-type(2)&quot;).after(&quot;&lt;div id=&#39;hello&#39;&gt;nihao&lt;/div&gt;&quot;);            $(&quot;p:nth-of-type(1)&quot;).css(&quot;background&quot;, &quot;red&quot;);            $(&quot;p[class = jk]&quot;).hover(                function () {                    $(this).css(&quot;background&quot;, &quot;blue&quot;);                },                function () {                    $(this).css(&quot;background&quot;, &quot;pink&quot;);                }            )            $(&quot;input&quot;).keydown(function () {                $(this).css(&quot;background&quot;, &quot;yellow&quot;);            })            $(&#39;input&#39;).keyup(function () {                $(this).css(&quot;background&quot;, &quot;white&quot;);            })            $(&quot;form&quot;).submit(function () {                alert(&quot;submitting&quot;);            })            $(&quot;input&quot;).change(function () {                alert(&quot;had been change&quot;);            })            var x = 0;            $(&quot;#myScroll&quot;).scroll(function () {                $(this).next().html(x += 1);                // alert(123);            })            $(window).resize(function () {                // $(&quot;body&quot;).text(x += 1);            })        })    &lt;/script&gt;    &lt;style&gt;        #hello {            background-color: green;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;input type=&quot;text&quot;&gt;    &lt;/br&gt;    &lt;span&gt;h&lt;/span&gt;    &lt;p&gt;pnihao&lt;/p&gt;    &lt;p&gt;nihaop&lt;/p&gt;    &lt;p class=&quot;jk&quot;&gt;helo&lt;/p&gt;    &lt;form action=&quot;&quot;&gt;        &lt;input type=&quot;text&quot;&gt;        &lt;input id=&quot;mySubmit&quot; type=&quot;submit&quot;&gt;    &lt;/form&gt;    &lt;div id=&quot;myScroll&quot; style=&quot;width: 100px;height: 100px;background-color: yellow;overflow: scroll;&quot;&gt;        nihaodajiadsfsafasf        nihaodajiadsfsafasf        nihaodajiadsfsafasf        nihaodajiadsfsafasf    &lt;/div&gt;    &lt;span&gt;0&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h1><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;script src=&quot;js/jquery-3.4.1.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        function checkName() {            var username = $(&quot;[name=&#39;username&#39;]&quot;).val();            var reg = /^[a-zA-Z]{3,7}$/.test(username);            if (reg) {                $(&#39;#m_username&#39;).html(&#39;available&#39;);                return true;            } else {                $(&#39;#m_username&#39;).html(&#39;unavailable&#39;);                return false;            }        }        function a() {            checkName();            console.log(checkName());        }    &lt;/script&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; value=&quot;&quot; onblur=&quot;a()&quot;&gt;        &lt;span id=&quot;m_username&quot;&gt;&lt;/span&gt;        &lt;input type=&quot;button&quot; id=&quot;button&quot; value=&quot;click&quot;&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="图片定时切换-只使用setTimeout"><a href="#图片定时切换-只使用setTimeout" class="headerlink" title="图片定时切换(只使用setTimeout"></a>图片定时切换(只使用setTimeout</h1><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;script src=&quot;js/jquery-3.4.1.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var g;        var k = 0;        var t;        var arr = [&quot;ark/gushou.png&quot;, &quot;ark/pzw.png&quot;, &quot;ark/qsl.png&quot;];        function changeSrc() {            k++;            if (k &gt; 2) {                k = 0;            }            var path = arr[k];            $(&quot;img&quot;).attr(&quot;src&quot;, path);            t = setTimeout(changeSrc, 1000);        }        $(function () {            g = setTimeout(changeSrc, 1000)            $(&quot;#button&quot;).click(function () {                clearTimeout(t);            })            $(&quot;#button1&quot;).click(function () {                t = setTimeout(changeSrc, 1000);            })            // $(&quot;img&quot;).hover(            //     function () {            //         clearTimeout(t);            //     },            //     function () {            //         t = setTimeout(changeSrc, 1000);            //     }            // )        })    &lt;/script&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        &lt;img id=&quot;img&quot; src=&quot;ark/gushou.png&quot; alt=&quot;&quot;&gt;    &lt;/div&gt;    &lt;button id=&quot;button&quot;&gt;stop&lt;/button&gt;    &lt;button id=&quot;button1&quot;&gt;start&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>这里有点奇怪,</p><pre><code class="html"> // $(&quot;img&quot;).hover(            //     function () {            //         clearTimeout(t);            //     },            //     function () {            //         t = setTimeout(changeSrc, 1000);            //     }            // )</code></pre><p>使用这段的时候无法停止</p><h1 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h1><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;script src=&quot;js/jquery-3.4.1.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        $(function () {            $(&quot;#div1&quot;).bind(&quot;click&quot;, function () {                $(this).animate({                    left: &#39;+=200px&#39;,                    width: &#39;+=200px&#39;                }, 1300, function () {                    $(this).animate({                        left: &#39;0px&#39;,                        width: &#39;100px&#39;                    }, 1000)                })            })        })    &lt;/script&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        #div1 {            position: absolute;            width: 100px;            height: 100px;            background-color: #abcdef;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="鼠标位置获取"><a href="#鼠标位置获取" class="headerlink" title="鼠标位置获取"></a>鼠标位置获取</h1><pre><code class="html">$(&quot;#div1&quot;).bind(&quot;mousemove&quot;, function (e) {                var x = e.pageX;                var y = e.pageY;                $(this).text(&quot;x:&quot; + x + &quot;;y:&quot; + y);            })</code></pre><p>👩:mousemove 比较适合这种时候用</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bs</title>
    <link href="undefined2019/12/13/bs4/"/>
    <url>2019/12/13/bs4/</url>
    
    <content type="html"><![CDATA[<h1 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h1><pre><code class="html">//媒体对象 container&gt;row&gt;col&gt;media&gt;img + media body //&lt;-放文字    &lt;div class=&quot;container bg-danger&quot;&gt;        &lt;div class=&quot;row justify-content-center&quot;&gt;            &lt;div class=&quot;col-6 bg-info&quot;&gt;                &lt;div class=&quot; media&quot;&gt;                    &lt;img class=&quot;align-self-center&quot; src=&quot;ark/pzw.png&quot; alt=&quot;&quot;&gt;                    &lt;div class=&quot;media-body&quot;&gt;                        &lt;h5 class=&quot;mb-0&quot;&gt;Header&lt;/h5&gt;                        Content                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;</code></pre><h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><ul><li>text-align</li><li>text-center</li><li>text-right</li><li>text-nowrap</li><li>text-justify //针对西文字体,可以让字体的间隔,尽量使左右侧都对齐</li><li>text-lowercase</li><li>text-uppercase</li><li>text-capitalize </li><li>*text-primary/dark/info…</li></ul><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><pre><code class="html">ul&gt;li ol&gt;li dl&gt;dt&gt;dd*ul/ol/dl</code></pre><ul><li>list-unstyle 加在ul中  可以清除 但是依旧会保留ul的margin</li><li>list-inline 清除ul所有的样式</li><li>list-inline-item 加在每个li中 使他们变成行内元素</li></ul><pre><code class="html">    &lt;ol class=&quot;list-inline&quot;&gt;        &lt;li class=&quot;list-inline-item&quot;&gt;123&lt;/li&gt;        &lt;li class=&quot;list-inline-item&quot;&gt;123&lt;/li&gt;        &lt;li class=&quot;list-inline-item&quot;&gt;123&lt;/li&gt;    &lt;/ol&gt;</code></pre><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><ul><li>table 每行增加水平分割线以及少量padding,最重要的是会变成响应式布局</li><li>table-responsive 会在小屏幕上出现滚动条</li><li>table-hover</li><li>table-striped</li><li>table-bordered</li><li>table-hover</li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li>img-thumbnail</li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><ul><li>.form-inline</li><li>.form-group</li><li>.form-control </li><li>.form-group-lg/sm</li><li>.input-lg/sm</li><li>.checkbox </li><li>.radio </li></ul><pre><code class="html">&lt;div class=&quot;form-inline &quot;&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;password&quot;&gt;pass&lt;/label&gt;            &lt;input type=&quot;password&quot; id=&quot;password&quot; class=&quot;form-control&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;label for=&quot;text&quot;&gt;lOGiN&lt;/label&gt;            &lt;input type=&quot;text&quot; id=&quot;text&quot; class=&quot;form-control&quot;&gt;        &lt;/div&gt;&lt;/div&gt;</code></pre><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><ul><li>.btn</li><li>.btn-primary/success/info……</li><li>.btn-lg/sm/xs </li><li>.btn-block -&gt;块级按钮,会填满整个父容器</li><li>.active -&gt;被选中样式</li><li>.disable -&gt; 不可用</li><li>.focus -&gt; 获取焦点的样式</li><li>btn-group (-vertical)</li><li>btn-toobar</li></ul><h1 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h1><ul><li>.dropup/down 容器 </li><li>.dropdown-menu </li><li>.dropdown-item</li><li>.dropdown-toggle -&gt; 箭头小图标</li><li>data-toggle -&gt; 表示医生们进行触发</li><li>btn-group -&gt;使按钮的间距为0</li></ul><p>*下拉注册</p><pre><code class="html">    &lt;div class=&quot;dropdown btn-group&quot;&gt;        &lt;a href=&quot;&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;/a&gt;        &lt;button class=&quot;btn btn-danger&quot;&gt;about&lt;/button&gt;        &lt;button class=&quot;btn btn-danger&quot;&gt;about&lt;/button&gt;        &lt;div class=&quot;dropdown-menu p-0&quot;&gt;            &lt;form action=&quot;&quot;&gt;                &lt;div class=&quot; input-group&quot;&gt;                    &lt;input type=&quot;text&quot; class=&quot; form-control&quot; id=&quot;kk&quot;&gt;                &lt;/div&gt;                &lt;div class=&quot; input-group&quot;&gt;                    &lt;input type=&quot;text&quot; class=&quot; form-control&quot;&gt;                &lt;/div&gt;                &lt;div class=&quot; dropdown-divider&quot;&gt;&lt;/div&gt;                &lt;div class=&quot;row justify-content-center align-content-center&quot;&gt;                    &lt;a href=&quot;&quot; class=&quot;btn btn-dark text-center &quot;&gt;log in&lt;/a&gt;                &lt;/div&gt;            &lt;/form&gt;        &lt;/div&gt;</code></pre><h2 id="输入框组"><a href="#输入框组" class="headerlink" title="输入框组"></a>输入框组</h2><pre><code class="html">    &lt;div class=&quot;container&quot;&gt;        &lt;form action=&quot;&quot;&gt;            &lt;div class=&quot; input-group &quot;&gt;                &lt;div class=&quot; input-group-prepend&quot;&gt;                    &lt;span class=&quot;input-group-text&quot;&gt;@&lt;/span&gt;                &lt;/div&gt;                &lt;input class=&quot; form-control&quot; type=&quot;text&quot; placeholder=&quot;aloah&quot;&gt;            &lt;/div&gt;        &lt;/form&gt;    &lt;/div&gt;</code></pre><pre><code class="html">input-group&gt;(input-group-prepend&gt;input-group-text)+(input)</code></pre><ul><li>.input-group-prepend/append</li><li>.input-group-text</li><li>.input-group</li></ul><h1 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h1><ul><li>navbar</li><li>navbar-light/dark -&gt;修改字体颜色(nav brand)</li><li>navbar-brand -&gt;  brand</li><li>nav-justified -&gt; 按比例分配空间</li><li>nav-fill 等比分配空间</li><li>navbar-form</li><li>navbar- link</li><li>navbar-btn</li><li>navbar-text</li><li>navbar-left/right</li><li>navbar-fixed-bottom</li><li>navbar-fixed-top</li><li>navbar-static-top</li></ul><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><ul><li>pagination</li></ul><h1 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h1><pre><code class="html"> &lt;ul class=&quot; breadcrumb&quot;&gt;        &lt;li class=&quot; breadcrumb-item&quot;&gt;&lt;a href=&quot;&quot;&gt;                hi            &lt;/a&gt;&lt;/li&gt;        &lt;li class=&quot; breadcrumb-item&quot;&gt;&lt;a href=&quot;&quot;&gt;                hey            &lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;</code></pre><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><ul><li>label</li></ul><p>徽章</p><ul><li>badge</li></ul><pre><code class="html">    &lt;span&gt;hello&lt;/span&gt;    &lt;span class=&quot; badge badge-danger&quot;&gt;123&lt;/span&gt;</code></pre><h1 id="缩略图-v3"><a href="#缩略图-v3" class="headerlink" title="缩略图 v3"></a>缩略图 v3</h1><ul><li><p>thumbnail</p></li><li><p>caption</p><pre><code class="html"> &lt;div class=&quot; thumbnail&quot;&gt;        &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;        &lt;div class=&quot; caption&quot;&gt;            &lt;h5&gt;&lt;/h5&gt;            &lt;button&gt;&lt;/button&gt;            &lt;button&gt;&lt;/button&gt;        &lt;/div&gt;    &lt;/div&gt;</code></pre></li></ul><h1 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h1><ul><li>alert -success/info/warnng….</li><li>alert-dismissable <code>&lt;可关闭的提示框&gt;</code></li></ul><pre><code class="html">    &lt;div class=&quot; alert alert-dismissible alert-primary&quot;&gt;        don&#39;t be sad        &lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;            &amp;times;        &lt;/button&gt;    &lt;/div&gt;</code></pre><h1 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h1><pre><code class="html">    &lt;div class=&quot; progress&quot;&gt;        &lt;div class=&quot; progress-bar&quot; style=&quot;width: 10%;&quot;&gt;            &lt;span&gt;10%&lt;/span&gt;        &lt;/div&gt;    &lt;/div&gt;</code></pre><h1 id="巨幕"><a href="#巨幕" class="headerlink" title="巨幕"></a>巨幕</h1><ul><li>jumbotron</li></ul><h1 id="列表组"><a href="#列表组" class="headerlink" title="列表组"></a>列表组</h1><ul><li><p>list-group</p></li><li><p>list-group-item</p><pre><code class="html">    &lt;ul class=&quot; list-group bg-info&quot;&gt;        &lt;li class=&quot; list-group-item&quot;&gt;123&lt;/li&gt;        &lt;li class=&quot; list-group-item&quot;&gt;123&lt;/li&gt;        &lt;li class=&quot; list-group-item&quot;&gt;123&lt;/li&gt;        &lt;li class=&quot; list-group-item &quot;&gt;            kl            &lt;span class=&quot; badge-danger&quot;&gt;                123            &lt;/span&gt;        &lt;/li&gt;    &lt;/ul&gt;</code></pre></li></ul><h1 id="字体图标v3"><a href="#字体图标v3" class="headerlink" title="字体图标v3"></a>字体图标v3</h1><p>gliphicon </p><h1 id="之前的一些笔记"><a href="#之前的一些笔记" class="headerlink" title="之前的一些笔记"></a>之前的一些笔记</h1><h3 id="直接给col-而不是-col-1-2-3可以自动分配剩下的空间"><a href="#直接给col-而不是-col-1-2-3可以自动分配剩下的空间" class="headerlink" title="直接给col 而不是 col-1,2,3可以自动分配剩下的空间"></a>直接给col 而不是 col-1,2,3可以自动分配剩下的空间</h3><h3 id="可变宽度内容-col-breakpoint-auto"><a href="#可变宽度内容-col-breakpoint-auto" class="headerlink" title="可变宽度内容: col-{breakpoint}-auto"></a>可变宽度内容: col-{breakpoint}-auto</h3><h3 id="在BS中flex"><a href="#在BS中flex" class="headerlink" title="在BS中flex"></a>在BS中flex</h3><ol><li>align-items-start</li><li>align-self-start</li><li>justify-content-start</li></ol><h3 id="一列超过12行的话会自动跳到下一行"><a href="#一列超过12行的话会自动跳到下一行" class="headerlink" title="一列超过12行的话会自动跳到下一行"></a>一列超过12行的话会自动跳到下一行</h3><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><pre><code class="js">order:1 order:2</code></pre><h3 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h3><p>通过marginleft实现,后面的元素会跟着移动</p><p>修改默认的md,lg等大小</p><pre><code class="html">$grid-breakpoint:()    xs: 420px,    sm: 768px,    .....;</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><pre><code class="html">&lt;small&gt;&lt;/small&gt;&lt;mark&gt;&lt;/mark&gt;&lt;abbr&gt;&lt;/abbr&gt;&lt;blockquote&gt;&lt;/blockquote&gt;</code></pre><h3 id="w-25-h-25"><a href="#w-25-h-25" class="headerlink" title="w-25 h-25"></a>w-25 h-25</h3><p>整体的25%</p><h2 id="x-y-m-p"><a href="#x-y-m-p" class="headerlink" title="x,y,m,p"></a>x,y,m,p</h2><p>x:lr</p><p>y:tb;</p><h3 id="size-rem"><a href="#size-rem" class="headerlink" title="size(rem)"></a>size(rem)</h3><ul><li>1:0.25;</li><li>2:0.5;</li><li>3: 1.0 rem</li><li>4: 1.5 rem</li><li>5: 3.0 rem</li><li>6:auto 自动计算</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12-12</title>
    <link href="undefined2019/12/12/12-12/"/>
    <url>2019/12/12/12-12/</url>
    
    <content type="html"><![CDATA[<p>今天被这个问题整自闭了</p><pre><code class="js">    var obj = {        kk: function () {            function one() {                console.log(this);            }            one();        }    };    obj.kk();</code></pre><p>这里的obj.kk()输出的是window对象.</p><p>我一直在想,为什么它的结果不是obj对象,因为kk方法属于obj,所以这个one()方法的调用者也是obj,甚至在吃晚饭的路上,等待晚饭做好,在等晚饭变亮的等待的过程中,我也在思考这个问题,我甚至问了老师,</p><p>他是这么回答的</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191212212826.png" srcset="undefined" alt=""></p><p>我问了一个学习群里的人他们是这样回答的</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191212213104.png" srcset="undefined" alt=""></p><p>我发现三个人给出了三种不同答案,真的很晕啊<br>目前可知情报:</p><ul><li><p>this指向的是函数运行时所在的环境</p></li><li><p>而这个one()指向的window</p></li><li><p>所以说这个one()是在全局环境下运行的</p><p>这不是废话吗?</p></li></ul><p>12/13 更新</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191213084338.jpg" srcset="undefined" alt=""></p><p>好像把我一系列的问题都给解决了 开森<del>~</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>don&#39;t know</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pdo</title>
    <link href="undefined2019/12/11/pdo/"/>
    <url>2019/12/11/pdo/</url>
    
    <content type="html"><![CDATA[<p>PDO,php data object <em>php数据对象</em></p><h1 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h1><p>比php连接mysql多了一个参数,数据库类型</p><p><strong>$dbms</strong> <em>Database Management System</em></p><p><strong>$dsn</strong> <em>Data Source Name</em></p><pre><code class="php">&lt;?phpecho &quot;&lt;pre&gt;&quot;;$dbms = &#39;mysql&#39;;$host = &#39;localhost&#39;;$dbName = &#39;jk&#39;;$user = &#39;root&#39;;$pass = &#39;&#39;;$dsn = &quot;$dbms:host=$host;dbname=$dbName&quot;;// echo $dsn;try{    //去try,去执行,去创建,这个pdo对象    $pdo = new PDO($dsn,$user,$pass);    echo &quot;success&quot;;} catch(PDOException $e){   //如果try中内容有错误,则会在catch中捕获异常;即对象没有创建成功,则会执行catch里面的内容,捕获异常的时候要使用PDO自己的异常处理类 &quot;PDOException $e&quot;   die($e-&gt;getMessage());  //因为没有必要往下进行了,所以直接die打印出$e-&gt;getMessage()}</code></pre><h1 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h1><h2 id="exec-需要结果集的sql语句"><a href="#exec-需要结果集的sql语句" class="headerlink" title="exec() 需要结果集的sql语句"></a>exec() 需要结果集的sql语句</h2><p>insert into ,delete ,update</p><pre><code class="php">$sql = &quot;insert into jkjk2 (name) values (&#39;popo&#39;)&quot;;$ret = $pdo-&gt;exec($sql);print_r($ret); //受影响的行</code></pre><h2 id="query-不需要结果集的sql语句"><a href="#query-不需要结果集的sql语句" class="headerlink" title="query() 不需要结果集的sql语句"></a>query() 不需要结果集的sql语句</h2><pre><code class="php">$sql = &quot;select * from jkjk2&quot;;$ret = $pdo-&gt;query($sql);print_r($ret);</code></pre><p>👇</p><pre><code class="php">PDOStatement Object//预处理对象(    [queryString] =&gt; select * from jkjk2)</code></pre><p>再使用foreach循环出 PDOStatement Object中的数据</p><pre><code class="php">foreach($ret as $row){    var_dump($row);}</code></pre><p>👇</p><pre><code class="php">array(4) {  [&quot;id&quot;]=&gt;  string(1) &quot;1&quot;  [0]=&gt;  string(1) &quot;1&quot;  [&quot;name&quot;]=&gt;  string(4) &quot;popo&quot;  [1]=&gt;  string(4) &quot;popo&quot;}array(4) {  [&quot;id&quot;]=&gt;  string(1) &quot;2&quot;  [0]=&gt;  string(1) &quot;2&quot;  [&quot;name&quot;]=&gt;  string(3) &quot;din&quot;  [1]=&gt;  string(3) &quot;din&quot;}array(4) {  [&quot;id&quot;]=&gt;  string(2) &quot;17&quot;  [0]=&gt;  string(2) &quot;17&quot;  [&quot;name&quot;]=&gt;  string(5) &quot;jiill&quot;  [1]=&gt;  string(5) &quot;jiill&quot;}</code></pre><h1 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h1><p>PDO使用PDOStatemendeadaot来实现预处理语句,这个类的实例可以用query()方法得到,也可以用prepare(),区别是query()只能得到一条sql命令的数据集的结果,而prepare()得到的实例可以重复执行sql语句</p><pre><code class="php">    //prepare() 预处理语句//数据占位符    $pre = $pdo-&gt;prepare(&quot;insert into jkjk2 (id,name)values(?,?)&quot;);    $id = 3;    $name = &quot;id3&quot;;    $pre -&gt; bindParam(1,$id);    $pre -&gt; bindParam(2,$name);    $pre -&gt; execute(); //直接用数组写    $pre -&gt; execute(array(        4,&quot;id4&quot;    ));//命名参数    $pre = $pdo -&gt; prepare(&quot;insert into jkjk2 (id,name) values (:id,:name)&quot;);    $id = 7;    $name = &quot;id7&quot;;    $pre-&gt;bindValue(&quot;:id&quot;,$id);    $pre-&gt;bindValue(&quot;:name&quot;,$name);    $pre-&gt;execute();//关联数组    $pre -&gt; execute(array(        &quot;:id&quot; =&gt; 6,        &quot;:name&quot; =&gt; &quot;id6&quot;    ));</code></pre><h1 id="解析结果集"><a href="#解析结果集" class="headerlink" title="解析结果集"></a>解析结果集</h1><h2 id="result-gt-fetch-PDO-FETCH"><a href="#result-gt-fetch-PDO-FETCH" class="headerlink" title="$result -&gt; fetch(PDO::FETCH())"></a>$result -&gt; fetch(PDO::FETCH())</h2><pre><code class="php">  var_dump($result -&gt; fetch());//仅仅输出一条  var_dump($result -&gt; fetchAll(PDO::FETCH_NUM));//剩下的所有的结果以索引数组的方式输出//$result -&gt; fetchAll(PDO::FETCH_OBJ/ASSOC/NUM)</code></pre><h2 id="result-gt-fetchColumn"><a href="#result-gt-fetchColumn" class="headerlink" title="$result -&gt; fetchColumn(*)"></a>$result -&gt; fetchColumn(*)</h2><p>*为可选的数字 默认为0,从0开始,表示第一列</p><p>整个函数返回的是下一行的结果的第*列</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>利用sql的查询语句恶意获取数据库信息</p><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花~!"></a>完结撒花~!</h1><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191213091052.png" srcset="undefined" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>pdo</tag>
      
      <tag>database</tag>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="undefined2019/12/09/mysql/"/>
    <url>2019/12/09/mysql/</url>
    
    <content type="html"><![CDATA[<p> <img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191209190454.png" srcset="undefined" alt=""></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code class="mysql">create database 数据库名;</code></pre><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><pre><code class="mysql">use 数据库名;</code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre><code class="mysql">drop database 数据库名;</code></pre><h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><pre><code class="mysql">CREATE TABLE 数据表名 (字段名 字段类型);CREATE TABLE `tbl`(   `id` INT UNSIGNED AUTO_INCREMENT,   `title` VARCHAR(100) NOT NULL,   `author` VARCHAR(40) NOT NULL,   `date` DATE,   PRIMARY KEY ( `id` ))ENGINE=InnoDB DEFAULT CHARSET=utf8;//引擎和格式</code></pre><h4 id="comment-关键字"><a href="#comment-关键字" class="headerlink" title="comment 关键字"></a>comment 关键字</h4><p>后面跟上字符串 表示注释</p><h4 id="default关键字"><a href="#default关键字" class="headerlink" title="default关键字"></a>default关键字</h4><p>后面跟不给值时的默认选项</p><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p>可以为空甚至一直为空</p><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h4><p>primary key = unique + not null</p><h3 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h3><pre><code class="mysql">insert into tb1 (id,title,date) values (1,&#39;one&#39;,&#39;2010-1-1&#39;);orinsert into tb1 values(2,&#39;two&#39;,&#39;2019-9-9&#39;);</code></pre><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><pre><code class="mysql">delete from tb1 where id=1;</code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><pre><code class="mysql">update tb1 set title = &quot;love&quot; where id=1;</code></pre><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><pre><code class="mysql">select * from tb1;</code></pre><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>不等于: <code>&lt;&gt;</code> <code>!=</code></p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="between-amp-and"><a href="#between-amp-and" class="headerlink" title="between&amp;and"></a>between&amp;and</h3><pre><code class="mysql">select * from tb1 where id between 1 and 3;</code></pre><p>👩:包括1和3</p><pre><code class="mysql">select * from tb1 where id&lt;3 and id&gt;1;</code></pre><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>!@!!@!@!@!@!!@!@!@!@!@</p><pre><code class="mysql">select * from tb1 where id in(1,2,3);</code></pre><h3 id="union-amp-unionall"><a href="#union-amp-unionall" class="headerlink" title="union &amp; unionall"></a>union &amp; unionall</h3><p>可以从不同的表中返回查询结果并结合在一起,</p><p>区别是union会在unionall的基础上进行一次 <code>distinct</code> 查询</p><h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p> <em>adj. 明显的；独特的；清楚的；有区别的</em></p><p><code>select DISTINCT 字段 from 表名</code></p><p>排除重复的查询结果</p><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p>默认时ascend;</p><p>在 group by 后面可以跟上多个字段或者加上order by也行</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="like关键字"><a href="#like关键字" class="headerlink" title="like关键字"></a>like关键字</h3><p><code>select 字段 from 表名 where 字段 like 值</code></p><p><code>%u%</code></p><p> <code>%</code> 用来匹配0个或多个字符,任意类型,任意长度,没有限制</p><p><code>_u_</code></p><p><code>_</code>匹配任意单个字符</p><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>默认ascend</p><pre><code class="mysql">select * from tb1 order by id desc/asc;</code></pre><p>👩:descend / ascend</p><h2 id="限制查询"><a href="#限制查询" class="headerlink" title="限制查询"></a>限制查询</h2><p><code>select 字段 limit 起始偏移量,行数</code></p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><code>count(*)</code> <code>sum(字段名)</code> <code>max(字段名)</code>  <code>min(字段名)</code> </p><p> <code>with rollup</code>表示对聚合分类后的对象再进行汇总</p><p><code>having</code>分类聚合后的限制条件要用having而不是<code>where</code>;</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191210150306.png" srcset="undefined" alt=""></p><p>👩:可以直接进行计算</p><pre><code class="mysql">mysqli</code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h4 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h4><p>内连接,获取两个表中字段匹配关系的记录 (两个表中的重叠部分)</p><h3 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h3><p>左连接,获取表中的所有记录,即使右边没有对应的匹配记录</p><h3 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h3><p>同上</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>回滚 rollback</p><p>提交 commit</p><p>四大特性: 原子性, 一致性 ,隔离性, 持久性</p><h1 id="子段操作"><a href="#子段操作" class="headerlink" title="子段操作"></a>子段操作</h1><p>增</p><pre><code class="mysql">alter table 数据表名 add 新增字段 字段类型;</code></pre><p>删</p><pre><code class="mysql">alter table 数据表名 drop 字段名;</code></pre><p>修改字段类型:</p><pre><code class="mysql">alter table modify 字段名 数据类型;</code></pre><p>修改表名:</p><pre><code class="mysql">alter table 数据表名 rename 新表名</code></pre><p>修改字段名</p><pre><code class="mysql">alter table change 字段名 新字段名 新数据类型</code></pre><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>1,创建普通索引,在创建表的时候创建索引</p><pre><code class="mysql">create table index1(    id INT,    name VARCHAR(32),    INDEX(id))</code></pre><p>or</p><pre><code class="mysqli"> mysql&gt; CREATE TABLE `jkjk` (      -&gt;   `id` smallint(8) unsigned NOT NULL,      -&gt;   `catid` smallint(5) unsigned NOT NULL DEFAULT &#39;0&#39;,      -&gt;   `title` varchar(80) NOT NULL DEFAULT &#39;&#39;,       -&gt;   `content` text NOT NULL,     -&gt;   PRIMARY KEY (`id`),      -&gt;   UNIQUE KEY `catename` (`catid`)      -&gt; ) ;  </code></pre><p>UNIQUE /FULLTEXT</p><pre><code class="mysql">create table index1(    id INT,    name VARCHAR(32),    UNIQUE INDEX index_1(id ASC))</code></pre><p>2,用alter table创建索引</p><pre><code class="mysql">alter TABLE 表名 ADD primary key (字段名); </code></pre><p>3,用create index 创建索引</p><pre><code class="mysql">create 索引类型 INDEX 索引名 ON 表名(字段名);</code></pre><p>eg:</p><pre><code class="mysql">create UNIQUE INDEX index_1 ON tb1(id);mysql&gt; CREATE UNIQUE INDEX catename ON wb_blog(catid); </code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre><code class="mysql">DROP INDEX index_1 on tb1;</code></pre><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><pre><code class="mysql">SHOW INDEX from tb1;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpFaceToObject2</title>
    <link href="undefined2019/12/09/phpFaceToObject2/"/>
    <url>2019/12/09/phpFaceToObject2/</url>
    
    <content type="html"><![CDATA[<h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="引用对象"><a href="#引用对象" class="headerlink" title="引用对象"></a>引用对象</h3><pre><code class="php">$a = &quot;hello&quot;;$b = &amp;$a;echo $b . &quot;&lt;/br&gt;&quot;; //hello$a = &quot;aloha&quot;;echo $b; //aloha</code></pre><h3 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h3><pre><code class="php">class Person{    public $timeForCopy = 0;    function __clone()    {        $this-&gt;timeForCopy += 1;    }}$a = new Person();$b = clone $a;$c = clone $b;echo $b-&gt;timeForCopy; //1echo $c-&gt;timeForCopy;//2</code></pre><h3 id="比较对象"><a href="#比较对象" class="headerlink" title="比较对象"></a>比较对象</h3><pre><code class="php">&quot;===&quot; 表示比较两个对象的内存地址 &quot;==&quot;比较的是两个对象的内容</code></pre><p>经过比较可以得出:</p><pre><code class="php">clone的两个对象相比较的话: 值相等 ,但是内存地址不相等引用的两个对象: 值和内存地址都是相等的使用一样的构造函数生成的两个实例化对象: 值是一样的,但是内存地址不同</code></pre><h3 id="检测对象类型"><a href="#检测对象类型" class="headerlink" title="检测对象类型"></a>检测对象类型</h3><p><em>案例来自php.net</em></p><p>方法:</p><pre><code class="php">instanceof 关键字</code></pre><p>对两个不同无关的类使用</p><pre><code class="php">&lt;?phpclass MyClass{ }class NotMyClass{ }$a = new MyClass;var_dump($a instanceof MyClass); //truevar_dump($a instanceof NotMyClass);//false</code></pre><p>对继承后的类使用</p><pre><code class="php">&lt;?phpclass ParentClass{ }class MyClass extends ParentClass{ }$a = new MyClass;var_dump($a instanceof MyClass); //truevar_dump($a instanceof ParentClass);//true</code></pre><p>接口</p><pre><code class="php">&lt;?phpinterface MyInterface{}class MyClass implements MyInterface{}$a = new MyClass;var_dump($a instanceof MyClass);//truevar_dump($a instanceof MyInterface);//true</code></pre><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>“__”开头的方法都被称为魔术方法(属实👍)</p><p>比如之前的 __construct() 每次实例化一个类都会先调用该方法进行初始化。</p><h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><p>在给不可访问属性赋值时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.set" target="_blank" rel="noopener">__set()</a> 会被调用。</p><h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><p>public __get ( string <code>$name</code> ) : <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.mixed" target="_blank" rel="noopener">mixed</a> 当读取不可访问的属性时,__get()会被调用</p><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p>用来处理程序在调用不存在或私有的方法时所导致的错误(友好)</p><pre><code class="php">&lt;?phpclass Fruit{    function __call($method_name, $param)    {        echo $method_name . &quot;方法不存在&quot;;    }}$a = new Fruit();$a-&gt;adf(123);//adf方法不存在</code></pre><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><p>👩:只对echo 和 print 有效,可以将对象输出为字符串</p><p>输入:</p><pre><code class="php">&lt;?phpecho &quot;&lt;pre&gt;&quot;;class Fruit{    function __toString()    {        return &quot;fruit man&quot;;    }}$a = new Fruit();print($a);echo &quot;&lt;/br&gt;&quot;;echo ($a);echo &quot;&lt;/br&gt;&quot;;var_dump($a);</code></pre><p>输出:</p><pre><code class="php">fruit manfruit manobject(Fruit)#1 (0) {}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weekly photos</title>
    <link href="undefined2019/12/08/12-8-1/"/>
    <url>2019/12/08/12-8-1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200607.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200651.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200710.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200755.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200901.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200900.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200859.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200858.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200857.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200856.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200855.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200853.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200852.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200849.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200848.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200814.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200755.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200854.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200902.jpg" srcset="undefined" alt=""></p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208200850.jpg" srcset="undefined" style="transform:rotate(180deg);">]]></content>
    
    
    
    <tags>
      
      <tag>photos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12-8</title>
    <link href="undefined2019/12/08/12-8/"/>
    <url>2019/12/08/12-8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208113233.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208113301.jpg" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208113744.jpg" srcset="undefined" alt=""></p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191208113815.jpg" srcset="undefined" style="transform:rotate(180deg);">]]></content>
    
    
    
    <tags>
      
      <tag>nice</tag>
      
      <tag>sunday</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpMysql -private</title>
    <link href="undefined2019/12/07/phpMysql/"/>
    <url>2019/12/07/phpMysql/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191209180726.png" srcset="undefined" alt=""></p><h1 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h1><p>1.连接数据库</p><pre><code class="php">//使用 mysqli_connect()</code></pre><p>2.选择服务器</p><pre><code class="php">//使用 mysqli_select_db()来选择</code></pre><p>3.执行数据库操作</p><pre><code class="php">//增删改查四部曲//    insert into//    delete//    update//     select</code></pre><p>4.清除记录集,释放系统资源</p><pre><code class="php">mysqli_free_result();</code></pre><p>5.关闭MySQL服务器</p><pre><code class="php">mysqli_close();</code></pre><h2 id="连接MySQL服务器"><a href="#连接MySQL服务器" class="headerlink" title="连接MySQL服务器"></a>连接MySQL服务器</h2><pre><code class="php">$mysql = new mysqli($server,$username,$password,$dbname);//$server 服务器地址 一般本地的为localhost</code></pre><h3 id="mysqli-对象的内容"><a href="#mysqli-对象的内容" class="headerlink" title="mysqli 对象的内容"></a>mysqli 对象的内容</h3><pre><code class="php">mysqli Object(    [affected_rows] =&gt; 0    [client_info] =&gt; mysqlnd 5.0.12-dev - 20150407 - $Id: 7cc7cc96e675f6d72e5cf0f267f48e167c2abb23 $    [client_version] =&gt; 50012    [connect_errno] =&gt; 0    [connect_error] =&gt;     [errno] =&gt; 0    [error] =&gt;     [error_list] =&gt; Array        (        )    [field_count] =&gt; 0    [host_info] =&gt; localhost via TCP/IP    [info] =&gt;     [insert_id] =&gt; 0    [server_info] =&gt; 5.5.5-10.4.8-MariaDB    [server_version] =&gt; 100408    [stat] =&gt; Uptime: 13265  Threads: 8  Questions: 163  Slow queries: 0  Opens: 29  Flush tables: 1  Open tables: 14  Queries per second avg: 0.012    [sqlstate] =&gt; 00000    [protocol_version] =&gt; 10    [thread_id] =&gt; 82    [warning_count] =&gt; 0)</code></pre><h2 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h2><p>首先他们有两种风格 第二种是面向过程,略</p><h3 id="objdect-oriented"><a href="#objdect-oriented" class="headerlink" title="objdect oriented"></a>objdect oriented</h3><pre><code class="php">面向对象:&lt;?php$serve = &quot;localhost&quot;;$user = &quot;root&quot;;$db = &quot;jk&quot;;$conn = new mysqli($serve, $user, &quot;&quot;, $db);//check connect if ($conn-&gt;connect_errno) {    echo $conn-&gt;connect_error;}//insert into data$sql = &quot;insert into jkjk values(8,17,&#39;peachx&#39;);&quot;;$sql .= &quot;insert into jkjk values(9,16,&#39;peachxx&#39;);&quot;;$sql .= &quot;insert into jkjk values(10,16,&#39;peachxs&#39;)&quot;;$res = $conn-&gt;multi_query($sql);var_dump($res);//查询语句$sql = &quot;select * from jkjk&quot;;$res = $conn-&gt;query($sql);var_dump($res);//结果如下</code></pre><p>👇</p><pre><code class="php">mysqli_result Object(    [current_field] =&gt; 0    [field_count] =&gt; 3    [lengths] =&gt;     [num_rows] =&gt; 10    [type] =&gt; 0)</code></pre><h3 id="解析结果集"><a href="#解析结果集" class="headerlink" title="解析结果集"></a>解析结果集</h3><p>在使用完结果集后要记得使用结果集占用的内存</p><table><thead><tr><th>面向对象  $result-&gt;free_result();</th><th></th></tr></thead><tbody><tr><td>free();close();<strong>free_result()</strong></td><td>mysqli_free_result()</td></tr></tbody></table><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><table><thead><tr><th>面向对象($res = $conn-&gt;query($sql))</th><th>description</th></tr></thead><tbody><tr><td>fetch_row()</td><td>以索引数组的方式返回一行数据</td></tr><tr><td>fetch_assoc()</td><td>以关联数组的方式返回一行数据</td></tr><tr><td>fetch_array()</td><td>以索引数组+关联数组的方式返回一行数据</td></tr><tr><td>fetch_object()</td><td>以对象的方式返回一行数据</td></tr><tr><td>num_rows</td><td>返回数据的总行数</td></tr><tr><td>data_seek()</td><td>括号中必须给值,给0的话可以把fetch_*()中的数据偏移回初始行</td></tr></tbody></table><h3 id="开始查询"><a href="#开始查询" class="headerlink" title="开始查询"></a>开始查询</h3><pre><code class="php">while ($row = $res-&gt;fetch_assoc()) {    print_r($row);    // echo $row;}相当于👇$res = $res-&gt;fetch_assoc();print_r($res);$res = $res-&gt;fetch_assoc();print_r($res);$res = $res-&gt;fetch_assoc();print_r($res);  ......</code></pre><p> 输出结果,这里只显示前三个</p><pre><code class="php">Array(    [id] =&gt; 1    [price] =&gt; 12    [some] =&gt; apple)Array(    [id] =&gt; 2    [price] =&gt; 12    [some] =&gt; bnana)Array(    [id] =&gt; 3    [price] =&gt; 14    [some] =&gt; naizi)</code></pre><p>辛苦啦~</p>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpFaceToObject1</title>
    <link href="undefined2019/12/06/phpFaceToObject/"/>
    <url>2019/12/06/phpFaceToObject/</url>
    
    <content type="html"><![CDATA[<h3 id="引入php文件"><a href="#引入php文件" class="headerlink" title="引入php文件"></a>引入php文件</h3><pre><code class="php">include &#39;angelina.php&#39;;</code></pre><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数:"></a>构造函数:</h2><p>两种方法:</p><pre><code class="php">function __ construct($name,$sex,$age){}//function __ &quot;此类的类名&quot;(...){}</code></pre><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>当对象结束其生命周期时,系统会自动执行这个函数</p><pre><code class="php">class Person{    function __destruct}</code></pre><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>php中默认将var 关键字解释为public,var等同于public</p><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>用public修饰的属性和方法是公开的,在程序的任何位置都可以访问,子类可以继承父类所有的公共成员</p><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><p>private修饰的属性和方法只能在所属类的内部访问,子类也不能继承</p><pre><code class="php">//例如现在先定义一个类      class Person{        public $name;        private $money;        function __construct(){            $this-&gt;name = &quot;jack&quot;;        }    }  //    $jack = new Person();</code></pre><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p>protected 修饰的属性和方法只有除了子类可以调用外,其他类不能调用,包括在类的外面</p><pre><code class="php">&lt;?php//protectclass Person{    public $name;    public $hello;    protected $money;    function __construct()    {        $this-&gt;name = &quot;angelina&quot;;        $this-&gt;age = 12;        $this-&gt;money = 10000;    }}class girl extends Person{    public function numOfMoney()    {        return $this-&gt;money;    }}$ange = new girl();echo $ange-&gt;numOfMoney();//10000echo $ange-&gt;money;//Fatal error: Uncaught Error: Cannot access protected property girl::$money</code></pre><h2 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h2><p>继承一个类,但不支持多继承</p><p>eg如上</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><blockquote><p><strong>被final修饰的属性和方法不能被更改,</strong></p><p><strong>被final关键字修饰的类不能被继承,</strong></p><p><strong>被final关键字修饰的方法在子类中不能被重写,</strong></p><p><strong>final不能修饰变量</strong></p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p><strong>指在面向对象中能够对同一个接口做出不同的实现,主要存在两种形式:</strong></p></blockquote><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><blockquote><p><strong>在子类中重写父类的方法,具有相同的方法名字,相同的参数表和相同的返回类型,常用于子类构造方法的重写.</strong></p></blockquote><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><blockquote><p><strong>通常是指同一个类中多个方法具有相同的名字,但这些方法具有不同的参数列表</strong></p></blockquote><pre><code class="php">&lt;?php//class Person{    public $name;    public $birthday;    function __construct($name, $birthday)    {        $this-&gt;name = $name;        $this-&gt;birthday = $birthday;    }}$girl = new Person(&quot;eyjafjalla&quot;, 12);echo &quot;&lt;pre&gt;&quot;;var_dump($girl);//输出结果object(Person)#1 (2) {  [&quot;name&quot;]=&gt;  string(10) &quot;eyjafjalla&quot;  [&quot;birthday&quot;]=&gt;  int(12)}</code></pre><h2 id="“-”操作符"><a href="#“-”操作符" class="headerlink" title="“::”操作符"></a>“::”操作符</h2><blockquote><p><strong>通常用于没有声明任何实例的情况下使用类的属性和方法</strong></p></blockquote><p>和$this的区别</p><p><code>parent::</code>可以调用父类中的<strong>属性</strong>和<strong>方法</strong>和常量 比如构造函数</p><p><code>self::</code>可以调用本类中的<strong>静态属性</strong>和<strong>方法</strong>和常量</p><p><code>类名::</code> 可以调用某类中的<strong>静态属性</strong>和<strong>方法</strong></p><p>👩:可以是非静态的,但是系统不推荐这样做</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>静态,可以使用 “类名::” 的方式调用.</p><p>不需要实例化对象就可以访问或调用,</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><blockquote><p>抽象类,它是一种不能被实例化的类,必须至少要有一个抽象方法,且抽象方法没有方法体,要连接一个分号,通常需要定义一个子类</p></blockquote><pre><code class="php">abstract class Person(){    abstract function get_area();}</code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>用interface关键字来定义,它是一种特殊的抽象类,接口中未实现的方法,即使是空方法,也必须在子类中实现.一个类只能继承一个父类,但是却可以实现多个接口,通过implements 关键字可以实现接口</p></blockquote><pre><code class="js">//interface &amp; implementsinterface Work{    function getJobSkill();}class Programmer implements Work{    function getJobSkill()    {        return array(            &quot;java&quot;,            &quot;php&quot;,            &quot;C&quot;        );    }}$a = new Programmer();var_dump($a-&gt;getJobSkill());</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php与Web的页面交互</title>
    <link href="undefined2019/12/06/phpAndWeb/"/>
    <url>2019/12/06/phpAndWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="GET-amp-POST"><a href="#GET-amp-POST" class="headerlink" title="$_GET[] &amp; $_POST[]"></a>$_GET[] &amp; $_POST[]</h1><p>究极全局变量 返回的是数组的形式</p><p>获取</p><pre><code class="php">var_dump($_GET[&#39;username&#39;]);</code></pre><h1 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES[]"></a>$_FILES[]</h1><p>返回的是数组形式的5个值</p><p>需要在html文件中如下设置:</p><pre><code class="html">enctype=&quot;multipart/form-data&quot;</code></pre><h1 id="COOKIE"><a href="#COOKIE" class="headerlink" title="$_COOKIE[]"></a>$_COOKIE[]</h1><h2 id="设置一个cookie"><a href="#设置一个cookie" class="headerlink" title="设置一个cookie"></a>设置一个cookie</h2><pre><code class="php">setcookie(&#39;name&#39;,&#39;angelina&#39;,0,&#39;/&#39;);//分别为 名称,内容,存在时间(为0的话意味着在页面关闭时就会删除该cookie),目录(不设置目录的话,只对当前目录有效)</code></pre><h2 id="判断cookie是否存在"><a href="#判断cookie是否存在" class="headerlink" title="判断cookie是否存在:"></a>判断cookie是否存在:</h2><pre><code class="php">isset(cookie[&#39;name&#39;]); //返回的是true or false</code></pre><h2 id="创建cookie数组"><a href="#创建cookie数组" class="headerlink" title="创建cookie数组"></a>创建cookie数组</h2><pre><code class="php">setcookie(&quot;location[1]&quot;,&quot;beijing&quot;);setcookie(&quot;location[2]&quot;,&quot;beijing&quot;);setcookie(&quot;location[3]&quot;,&quot;beijing&quot;);var_dump ($_COOKIE[&quot;location&quot;]);//输出数组形式</code></pre><h1 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION[]"></a>$_SESSION[]</h1><h2 id="启动session"><a href="#启动session" class="headerlink" title="启动session"></a>启动session</h2><pre><code class="php">session_start();</code></pre><h2 id="设置session"><a href="#设置session" class="headerlink" title="设置session"></a>设置session</h2><pre><code class="php">$_session[&#39;username&#39;] = &quot;angelina&quot;;$_session[&#39;age&#39;] = 18;</code></pre><h3 id="销毁SESSION"><a href="#销毁SESSION" class="headerlink" title="销毁SESSION"></a>销毁SESSION</h3><pre><code class="php">unset($_SESSION[&#39;username&#39;]);或者使用session_destroy()函数来销毁全部session_destroy();</code></pre><p>👩即使使用了以上函数,但是由于php中的session是基于cookie的,所以session_id还存在于浏览器的cookie文件中需要调用cookie删除</p><pre><code class="php">if (isset($_COOKIE[session_name()])){    setcookie(session_name(),&quot;&quot;,time()+1,&quot;/&quot;);}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>php</tag>
      
      <tag>web</tag>
      
      <tag>页面交互</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS选择器</title>
    <link href="undefined2019/12/05/12-5-1/"/>
    <url>2019/12/05/12-5-1/</url>
    
    <content type="html"><![CDATA[<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>语法:</p><p><code>E[attribute]</code></p><p>eg:</p><pre><code class="css">td[lang]{} // 有lang属性的td都会被选择td[title=&quot;a&quot;]{} //title属性为&quot;a&quot;的都会被选择~=&quot;a&quot; //属性值包含&quot;a&quot; 且&quot;a&quot;前后只能有空格|=&quot;a&quot; //以&quot;a&quot;开头,&quot;a&quot;必须为独立单词,后面可以跟上连字符&quot;-&quot;</code></pre><h2 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h2><pre><code class="css">    &lt;style&gt;        div+span {            color: brown !important;        }    &lt;/style&gt;    &lt;span&gt;span0&lt;/span&gt;ad    &lt;div class=&quot;hi&quot;&gt;div0&lt;/div&gt;    &lt;span&gt;span2&lt;/span&gt;k    &lt;span&gt;span3&lt;/span&gt;👩:这里起效果的只有span2 h2~p{    color:red; //和该h2是兄弟并且在这个h2所有的p都会受到影响}</code></pre><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><ul><li>:active</li><li>:focus //input</li><li>:hover</li><li>:link</li><li>:visited</li><li>:first-child</li><li>:lang 自定义属性,向有这个属性的元素注入样式</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>selector</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今天用bootstrap做的网页和随意画的一些logo</title>
    <link href="undefined2019/12/04/nmewd/"/>
    <url>2019/12/04/nmewd/</url>
    
    <content type="html"><![CDATA[<h2 id="今天用bootstrap做的网页和随意画的一些logo"><a href="#今天用bootstrap做的网页和随意画的一些logo" class="headerlink" title="今天用bootstrap做的网页和随意画的一些logo:"></a>今天用bootstrap做的网页和随意画的一些logo:</h2><p>太累了今天,眼睛都张不开了</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191204223207.png" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191204223239.png" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191204223325.png" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191204223344.png" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191204223407.png" srcset="undefined" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191204223418.png" srcset="undefined" alt=""></p><h1 id="晚安世界"><a href="#晚安世界" class="headerlink" title="晚安世界"></a>晚安世界</h1>]]></content>
    
    
    
    <tags>
      
      <tag>so tired</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>noon</title>
    <link href="undefined2019/12/03/noon/"/>
    <url>2019/12/03/noon/</url>
    
    <content type="html"><![CDATA[<p>慢悠悠地从食堂听着radwimps的&lt;火花&gt;走回机房.</p><p>穿着三件衣服略微有些冷的温度,</p><p>一路上沿着学校的湖畔,</p><p>阳光随着树荫没有规则地照射在脸上,</p><p>带来了些许温暖,</p><p>我甚至边走边闭上眼去享受这一切,</p><p>第一次明白了<code>午后的阳光</code>的含义,</p><p>赞美太阳!</p>]]></content>
    
    
    
    <tags>
      
      <tag>subarashii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX JSON对象 XML -private</title>
    <link href="undefined2019/12/03/ajax/"/>
    <url>2019/12/03/ajax/</url>
    
    <content type="html"><![CDATA[<p><em>笔记来源于书</em></p><h3 id="原生ajax写法"><a href="#原生ajax写法" class="headerlink" title="原生ajax写法"></a>原生ajax写法</h3><pre><code class="js">          var xhr = new XMLHttpRequest();        //        xhr.open(&quot;post&quot;, &quot;test.php&quot;);        //        xhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);        //        xhr.send(&quot;a=1&amp;b=10&quot;);        //        xhr.onreadystatechange = function () {            if (xhr.status == 200 &amp;&amp; xhr.readyState == 4) {                var result = xhr.responseText;                alert(result);            }        }</code></pre><p>👩: 在上面的代码中:</p><p>​    1.<code>XMLHttpRequest()</code>是ajax的一个内置对象,能知道传值的地址,传地数据和传递数据的方式</p><p>​    2.<code>open()</code>,初始化<code>XMLHttpRequest</code>对象,指定http请求的方法和要使用的服务器的URL;</p><p>​            格式:<code>open(method: string, url: string):</code></p><p>​    3.<code>send()</code>,发送该请求,指定发送的数据,如果http请求是<code>get</code>,可以不指定参数,或者用null..</p><p>​    4. <code>status==200</code>:成功处理了请求，一般情况下都是返回此状态码</p><pre><code> 5. `readyState==4` 请求完成加载 6. `onreadystatechange`:XMLHttpRequest调用的时间处理器,他会检测readystate和http的状态,即上面的4和5.</code></pre><h3 id="jQuery中的ajax的写法"><a href="#jQuery中的ajax的写法" class="headerlink" title="jQuery中的ajax的写法"></a>jQuery中的ajax的写法</h3><pre><code class="js"> $.ajax({            url: &#39;&#39;,            type: &#39;post|get&#39;,            data: &#39;数据&#39;,            dataType: &#39;text|json|xml|script&#39;,            success: function (re) {                //服务器回传的数据处理            }        })</code></pre><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><p>可以理解为有格式的字符串,以键值的形式存放;他的作用是存放数据</p><p>有两种格式:</p><pre><code>{name:&#39;angelina&#39;,age:19};</code></pre><pre><code class="js">[{name:&#39;angelina&#39;,age:19},{name:&#39;angelina&#39;,age:19},{name:&#39;angelina&#39;,age:19}]</code></pre><p>两种格式的结合:</p><pre><code class="js">{list:[{name:&#39;angelina&#39;,age:17},{name:&#39;eyjfjalla&#39;,age:18}]}</code></pre><h3 id="对象解析为JSON对象"><a href="#对象解析为JSON对象" class="headerlink" title="对象解析为JSON对象"></a>对象解析为JSON对象</h3><p><code>JSON.stringify(Object)</code></p><h3 id="字符串解析为JSON对象"><a href="#字符串解析为JSON对象" class="headerlink" title="字符串解析为JSON对象"></a>字符串解析为JSON对象</h3><p>JSON.parse({…,..,…})</p><h3 id="JSON传值"><a href="#JSON传值" class="headerlink" title="JSON传值"></a>JSON传值</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;jquery-3.4.1.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/JavaScript&quot;&gt;        var aStudent = {            name: &#39;angelina&#39;,            age: 18        };        var students = [{            name: &#39;a&#39;,            age: 12        }, {            name: &#39;b&#39;,            age: 13        }];        $(function () {            var n;            var a;            for (var k in students) {                n = students[k].name;                a = students[k].age;                $(&quot;#s&quot;).append(&quot;&lt;tr&gt;&lt;td&gt;&quot;+n+&quot;&lt;/td&gt;&lt;td&gt;&quot;+a+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;);            }        })    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;JSON:&lt;/h1&gt;    aStudent的名称:    &lt;script type=&quot;text/JavaScript&quot;&gt;document.write(aStudent.name)&lt;/script&gt;    &lt;br /&gt;    students的第一个名称:    &lt;script&gt;        document.write(students[0].name)    &lt;/script&gt;    &lt;table id=&quot;s&quot; border=&quot;1&quot;&gt;        &lt;tr&gt;            &lt;th&gt;name&lt;/th&gt;            &lt;th&gt;age&lt;/th&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="XML的基本格式"><a href="#XML的基本格式" class="headerlink" title="XML的基本格式"></a>XML的基本格式</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;list&gt;    &lt;province id=&quot;1&quot; name=&quot;河北&quot;&gt;        &lt;city id=&quot;11&quot; name=&quot;石家庄&quot;&gt;&lt;/city&gt;        &lt;city id=&quot;12&quot; name=&quot;承德&quot;&gt;&lt;/city&gt;    &lt;/province&gt;&lt;/list&gt;</code></pre><h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><p>语法:</p><pre><code class="js">$(selector).load(url,data,callback)</code></pre><p>url:文件地址</p><p>data: 规定与请求共同发送的查询字符串键值对的集合,是可选的</p><p>fallback: 回调函数,可选的</p><p>👇</p><p>fallback里面可以有三个值:</p><pre><code class="js">$(&#39;#who&#39;).load(&quot;book.html&quot;, function (responseText, statusText,xhr){}</code></pre><p>responseText为返回的调用成功后的结果内容</p><p>statusText为调用的状态,成功的话会 返回 “success”</p><p>xhr 为整个XMLHtmlRequest对象</p><p>👩:可以通过console log 来check it out</p><pre><code class="js">$(function () {            $(&#39;.button2&#39;).click(function () {                $(&#39;#who&#39;).load(&quot;book.html&quot;, function (responseText, statusText, xhr) {                    console.log(xhr.status);                    console.log(xhr.responseText);                    console.log(xhr.statusText);                    console.log(responseText);                    console.log(statusText);                });            })        })</code></pre><pre><code class="html">result:xdd.html:14 200xdd.html:15     &lt;ul&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;    &lt;/ul&gt;xdd.html:16 OKxdd.html:17     &lt;ul&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;    &lt;/ul&gt;xdd.html:18 success</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ajax</tag>
      
      <tag>javascript</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQ -private</title>
    <link href="undefined2019/12/03/jq1/"/>
    <url>2019/12/03/jq1/</url>
    
    <content type="html"><![CDATA[<h2 id="测试是否引入成功"><a href="#测试是否引入成功" class="headerlink" title="测试是否引入成功"></a>测试是否引入成功</h2><pre><code class="js">$(document).ready(function(){    alert(&#39;ohiyo~&#39;);})</code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>$(this).hide();</li><li>$(“p”).hide(); //hide所有的p元素</li><li>$(“p.test”).hide(); //hide所有class=test 的p元素</li></ul><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><h3 id="jQ"><a href="#jQ" class="headerlink" title="jQ"></a>jQ</h3><pre><code class="js">$(function(){})$(document).ready(function(){})</code></pre><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><pre><code class="html">window.onload(function(){})</code></pre><h3 id="区别"><a href="#区别" class="headerlink" title="区别:"></a>区别:</h3><p><code>$(document).ready(funtion(){})</code> : 等HTML所有标签(DOM)都加载完才执行</p><p><code>window.onload(function(){})</code>: 等所有内容都加载完,包括外部的图片,才执行</p><h2 id="JQ选择器"><a href="#JQ选择器" class="headerlink" title="JQ选择器"></a>JQ选择器</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><code>$(&quot;element[attribute]&quot;)</code></p><pre><code class="javascript">eg:$(&quot;div[titles=test]&quot;).css(5px solid red);//titles = &#39;test&#39; 的所有div$(&quot;[title^=ohiyo]&quot;)//以&#39;ohiyo&#39;开头$(&quot;[title$=ohiyo]&quot;)//以&#39;ohiyo&#39;结尾$(&quot;[title*=ohiyo]&quot;)//包含&#39;ohiyo&#39;</code></pre><h3 id="位置选择器"><a href="#位置选择器" class="headerlink" title="位置选择器"></a>位置选择器</h3><p><code>$(&quot;element:position&quot;)</code></p><pre><code class="js">eg:$(&quot;button[class=ohiyo]:first&quot;) // 表示class = &#39;ohiyo&#39; 的第一个button可选值:last:odd //奇数:even //偶数 👩:0也算是哦,baby~:eq(n):gt(n) //Greater Than 大于 :lt(n) //Less Than 小于👩:这里要注意,gt是一个段落筛选,从指定索引的下一个开始,例如gt(1)代表从大于索引为1的的选择器,所以它是从2开始的</code></pre><p>额外选择器:</p><ul><li><p>next()</p></li><li><p>prev()</p></li><li><p>nextAll()</p></li><li><p>prevAll()</p></li><li><p>siblings()</p></li></ul><h3 id="多选择器的写法"><a href="#多选择器的写法" class="headerlink" title="多选择器的写法"></a>多选择器的写法</h3><p><code>$(&quot;[title*=ohiyo]:eq(0),[title*=ohiyo]:eq(1)&quot;)</code></p><p>后代 ,子代, id  ,类 ,标记, 略</p><h3 id="一些个人的eeeee"><a href="#一些个人的eeeee" class="headerlink" title="一些个人的eeeee"></a>一些个人的eeeee</h3><p>关于eq()的一些问题</p><pre><code class="html">&lt;body&gt;    &lt;ul class=&quot;navi&quot;&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;        &lt;li&gt;nihao&lt;/li&gt;    &lt;/ul&gt;    &lt;ul class=&quot;navi&quot;&gt;        &lt;li&gt;hei&lt;/li&gt;        &lt;li&gt;hie&lt;/li&gt;        &lt;li&gt;hie&lt;/li&gt;        &lt;li&gt;hie&lt;/li&gt;        &lt;li&gt;hie&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;script&gt;    $(&quot;ul.navi li:eq(3)&quot;).css(&quot;background&quot;,&quot;red&quot;);&lt;/script&gt;👩:这里的li中只有第一个ul的第四个li才会变red👨:那如果我想让每个ul的第四个li变red要怎么做?👩:那你可以这写:    $(&quot;ul.navi&quot;).each(function(){        $(this).find(&quot;li:eq(3)&quot;).css(&quot;color&quot;,&quot;red&quot;);    });👨:我佛了,那么复杂?给👴爬👩:那宁可以这样✍:    $(&quot;ul.navi li:nth-child(4)&quot;).css(&quot;color&quot;,&quot;red&quot;);</code></pre><h3 id="选择器对象"><a href="#选择器对象" class="headerlink" title="选择器对象"></a>选择器对象</h3><pre><code class="html">    $(&quot;ul.navi&quot;).each(function(){        $(this).find(&quot;li:eq(3)&quot;).css(&quot;color&quot;,&quot;red&quot;);    });</code></pre><h2 id="创建和添加html元素"><a href="#创建和添加html元素" class="headerlink" title="创建和添加html元素"></a>创建和添加html元素</h2><pre><code class="js">    $btn = $(&quot;button&quot;);    $btn.click(function () {        var $li = $(&quot;&lt;li&gt;我爱这个世界&lt;/li&gt;&quot;);        $(&quot;ul[title=first_title]&quot;).append($li);    });</code></pre><h3 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h3><h3 id="apendTo"><a href="#apendTo" class="headerlink" title="apendTo()"></a>apendTo()</h3><h3 id="prepend"><a href="#prepend" class="headerlink" title="prepend()"></a>prepend()</h3><h3 id="prependTo"><a href="#prependTo" class="headerlink" title="prependTo()"></a>prependTo()</h3><h3 id="after"><a href="#after" class="headerlink" title="after()"></a>after()</h3><h3 id="before"><a href="#before" class="headerlink" title="before()"></a>before()</h3><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>它的效果是将元素删除,<strong>包括它的后代</strong></p><h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h3><p>它的效果是删除该元素的后代删除,<strong>但是不会删除自己本身</strong></p><p>👩括号中的参数可以是node,dom,$对象</p><h2 id="Dom对象和jQ对象互相转换"><a href="#Dom对象和jQ对象互相转换" class="headerlink" title="Dom对象和jQ对象互相转换"></a>Dom对象和jQ对象互相转换</h2><p>Dom -&gt; JQ</p><p><code>$(document.getElementById(&quot;hi&quot;))</code></p><p>jQ -&gt; Dom</p><p><code>$(document.querySelector(&quot;span&quot;)).get(0)</code></p><p><code>$(document.querySelector(&quot;span&quot;))[0]</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 数组 -private</title>
    <link href="undefined2019/12/02/12-2-3/"/>
    <url>2019/12/02/12-2-3/</url>
    
    <content type="html"><![CDATA[<p><em>方法的解释来源于w3c MDN</em></p><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><blockquote><p>concat() 方法用于连接两个或多个数组。</p><p><strong>该方法不会改变现有的数组</strong>，而仅仅会返回被连接数组的一个副本。</p></blockquote><p>语法</p><pre><code class="js">arrayObject.concat(arrayX,arrayX,......,arrayX)</code></pre><p>👩:括号中可以给具体值,或者是数组名</p><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><blockquote><p><code>join()</code> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN//docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="noopener">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p></blockquote><pre><code class="js">    const elements = [&#39;Fire&#39;, &#39;Air&#39;, &#39;Water&#39;];    console.log(elements.join());    // expected output: &quot;Fire,Air,Water&quot;    console.log(elements.join(&#39;&#39;));    // expected output: &quot;FireAirWater&quot;    console.log(elements.join(&#39;-&#39;));    // expected output: &quot;Fire-Air-Water&quot;</code></pre><p>👩:其中,<code>elements.join()</code>等效于<code>element.toString()</code></p><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><blockquote><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p></blockquote><pre><code class="js">const animals = [&#39;ant&#39;, &#39;bison&#39;, &#39;camel&#39;, &#39;duck&#39;, &#39;elephant&#39;];console.log(animals.slice(2));// expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]console.log(animals.slice(2, 4));// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]console.log(animals.slice(1, 5));// expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</code></pre><blockquote><ul><li><p>如果该元素是个对象引用 （不是实际的对象），<code>slice</code> 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</p></li><li><p>对于字符串、数字及布尔值来说（不是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener"><code>String</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener"><code>Number</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a> 对象），<code>slice</code> 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</p></li></ul></blockquote><p>👩:上面这两条很关键!</p><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><blockquote><p><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。<strong>此方法会改变原数组</strong>。</p></blockquote><pre><code class="js">const months = [&#39;Jan&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;];months.splice(1, 0, &#39;Feb&#39;);// inserts at index 1console.log(months);// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]months.splice(4, 1, &#39;May&#39;);// replaces 1 element at index 4console.log(months);// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</code></pre><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a> 👈例子</p></blockquote><h3 id="shift-amp-pop"><a href="#shift-amp-pop" class="headerlink" title="shift()&amp;pop()"></a>shift()&amp;pop()</h3><p>返回的值是删除的值</p><h3 id="unshift-amp-push"><a href="#unshift-amp-push" class="headerlink" title="unshift() &amp; push()"></a>unshift() &amp; push()</h3><p>返回的值是新的数组的长度</p><p>​    //通过new关键字创建一个Array对象,Array中的数字控制的是数组的容量,可以不加</p><p>​    var a = new Array(3);</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>将数组转换为字符串;</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>翻转数组</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>默认按照数组成员的首字母的ASCII码值排序</p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>有两个可选值</p><pre><code class="js">String.indexOf(&#39;a&#39;,b);//第一个数值是指要检索的值,第二个值是index//返回的值是被检索的字符串的首位字符的index值//若找不到要检索的值则返回 -1</code></pre><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p>和<code>indexOf()</code>的区别是direction是反的;</p><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><pre><code class="js">String.search(&#39;a&#39;);//和indexOf()的使用场景几乎一样,但是不能給index,即不能规定从哪开始找.//比indexOf()多了一个功能,可以在括号中使用正则表达式eg:var str = &#39;abcDEF&#39;;console.log(str.search(/d/i));</code></pre><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>语法:</p><pre><code class="js">String.match(搜索值) 或 String.match(正则表达式)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 对象 -private</title>
    <link href="undefined2019/12/02/js-12-2-2/"/>
    <url>2019/12/02/js-12-2-2/</url>
    
    <content type="html"><![CDATA[<h3 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h3><blockquote><p><a href="https://blog.csdn.net/xdd19910505/article/details/41900693" target="_blank" rel="noopener">https://blog.csdn.net/xdd19910505/article/details/41900693</a></p></blockquote><h3 id="js中对象的分类"><a href="#js中对象的分类" class="headerlink" title="js中对象的分类"></a>js中对象的分类</h3><ul><li>内置对象</li></ul><p>例如javascript中的Math方法.</p><ul><li>宿主对象</li></ul><p>DOM,BOM,比如<code>console</code>,<code>document</code> </p><ul><li>自定义对象</li></ul><pre><code class="js">var obj = new Object();</code></pre><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><pre><code class="js">    //通过new关键字创建,调用了construct    var obj = new Object();    //字面量创建    var obj2 = {};    //构造函数    var User = function (name, age) {        this.name = name;        this.age = age;    }    var user1 = new User(&#39;angelina&#39;, 23);    console.log(user1);</code></pre><h3 id="两个变量被同一个对象引用时"><a href="#两个变量被同一个对象引用时" class="headerlink" title="两个变量被同一个对象引用时"></a>两个变量被同一个对象引用时</h3><pre><code class="js">    var obj = new Object();    obj.name = &#39;angelina&#39;;    var obj2 = obj;    obj2.name = &#39;eyjafjalla&#39;;    console.log(obj.name);//eyjafjalla</code></pre><p>👩:这里输出<code>eyjafjalla</code>是因为 obj2 和 obj 都指向了同一个堆内存地址</p><h3 id="打印对象"><a href="#打印对象" class="headerlink" title="打印对象"></a>打印对象</h3><pre><code class="js">    var obj = new Object();    obj.name = &#39;angelina&#39;;    obj.age = 12;    console.log(obj);    console.log(JSON.stringify(obj));//转换为字符串</code></pre><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191202131731.png" srcset="undefined" alt=""></p><p>👩:属性值可以是数组,对象也可以是方法</p><h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><pre><code class="js">delete obj.name;</code></pre><h3 id="in-属性"><a href="#in-属性" class="headerlink" title="in 属性"></a>in 属性</h3><p>可以用来检测一个对象是否有某个属性</p><pre><code class="js">console.log(&quot;name&quot; in obj);//有的话为true,否则为false</code></pre><p>👩:这里要注意,属性要用双引号括住</p><h3 id="for-in-不需要获取数组或对象的长度"><a href="#for-in-不需要获取数组或对象的长度" class="headerlink" title="for in(不需要获取数组或对象的长度)"></a>for in(不需要获取数组或对象的长度)</h3><p>用来遍历对象,数组</p><p>eg:</p><pre><code class="js">    var jill = {        id: 1,        name: &#39;angelina&#39;    };    for (var key in jill) {        console.log(key + jill[key]);    }</code></pre><p>*<code>key</code> 为键 <code>jill[key]</code>为值</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>前端</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js运算符 -private</title>
    <link href="undefined2019/12/02/js-12-2/"/>
    <url>2019/12/02/js-12-2/</url>
    
    <content type="html"><![CDATA[<iframe src="https://open.spotify.com/embed/track/2AmRjWxvLxJK3DjCYNruLI" width="300" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>### `&`,`||`的短路问题<pre><code class="javascript">console.log(1&amp;&amp;0);//0console.log(0&amp;&amp;1);//0</code></pre><pre><code class="JavaScript">console.log(0 || 1);//1console.log(1 || 0);//1</code></pre><h3 id="对非布尔值进行布尔运算"><a href="#对非布尔值进行布尔运算" class="headerlink" title="对非布尔值进行布尔运算"></a>对非布尔值进行布尔运算</h3><pre><code class="js">    var a = 1;    a = !a;    console.log(a); //false</code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><pre><code class="js">//返回的一定是false or true eg:var result = 1 &lt; 3;console.log(result);//false</code></pre><h3 id="非数值的比较"><a href="#非数值的比较" class="headerlink" title="非数值的比较"></a>非数值的比较</h3><p>*数值类型和非数值类型比较的话,非数值类型会被转换为数值类型</p><p>*如果两边都是字符串型的数字话,则会被转换为unicode编码</p><h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><p>&amp;&amp; &gt; ||</p><h2 id="unicode编码"><a href="#unicode编码" class="headerlink" title="unicode编码"></a>unicode编码</h2><p>在js中</p><pre><code class="js">console.log(&quot;\u1234&quot;)</code></pre><p>在htlm中</p><pre><code class="html">&lt;h1&gt;&amp;#1234;&lt;/h1&gt;</code></pre><p>unicode编码转换</p><p><code>&quot;中&quot;.charCodeAt(0);</code></p><p><code>String.fromCharCode(20013);</code></p><p><code>&quot;中&quot;.charCodeAt(0).toString(16);</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12_01</title>
    <link href="undefined2019/12/01/12-01/"/>
    <url>2019/12/01/12-01/</url>
    
    <content type="html"><![CDATA[<p><em>banner_img&amp;index_img来自arkstation.com的neon-yang</em> </p><p>hello,12月,时间过得太快辣!!!!!!!</p><p>再过一个月就是2020年了,东京奥运会,以及和高中同学约好的2020年要一起去日本,感觉我要🕊了.为什么我一直认为去旅行好浪费钱,感觉从买机/车票开始,钱就会在钱包中开始逐渐消失,而不像购买实物–钱只是换了一种形式陪在自己的身边.</p><p>2020年还有一种未来的感觉,对我来说时间仿佛还停留在2008年的北京奥运会我还在沙发上蹦跶着看着电视的那个晚上,那个时候肯定会想2020应该会有很多不可思议的科技会实现吧,结果到了2020,世界也没什么多大的变化就是了.</p><p>今天了解到了一个很棒的网站,arkstation.com,对于我来说是新大陆!还看了一些自制的同人像素游戏的相关视频,不可否认的是,在像素游戏中音乐真的是游戏表现力中占比很高的一环.</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191202082052.jpg" srcset="undefined" alt=""></p><p>以及今日最佳!发现了在油管有一个日本人几年来一直陆陆续续地在用打工挣的钱,到亚洲的各地靠着自己为和平做出贡献.他叫桑原功一,是一个勇敢和伟大的人,他是个英雄.</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191202082006.jpg" srcset="undefined" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js变量 -private</title>
    <link href="undefined2019/11/30/js11-30/"/>
    <url>2019/11/30/js11-30/</url>
    
    <content type="html"><![CDATA[<p><em>本文为private个人向</em></p><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量就是 <code>常量</code>,以前一直都不知道2333</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>var是variant的缩写</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>只能由<code>$</code>, <code>_</code> ,英文字母,数字组成,但是不能用数字开头</li><li>尽量使用驼峰命名</li><li>不允许使用空格</li><li>最多255个字符</li></ul><p>👩:在javascript中变量名是区分大小写的</p><h3 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h3><p>值类型:number,boolean,string,undefined,null</p><p>引用型: object</p><p>判断数据类型</p><p><code>console.log(typeof a);</code></p><p>👩:返回值为小写字母</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p><code>\t</code></p><p><code>\n</code></p><p><code>\\</code></p><p><code>\&quot;</code></p><p><code>\&#39;</code></p><p><code>\r</code></p><p><code>\b</code></p><p>👩:<code>\n</code>与<code>\r</code>的区别:</p><blockquote><p><strong>回车 \r</strong>  本义是光标重新回到本行开头。r 的英文return，控制字符可以写成CR，即Carriage Return</p><p><strong>换行 \n</strong>  本义是光标往下一行（不一定到下一行行首）。n 的英文newline，控制字符可以写成LF，即Line Feed</p></blockquote><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p><strong>String()</strong></p><pre><code class="js">var a =10;console.log(String(a));</code></pre><pre><code>👩对于Number和Boolean，实际上就是调用toString()方法。而在转换为undefined和null类型时,直接输出&quot;undefined&quot;,&quot;null&quot;</code></pre></li><li><p><strong>toString()</strong></p><pre><code class="js">var a = 10;console.log(a.toString(x));//在转换时,x的值是需要转换的进制数,不给值默认为10进制转换;并且toString()不会改变原来a的值</code></pre><p>👩:区别<code>toString()</code>无法转换null和undefined,所以一般我们用<code>String()</code>就完事了</p></li><li><p><strong>Number()</strong></p><p><strong>String转为Number类型:</strong></p><p>​    只能转换纯数字,否则结果为NaN.如果String为空则返回0.</p><p><strong>Boolean转换为Number:</strong></p><p>​    true-&gt;1</p><p>​    false-&gt;0</p><p><strong>Null转换为Number:</strong></p><p>​    <code>0</code></p><p><strong>Undefined转换为Number:</strong></p><p>​    <code>NaN</code></p></li><li><p><strong>parseInt()</strong></p><p>专门用来转换字符串.</p><p>只保留字符串最开头的数字</p><p>如果开头就不是数字,直接返回<code>NaN</code></p><p><strong>对小数的处理:</strong></p><pre><code class="js">console.log(parseInt(&quot;5.9&quot;));//5</code></pre><p>对非String的处理:先转换为String类型,再转换为Number返回<code>NaN</code></p><p><strong>转换为别的进制:</strong></p><pre><code class="js">var a = 0b11;console.log(parseInt(a,10));//3</code></pre></li></ul><ul><li><p><strong>parseFloat()</strong></p><p>同上,专门用来转换String类型</p><p>可以获得有效的小数部分</p></li><li><p><strong>Boolean()</strong></p><p>​    数字类型:除了0和NaN其他都是true;</p><p>​    字符串:除了空的字符串都是true;</p><p>​    Object类型都是true;</p><p>​    Null和Undefined都是false;</p></li></ul><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h3 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字:"></a>其他进制的数字:</h3><p>16进制, 以<code>0x</code>开头;</p><p>8进制,以<code>0</code>开头;</p><p>2进制,以<code>0b</code>开头</p><h3 id="infinity"><a href="#infinity" class="headerlink" title="infinity"></a>infinity</h3><p>当使用的Number超过了ES能表示的最大值,则会返回 infinity,</p><p>当使用的Number小于了ES能表示的最大小值,则会返回 -infinity</p><p>👩: infinity也是Number类型</p><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>👩NaN也是Number类型,NaN与任何数值都不相等</p><p><code>NaN≠NaN</code></p><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p>可以用来判断一个数是否是NaN</p><h3 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h3><p>尽量不要再js中使用浮点数运算,因为结果不准确</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p><code>+</code>比较特别</p><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>用来表示一个空的对象</p><pre><code class="js">    var a = null;    console.log(typeof a);//object</code></pre><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><pre><code class="js">    var a = undefined;    console.log(typeof a);//undefined</code></pre><h2 id="👇-underfined-与-null-的区别和相似之处"><a href="#👇-underfined-与-null-的区别和相似之处" class="headerlink" title="👇 underfined 与 null 的区别和相似之处"></a>👇 underfined 与 null 的区别和相似之处</h2><pre><code class="js">    var a = undefined;    var b = null;    console.log(a == b);//true    console.log(a === b);//false</code></pre><pre><code class="js">    var a = undefined;    var b = null;    console.log(a + 10);//NaN    console.log(b + 10);//10</code></pre><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>与<code>&amp;&amp;</code> </p><p>或<code>||</code></p><h2 id="i-i"><a href="#i-i" class="headerlink" title="++i,i++"></a>++i,i++</h2><blockquote><p>++ i 是先加后赋值;i ++ 是先赋值后加;++i和i++都是分两步完成</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html5 -private</title>
    <link href="undefined2019/11/29/html5/"/>
    <url>2019/11/29/html5/</url>
    
    <content type="html"><![CDATA[<p><em>本文算是一个个人向的笔记,涉及到的都是书上出现过,但是我不怎么熟悉的内容,<s>相当于把书过一下</s></em></p><p><em>index_img来自斉藤健吾@月曜日 南 ナ26ab (@kengo1212)： <a href="https://twitter.com/kengo1212?s=09" target="_blank" rel="noopener">https://twitter.com/kengo1212?s=09</a></em></p><p>插入个音乐播放器测试一下!</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=454224982&auto=1&height=66"></iframe><h2 id="一些常用H5标签"><a href="#一些常用H5标签" class="headerlink" title="一些常用H5标签"></a>一些常用H5标签</h2><pre><code>    &lt;b&gt; bold    &lt;sub&gt; 下标    &lt;sup&gt; 上标    &lt;bdo dir=&quot;rtl&quot;&gt;123&lt;/bdo&gt;     &lt;strong&gt; 强调(加粗,会优先使用)    &lt;em&gt; emphasized    &lt;i&gt; italic</code></pre><h3 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="&lt;a&gt;"></a>&lt;a&gt;</h3><pre><code class="html">&lt;a href=&quot;rikka.png&quot; donwnload=&quot;&quot;&gt;click here to download&lt;/a&gt;</code></pre><p><strong>download</strong>标签:加入后点击链接不会跳转,而是直接开始下载</p><h3 id="lt-dl-gt"><a href="#lt-dl-gt" class="headerlink" title="&lt;dl&gt;"></a>&lt;dl&gt;</h3><p>定义列表dl: 英文全称definition list</p><pre><code>    &lt;dl&gt;        &lt;dt&gt;地区&lt;/dt&gt;//denifition title        &lt;dd&gt;上海&lt;/dd&gt;//definition description        &lt;dd&gt;上海&lt;/dd&gt;        &lt;dd&gt;上海&lt;/dd&gt;    &lt;/dl&gt;</code></pre><p>输出:</p><pre><code class="html">地区    上海    上海    上海</code></pre><p>👩如果margin和padding设置为0,则不会有缩进的效果</p><h1 id="表格元素-lt-table-gt"><a href="#表格元素-lt-table-gt" class="headerlink" title="表格元素&lt;table&gt;"></a>表格元素&lt;table&gt;</h1><h3 id="lt-caption-gt"><a href="#lt-caption-gt" class="headerlink" title="&lt;caption&gt;"></a>&lt;caption&gt;</h3><p>用于定义表格的标题</p><h3 id="lt-th-gt"><a href="#lt-th-gt" class="headerlink" title="&lt;th&gt;"></a>&lt;th&gt;</h3><pre><code class="html">    &lt;table&gt;        &lt;tr&gt;            &lt;th&gt;1&lt;/th&gt;            &lt;th&gt;2&lt;/th&gt;            &lt;th&gt;3&lt;/th&gt;        &lt;/tr&gt;    &lt;/table&gt;</code></pre><h3 id="rowspan-amp-colspan"><a href="#rowspan-amp-colspan" class="headerlink" title="rowspan&amp;colspan"></a>rowspan&amp;colspan</h3><p>用于合并单元格,直接在<code>td</code>中使用</p><pre><code class="html">eg:&lt;td rowspan=&quot;2&quot;&gt;</code></pre><h3 id="lt-colgroup-gt"><a href="#lt-colgroup-gt" class="headerlink" title="&lt;colgroup&gt;"></a>&lt;colgroup&gt;</h3><p>//这标签完全可以用在css中写样式的方式代替</p><p>通常在&lt;table&gt;的下方直接加,与<code>col</code>一起使用</p><pre><code class="html">        &lt;colgroup&gt;            &lt;col span=&quot;2&quot; width=&quot;200&quot;&gt;            &lt;col width=&quot;100&quot;&gt;        &lt;/colgroup&gt;</code></pre><p>👆,<code>span</code>:&lt;number&gt;,表示样式被改变的列数,不给值得话默认为1</p><p>​    <code>width</code>:表示被当前&lt;col&gt;影响的列的宽度.</p><p>​    &lt;col&gt;:如果第一个&lt;col&gt;标签的 span=2,那么第二个&lt;col&gt;标签就会从第三列开始执行.</p><h3 id="html5新增的语义化标签"><a href="#html5新增的语义化标签" class="headerlink" title="html5新增的语义化标签"></a>html5新增的语义化标签</h3><p>&lt;header&gt; &lt;main&gt; &lt;footer&gt;</p><p>&lt;article&gt;:只要是单独的文档内容就可以使用</p><p>&lt;session&gt;:用于定义文档中的一个区域,强调分段,分区</p><p>👩区别:如果是一段主题性的内容,则用session,如果一段脱离下文仍是完整且独立的存在的一段内容,则用article.两者可以互相嵌套.</p><p><code>&lt;aside&gt;</code>:用于定义与文章内容无关的附属信息,通常用于嵌入内容和侧边栏.</p><p><code>&lt;nav&gt;</code>:导航栏</p><h3 id="lt-meter-gt-amp-lt-progress-gt"><a href="#lt-meter-gt-amp-lt-progress-gt" class="headerlink" title="&lt;meter&gt;&amp;&lt;progress&gt;"></a>&lt;meter&gt;&amp;&lt;progress&gt;</h3><p>进度条.</p><p>可选值 <code>max</code>  <code>min</code>  <code>value</code>  //没有作进一步的了解</p><h3 id="lt-frameset-gt"><a href="#lt-frameset-gt" class="headerlink" title="&lt;frameset&gt;"></a>&lt;frameset&gt;</h3><p>框架的集合</p><h3 id="lt-video-gt-amp-lt-audio-gt"><a href="#lt-video-gt-amp-lt-audio-gt" class="headerlink" title="&lt;video&gt;&amp;&lt;audio&gt;"></a>&lt;video&gt;&amp;&lt;audio&gt;</h3><p>可以添加<code>controls</code>来添加控件,</p><h2 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h2><p>如果该属性的值设置为true,则允许用户直接修改页面上的元素</p><p>例如可以在&lt;table&gt;,&lt;div&gt;中添加此元素</p><p>但是刷新后修改的内容就会丢失</p><p>👩<code>designMode</code> ,这个属性可以在在js修改.相当于全局的 contentedittable</p><pre><code class="js">document.designMode = &quot;on&quot;;</code></pre><h2 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h2><p>html5所有的元素都有hidden属性,hidden=”true” 相当于 dispaly=”none”</p><p>//onclick里可以直接添加js内容👇</p><pre><code class="html">    &lt;button id=&quot;button&quot; onclick=&quot;        var target = document.getElementById(&#39;target&#39;);        target.hidden = !target.hidden;        var button = document.getElementById(&#39;button&#39;);        if(target.hidden){button.innerHTML=&#39;show&#39;}else{button.innerHTML=&#39;hidden&#39;}    &quot;&gt;show&lt;/button&gt;    &lt;div id=&quot;target&quot; hidden=&quot;true&quot;&gt;        say what?    &lt;/div&gt;</code></pre><h1 id="表单元素-lt-form-gt"><a href="#表单元素-lt-form-gt" class="headerlink" title="表单元素&lt;form&gt;"></a>表单元素&lt;form&gt;</h1><p>在需要上传时,<code>enctype</code>的值需要改为 <code>multipart/form-data</code></p><p><code>name</code>的值的设置一般要与<code>id</code>的相同</p><h1 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h1><h2 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a>&lt;input&gt;</h2><p>可选值</p><ul><li>week</li><li>month</li><li>color</li><li>date</li><li>month</li><li>date</li><li>time</li><li>url 移动端</li><li>tel 移动端</li><li>search 移动端</li><li>range -拖动条</li></ul><p>属性:<code>maxlength</code> <code>readonly</code> <code>disable</code></p><h2 id="lt-label-gt"><a href="#lt-label-gt" class="headerlink" title="&lt;label&gt;"></a>&lt;label&gt;</h2><p>有两种用法:</p><pre><code class="html">    &lt;label&gt;        nihao        &lt;input type=&quot;text&quot; id=&quot;hello&quot;&gt;    &lt;/label&gt;2&gt;     &lt;label for=&quot;hello&quot;&gt;        nihao        &lt;input type=&quot;text&quot; id=&quot;hello&quot;&gt;    &lt;/label&gt;</code></pre><h2 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="&lt;select&gt;"></a>&lt;select&gt;</h2><pre><code class="html">select</code></pre><h2 id="lt-button-gt"><a href="#lt-button-gt" class="headerlink" title="&lt;button&gt;"></a>&lt;button&gt;</h2><p>type =<code>button</code> / <code>submit</code>/ <code>reset</code></p><h2 id="formaction"><a href="#formaction" class="headerlink" title="formaction"></a>formaction</h2><p>当你不需要一次提交整个form中的数据时,可以在<code>submit</code>中使用这个属性</p><p>formaction = “你需要提交的id值”</p><pre><code class="html">    &lt;form action=&quot;&quot; method=&quot;get&quot;&gt;        &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;        &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;        &lt;input type=&quot;submit&quot; formaction=&quot;username&quot;&gt;        &lt;input type=&quot;submit&quot; formaction=&quot;password&quot;&gt;    &lt;/form&gt;</code></pre><p>👩 <code>formmethod</code>/ <code>formenctype</code> / <code>formtarget</code> 同理</p><h2 id="autocomplete-autofocus"><a href="#autocomplete-autofocus" class="headerlink" title="autocomplete/autofocus"></a>autocomplete/autofocus</h2><p>autocomplete为自动填充,</p><p>autofocus,当你为某个<code>input</code>添加这个元素时,打开页面的同时这个<code>input</code>会获取焦点.</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>建议和<code>datalist</code>一起使用 eg:</p><pre><code class="html">    &lt;form action=&quot;&quot; method=&quot;get&quot;&gt;        &lt;label&gt;            &lt;input type=&quot;text&quot; list=&quot;location&quot; placeholder=&quot;waifu&quot;&gt;        &lt;/label&gt;    &lt;/form&gt;    &lt;datalist id=&quot;location&quot;&gt;        &lt;option value=&quot;angelina&quot;&gt;安洁莉娜&lt;/option&gt;        &lt;option value=&quot;Eyjafjalla&quot;&gt;艾雅法拉&lt;/option&gt;        &lt;option value=&quot;chen&quot;&gt;陈&lt;/option&gt;    &lt;/datalist&gt;</code></pre><p>效果还挺炫:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191129194042.png" srcset="undefined" alt="">输入为空时</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191129194106.png" srcset="undefined" alt="">输入一个’a’</p><h3 id="patter"><a href="#patter" class="headerlink" title="patter"></a>patter</h3><p>用于给当前的<code>input</code>加入验证,(正则表达式)</p><p>eg:</p><pre><code class="html">    &lt;form action=&quot;&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; pattern=&quot;[0-9]*&quot;&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;</code></pre><h2 id="novalidate"><a href="#novalidate" class="headerlink" title="novalidate"></a>novalidate</h2><p>在表单内加入这个属性,就可以避免验证直接提交</p><p>👩<code>form</code>标签,<code>input</code>标签都可以使用</p><pre><code class="html">&lt;form action=&quot;&quot; novalidate=&quot;novalidate&quot;&gt;        &lt;input type=&quot;email&quot; name=&quot;user_email&quot; /&gt;          &lt;input type=&quot;submit&quot; /&gt;&lt;/form&gt;</code></pre><h3 id="required"><a href="#required" class="headerlink" title="required"></a>required</h3><p>规定必须要填入内容,否则无法提交</p><pre><code class="html">&lt;input type=&quot;text&quot; name=&quot;usr_name&quot; required=&quot;required&quot; /&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>html</tag>
      
      <tag>private</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11_28</title>
    <link href="undefined2019/11/28/11-28/"/>
    <url>2019/11/28/11-28/</url>
    
    <content type="html"><![CDATA[<p>时间过得好快,打下这篇文章的开头的时候发现现在已经是11/28了,web的考试时间是12/21,现在开始到12/21,blog的内容都会以书上的内容为准了,尽量通过写下这些笔记的方式来让自己记得更牢固</p><p>今天想到这些:</p><p>世界上有很多人不是因为游戏好玩才去玩游戏的,而是时间太多而不知道干什么才去玩,睡觉同理,不是因为困了才睡觉,而是想要快一点度过这段时光才去睡觉,就像在我的世界里一样,制作好床,然后右键就可以睡觉了,下一秒就是第二天,那我可以说像这样的人活着是没有意义的吗?在我高三时,我就是这样的,那段时间真是暗淡无比.</p><p>现在在我身边也有很多这样的例子,不过这也和我没什么关系,每个人都有自己人生的过法.但是这种状态却会影响周围的人,其实也不单指这种状态吧,每个人的行为都会影响到他人,无论是积极正面的还是消极的,关于这点我最近也深有体会.</p><p>写到这,我在思考一件事,人们在写东西的时候会极力追求事件的真实性或者是第一想法吗?起码我刚刚没有做到,比如上面那段的最后,原本我是想写成<code>最近也有很多体会</code>但是我觉得换成<code>深有体会</code>会好一点,只是因为为了确保文章的流畅性?还是说因为在很多地方<code>体会</code>一般都是会和<code>深有</code>搭配,所以我才会这样写?写东西没有固定的格式,这点我很喜欢,可以随心所欲地敲下当下脑海里出现的想法.我开始理解了为什么有些人会喜欢去写小说之类的文学作品了.</p><p>说到这我突然想到以前在youtube看过一个视频,视频里的那个人为了让写出来的歌词押韵完全不在乎所有的歌词组合在一起究竟讲的是一个怎样的故事,而是让故事随着押韵的歌词不可预料地进行下去.我猜很多人在写东西时也不会去在乎写的东西有什么意义,比如古代的诗人写的诗,我初中时尤其讨厌诗歌鉴赏,为什么要让几百年后的人们去理解当时的人在写下诗歌时的想法,即使是现在的我也无法理解,起码答案不是固定的吧,一千个人心中有一千个哈姆雷特,为什么在考试时一定要写下唯一解才能拿分?</p><p>之前在天气之子上映的时候,新海诚接受了b站的一个采访,在被问到 制作<strong>天气之子</strong>电影时要同步进行小说的创作有什么想法时,其中一段话我感受很深,他说</p><blockquote><p>“觉得影像是一种时间表现,(看影像时)时间会不断地流逝,要如何控制观众地时间是影像最重要地问题,因为时间是会流动的.反之,文字的话是读者自己在分配时间,没有音乐,声音,影像,所以完全是不一样的,影像一秒钟能说清楚的,文字的话即使写一两页也可能无法描述清楚,反之,也有用文字一秒钟就能表达的,用影像却不知道怎么实现.比如,文字中说,’’他像迷路的孩子一样的不安的表情’’,看书的人会马上领悟到,迷路的孩子一样不安的少年,但是,迷路的孩子一样不安的表情,在动画中,要画这样的表情就非常的困难,即便是真的演员正确地表演迷路的孩子的表情也是很难的,但文字却可以.”</p></blockquote><p>文字特殊的能力就是让每一个不同的人都根据相同的一段文字在脑海中产生不同的想象,诗歌之类的就尤为明显了.</p><p>附上那个youtube视频的b站链接:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=16907446&cid=27635253&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    
    <tags>
      
      <tag>summary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex布局中 align-items和align-content</title>
    <link href="undefined2019/11/27/flex2/"/>
    <url>2019/11/27/flex2/</url>
    
    <content type="html"><![CDATA[<h3 id="首先先给出我当前的CSS和HTML"><a href="#首先先给出我当前的CSS和HTML" class="headerlink" title="首先先给出我当前的CSS和HTML"></a>首先先给出我当前的CSS和HTML</h3><pre><code class="html">    &lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-wrap: wrap;            flex-direction: row;            justify-content: space-between;            align-items: flex-start;            align-content: space-between;            background-color: #0080ff;            height: 700px;        }        .container&gt;div {            width: 100px;            height: 100px;            /* border: 1px solid black; */        }        .item1 {            background-color: #a3daff;            line-height: 100px;            /* font-size: 120px; */        }        .item2 {            background-color: #1ec0ff;            width: 200px !important;            height: 130px !important;            font-size: 100px;            line-height: 130px;        }        .item3 {            background-color: #FBFFB9;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;&lt;/div&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item1&quot;&gt;1&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;2&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;4&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;5&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;6&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;7&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;8&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;9&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;10&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;11&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;12&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;13&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;14&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;15&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;16&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="👩这里我同时给了align-item和align-content的值"><a href="#👩这里我同时给了align-item和align-content的值" class="headerlink" title="👩这里我同时给了align-item和align-content的值"></a>👩这里我同时给了<code>align-item</code>和<code>align-content</code>的值</h3><pre><code class="css">align-items: flex-start;align-content: space-between;</code></pre><p>呈现如下:</p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127150714.png" srcset="undefined" style="zoom:67%;" /><p>可以看到,<code>align-item</code>只在每一行中起效果,即在每行中所有的<code>item</code>都会顶到当前行的最上方</p><h3 id="👩再给他们换别的值"><a href="#👩再给他们换别的值" class="headerlink" title="👩再给他们换别的值"></a>👩再给他们换别的值</h3><p>现在我把他们修改为,并调整了窗口的大小:</p><pre><code class="css">align-items: flex-end;align-content: flex-start;</code></pre><p>呈现如下:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127151648.png" srcset="undefined" alt=""></p><p>可以看到<code>align-content</code>作用于整个<code>container</code>,而<code>align-item</code>则作用于他自己那行,和之前的结论一样,<s>好像这段没有必要的样子</s></p><h3 id="👨注释掉align-content"><a href="#👨注释掉align-content" class="headerlink" title="👨注释掉align-content"></a>👨注释掉align-content</h3><pre><code class="css">align-items: flex-end;/* align-content: flex-start; */</code></pre><p>这次我把<code>align-content</code>给注释掉了,并且修改了窗口大小,呈现如下:</p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127161505.png" srcset="undefined" style="zoom:67%;" /><h3 id="👴给align-content-flex-end"><a href="#👴给align-content-flex-end" class="headerlink" title="👴给align-content: flex-end;"></a>👴给align-content: flex-end;</h3><pre><code class="css">align-items: flex-end;align-content: flex-end;</code></pre><p>这次给了<code>align-content</code>值,同样为<code>flex-end</code></p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127162559.png" srcset="undefined" style="zoom:67%;" /><p>我们可以看到在全局下(指<code>container</code>) ,每一行的间距已经变成了0.</p><h3 id="👵将align-item注释掉"><a href="#👵将align-item注释掉" class="headerlink" title="👵将align-item注释掉"></a>👵将align-item注释掉</h3><pre><code class="css">/* align-items: flex-end; */align-content: flex-end;</code></pre><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127163124.png" srcset="undefined" style="zoom: 67%;" /><p>这里的<code>align-item</code>的value已经成为了默认值<code>flex-start</code>了</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>align-item</code>只作用于每一行的行本身,而<code>align-content</code>则作用于全<code>container</code>;如果只给<code>align-item</code>值,则在全局的每一行间都会有一段默认的不为0的距离,👈这是她的兼职工作,同时<code>align-item</code>也会完成她的本分工作:在每一行设置<code>item</code>水平排列方式;如果在这时加入个专门做调整全局(<code>container</code>)布局的<code>align-content</code>的话,<code>align-item</code>的兼职工作就会被接过.此时,<code>align-content</code>仿佛在对<code>align-item</code>说,”你就是<code>align-item</code>吗?感谢你之前做的一切,从现在开始请不要担♥任何事,因为我来了!”.然后留下<code>align-item</code>在原地露出迷妹般的星星眼.</p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127165804.gif" srcset="undefined" style="zoom: 150%;" /><h3 id="that’s-all"><a href="#that’s-all" class="headerlink" title="that’s all!"></a>that’s all!</h3>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>前端</tag>
      
      <tag>flex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex布局</title>
    <link href="undefined2019/11/26/flex/"/>
    <url>2019/11/26/flex/</url>
    
    <content type="html"><![CDATA[<p>发现很多地方都会用上Flex布局,所以就决定今晚把Flex给整活了,冲冲冲🐛</p><p>在看了一些博客后决定结合自己的理解写下一些笔记</p><p>参照：</p><blockquote><p><a href="https://juejin.im/post/5ddc78f851882573520fb199" target="_blank" rel="noopener">https://juejin.im/post/5ddc78f851882573520fb199</a>  作者：<strong>锐玩道</strong></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/4b14a7a1c6cc" target="_blank" rel="noopener">https://www.jianshu.com/p/4b14a7a1c6cc</a>                  作者：<strong>sxfshdf</strong></p><p><a href="https://blog.csdn.net/m0_37058714/article/details/80765562" target="_blank" rel="noopener">https://blog.csdn.net/m0_37058714/article/details/80765562</a>     作者 <strong>wxk_前端开发</strong></p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a>  作者: <strong>阮一峰</strong></p></blockquote><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><p>首先使用Flex布局一定要知道的一点是,这种布局总是以父子的形式存在,父级元素被称为 <strong>容器</strong>(container),有些地方也会称为<strong>弹性盒</strong>,而所有的子级元素会自动地成为这个<strong>容器</strong>的成员,成为 Flex项目(item)</p><p>在下文会用 <strong>container</strong> 表示容器, <strong>item</strong>表示Flex项目</p><pre><code class="html">display:flex//当一个元素的display被设置为flex后，它就会成为一个 *container</code></pre><blockquote><p>:hand:这里需要注意的是一旦一个元素被设置为display：flex，子元素的 float,clear,vertical-align将会失效</p></blockquote><h1 id="主轴（main-axis-amp-副轴-侧轴-cross-axis"><a href="#主轴（main-axis-amp-副轴-侧轴-cross-axis" class="headerlink" title="主轴（main axis )&amp; 副轴/侧轴(cross axis)"></a><strong>主轴</strong>（main axis )&amp; <strong>副轴</strong>/侧轴(cross axis)</h1><p><strong>container</strong>中默认会存在这两条轴，</p><p>一般来说，主轴是指水平方向的轴，而副轴是指垂直方向的轴,但是却不是绝对的,比如说下面的这个<code>flex-direction</code>属性就可以决定主轴的方向👇</p><h1 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h1><p>这个属性决定的是主轴的方向 ,即item们的排列方式</p><p>一共有 4个值 分别为 <strong>row</strong> | <strong>row-reverse</strong> | <strong>column</strong> | <strong>column-reverse</strong>; </p><pre><code class="html">.container{    display: flex;    flex-direction:  row | row-reverse | column | column-reverse;}</code></pre><p>在demo中，我的初始代码如下：</p><pre><code class="html">//css部分&lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-direction: row;        }        .container&gt;div {            width: 100px;            height: 100px;        }        .item1 {            background-color: red;        }        .item2 {            background-color: yellow;        }        .item3 {            background-color: blue;        }    &lt;/style&gt;----------------------------------------------------------------------------------//body部分    &lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item1&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item3&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><p>现在分别展示4种 <strong>flex-direction</strong>的效果 :</p><p>👩要注意的是，在我的代码中<strong>container</strong>默认宽度是整个<strong>body</strong>的宽度,而高度则内容物(分别是红,黄,蓝三个盒子)而确定.</p><h3 id="row-从左向右排列"><a href="#row-从左向右排列" class="headerlink" title="row :从左向右排列"></a>row :从左向右排列</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a1.png" srcset="undefined" alt=""></p><h3 id="row-reverse-从右向左排列"><a href="#row-reverse-从右向左排列" class="headerlink" title="row-reverse:从右向左排列"></a>row-reverse:从右向左排列</h3><p>👩这种布局中,并不是单纯地将三个盒子调转了顺序,而是还加了一步:把<strong>item</strong>全都在<strong>container</strong>中从右向左排列.</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a2.png" srcset="undefined" alt=""></p><h3 id="column-从上到下排列"><a href="#column-从上到下排列" class="headerlink" title="column:从上到下排列"></a>column:从上到下排列</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a3.png" srcset="undefined" alt=""></p><h3 id="column-reverse-从下到上排列"><a href="#column-reverse-从下到上排列" class="headerlink" title="column-reverse:从下到上排列"></a>column-reverse:从下到上排列</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_a4.png" srcset="undefined" alt=""></p><h1 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h1><p>这个属性定义的是,如果在一条水平线上已经存在了过多的<strong>item</strong>(意思就是挤不下了),这些<strong>item</strong>将如何换行.</p><p>这个属性有3个值:</p><pre><code class="html">.container{    display: flex;    flex-wrap: nowrap | wrap | wrap-reverse;}</code></pre><p>在demo中我的初始代码如下:</p><pre><code class="html">css部分-----------------------------------------------------------------------------------------&lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-direction: row;            flex-wrap: nowrap;        }        .container&gt;div {            width: 100px;            height: 100px;            border: 1px solid black;        }body部分-----------------------------------------------------------------------------------------    &lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div&gt;7&lt;/div&gt;        &lt;div&gt;8&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><p>下面来看看效果吧:</p><h3 id="默认效果"><a href="#默认效果" class="headerlink" title="默认效果:"></a>默认效果:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b1.png" srcset="undefined" alt=""></p><h3 id="nowrap-不换行"><a href="#nowrap-不换行" class="headerlink" title="nowrap:不换行"></a><strong>nowrap</strong>:不换行</h3><p>现在我减小了浏览器窗口的宽度👇</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b2.png" srcset="undefined" alt=""></p><p>再缩小:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b3.png" srcset="undefined" alt=""></p><p>👨hey!!我似乎发现了华点!这就是 <strong>弹性布局</strong>这个名字的由来吗?👆</p><h3 id="wrap-换行"><a href="#wrap-换行" class="headerlink" title="wrap:换行"></a>wrap:换行</h3><p>减小浏览器的宽度:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b4.png" srcset="undefined" alt=""></p><p>再减小:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b5.png" srcset="undefined" alt=""></p><h3 id="wrap-reverse-颠倒顺序的换行方式"><a href="#wrap-reverse-颠倒顺序的换行方式" class="headerlink" title="wrap-reverse:颠倒顺序的换行方式"></a>wrap-reverse:颠倒顺序的换行方式</h3><p>减小浏览器的宽度:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b6.png" srcset="undefined" alt=""></p><p>再减小:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_b7.png" srcset="undefined" alt=""></p><p>👩可以看到wrap-reverse和wrap中的item顺序是完全反过来的</p><h1 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h1><p>这个属性就不多说辣,他的作用是将上面两个属性 <strong>flex-direction</strong> ,<strong>flex-wrap</strong> 写在一行,属于一种简写形式</p><pre><code class="html">.container{    flex-flow:&lt;flex-direction&gt; &lt;flex-wrap&gt; ;}</code></pre><p>比如说:</p><pre><code class="html">.container {            display: flex;            flex-direction: row;            flex-wrap: wrap-reverse;        }</code></pre><p>👇👆效果完全一样</p><pre><code class="html">.container {            display: flex;            flex-flow: nowrap row;        }</code></pre><p>👩tips:这里 <strong>flex-direction</strong> <strong>flex-wrap</strong> 这两个值的顺序是可以调换的</p><h1 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h1><p>这个属性可以设置item们在主轴上的排列方式</p><pre><code class="html">.container{    justify-content: flex-start | flex-end | center | space-between | space-around    //常用的有这5个值}</code></pre><p>这是我的初始代码:</p><pre><code class="html">    &lt;style&gt;        * {            padding: 0;            margin: 0;        }        .container {            display: flex;            flex-flow: nowrap row;            justify-content: flex-start;            background-color: #0080ff;            height: 150px;        }        .container&gt;div {            width: 100px;            height: 100px;            border: 1px solid black;        }        .item1 {            background-color: #a3daff;        }        .item2 {            background-color: #1ec0ff;            width: 200px !important;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;flex-start&lt;/div&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item1&quot;&gt;1&lt;/div&gt;        &lt;div class=&quot;item2&quot;&gt;2&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;item1&quot;&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><p>👩这里设置了一个<code>item2</code>,它的样子与众不同,已此来形成对比</p><h3 id="flex-start"><a href="#flex-start" class="headerlink" title="flex-start"></a>flex-start</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127105724.png" srcset="undefined" alt=""></p><h3 id="flex-end"><a href="#flex-end" class="headerlink" title="flex-end"></a>flex-end</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/flex_justify_content_end.png" srcset="undefined" alt=""></p><h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127114926.png" srcset="undefined" alt=""></p><h3 id="space-between"><a href="#space-between" class="headerlink" title="space-between"></a>space-between</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127114600.png" srcset="undefined" alt=""></p><h3 id="space-around"><a href="#space-around" class="headerlink" title="space-around"></a>space-around</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127114814.png" srcset="undefined" alt=""></p><p>👩注意:<code>space-around</code>和<code>space-between</code>的区别是:<code>space-around</code>会在浏览器窗口内的左右两边生成空隙,空隙的<code>width</code>=1/2相邻<code>item</code>的间距</p><h1 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h1><p>这个属性可以设置<code>item</code>们在副轴上的排列方式,一共有5个可选值</p><pre><code class="html">align-item: flex-start | flex-end | center | baseline | stretch;</code></pre><p>效果如下:</p><h3 id="flex-start-1"><a href="#flex-start-1" class="headerlink" title="flex-start:"></a>flex-start:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127124701.png" srcset="undefined" alt=""></p><h3 id="flex-end-1"><a href="#flex-end-1" class="headerlink" title="flex-end:"></a>flex-end:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127124750.png" srcset="undefined" alt=""></p><h3 id="center-1"><a href="#center-1" class="headerlink" title="center:"></a>center:</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127124852.png" srcset="undefined" alt=""></p><h3 id="baseline"><a href="#baseline" class="headerlink" title="baseline:"></a>baseline:</h3><p>​    <img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127130434.png" srcset="undefined" alt=""></p><p>👩此处我为每个<code>item</code>都设置了 <code>line-height</code>=<code>height</code>,可以看到 <strong>baseline</strong>的对齐方式很特别,是以文字的基线作为标准的,我觉得可以用来做一些视觉设计.</p><h3 id="stretch"><a href="#stretch" class="headerlink" title="stretch"></a>stretch</h3><p>待续</p><h1 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h1><p>设置<code>container</code>的中<code>item</code>们垂直方向上的对齐方式</p><pre><code class="html">align-content: flex-start | flex-end | center | stretch | spave-between | space-around</code></pre><h3 id="center-2"><a href="#center-2" class="headerlink" title="center"></a>center</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140350.png" srcset="undefined" alt=""></p><h3 id="flex-start-2"><a href="#flex-start-2" class="headerlink" title="flex-start"></a>flex-start</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140505.png" srcset="undefined" alt=""></p><h3 id="flex-end-2"><a href="#flex-end-2" class="headerlink" title="flex-end"></a>flex-end</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140728.png" srcset="undefined" alt=""></p><h3 id="stretch-1"><a href="#stretch-1" class="headerlink" title="stretch"></a>stretch</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127140909.png" srcset="undefined" alt=""></p><p>👩这里的话<code>stretch</code>的效果是把整个<code>container</code>除去内容后剩余的高度平均分配成行间距,有一点需要说明一下:第一行是会顶到顶部的,而最后一行下面会留下行间距. 大家可以和 <code>align-content: flex-start</code>进行对比哦</p><h3 id="space-between-1"><a href="#space-between-1" class="headerlink" title="space-between"></a>space-between</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127142848.png" srcset="undefined" alt=""></p><h3 id="space-around-1"><a href="#space-around-1" class="headerlink" title="space-around"></a>space-around</h3><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191127142802.png" srcset="undefined" alt=""></p><p>👩看到这里大家在心里会有个疑惑吧,<code>align-item</code>和<code>align-content</code>的区别是什么呢,其实这是我现在内心中的问号,于是我写下了这篇👇</p><blockquote><p><a href="https://tohrux.github.io/2019/11/27/flex2/" target="_blank" rel="noopener">https://tohrux.github.io/2019/11/27/flex2/</a></p></blockquote><h1 id="item上的属性"><a href="#item上的属性" class="headerlink" title="item上的属性"></a><code>item</code>上的属性</h1><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>可以为<code>item</code>加上order属性,来改变<code>item</code>们的顺序,order值越大的会排在越前面.</p><pre><code class="css">//语法.item1{order = 2};.item2{order = 1};</code></pre><p>原本默认的顺序(未加上order属性时):</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191128192154.png" srcset="undefined" alt=""></p><p>加上上面代码块的默认属性后:</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/20191128103407.png" srcset="undefined" alt=""></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>可以设置<code>item</code>的扩展比率,根据所给予的数字大小来分配剩余空间(<code>width</code>).</p><p><strong>分配空间的计算方式</strong>:</p><blockquote><p>例如整个container的宽度为1000px,现在有三个item在其中,item1的宽度为100px,item2的宽度为200px,item3的宽度为300px,现在container内剩余的宽度为1000px-600px = 400px,现在给三个item分别给与flex-grow属性,item1:0; item2:3; item3:1;现在container将不会有剩余空间,item1的宽度依旧为100,item2则为3/(3+1)*400+200=500px,item3的宽度为1/(3+1)*400+300=400px;</p></blockquote><p>👩小tips:如果在container存在一堆item,只要为其中一个赋予flex-grow的值(可以是任何数字)它就会把剩余的空间都占用;</p><p>👨tips2:flex-grow的值可以为小数;</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>这个元素可以定义<code>item</code>的宽度,同时我们知道<code>width</code>也可以定义元素的宽度,但<code>flex-basis</code>会覆盖<code>width</code>的值.</p><h3 id="flex-shrink-amp-flex-basis-amp-flex-grow"><a href="#flex-shrink-amp-flex-basis-amp-flex-grow" class="headerlink" title="flex-shrink&amp;flex-basis&amp;flex-grow"></a>flex-shrink&amp;flex-basis&amp;flex-grow</h3><p>关于这三剑客,我推荐大家到这个blog看一下,讲得真的很通俗易懂,很棒,原本是抱着学习的心态去看,看完后发现自己写完全没有意义了</p><p><a href="https://blog.csdn.net/m0_37058714/article/details/80765562" target="_blank" rel="noopener">https://blog.csdn.net/m0_37058714/article/details/80765562</a></p><p>作者 <strong>wxk_前端开发</strong></p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>这个属性可以单独定义<code>item</code>在 <strong>cross axis</strong> 上的属性,并且可以覆盖<code>align-item</code>的属性,前五个值和之前的<code>align-item</code>用法一样,如果不给值,则默认给<code>auto</code>,表示继承 <code>align-item</code>,如果<code>align-item</code>也没有给值,则默认值为<code>flex-start</code>.</p><pre><code class="css">.item {  align-self: flex-start | flex-end | center | baseline | stretch | auto ;}</code></pre><p>未来可能会回来更新,因为到目前为止都只是把案例打了一遍,实际运用中遇到的问题,会记录下来,感谢在互联网上分享知识的人们,i了i了.</p><p>关于一些实际运用可以参考阮一峰老师的这篇博文:</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>前端</tag>
      
      <tag>flex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel的继承与包含(extend&amp;include</title>
    <link href="undefined2019/11/25/laravel-extends/"/>
    <url>2019/11/25/laravel-extends/</url>
    
    <content type="html"><![CDATA[<h1 id="include"><a href="#include" class="headerlink" title="@include"></a>@include</h1><p>可以用来引进别的页面</p><pre><code class="php">@include(&#39;文件名&#39;)</code></pre><h1 id="extends"><a href="#extends" class="headerlink" title="@extends"></a>@extends</h1><pre><code class="php">父级页面 语法:@yield(&#39;名字&#39;) </code></pre><pre><code class="php">子级页面:@extends(&#39;view下的路径&#39;)@section(&#39;名字&#39;)内容@endsection</code></pre><p><strong>实例</strong>:</p><p>父级页面:</p><pre><code class="php">&lt;h1&gt;我是头部&lt;/h1&gt;{{-- 可变区 --}}@yield(&#39;myBody&#39;){{-- 可变区 --}}&lt;h1&gt;我是尾部&lt;/h1&gt;</code></pre><p>子级页面:</p><pre><code class="php">@extends(&#39;test/test2&#39;)@section(&#39;myBody&#39;)&lt;h1&gt;    Lorem ipsum dolor sit amet consectetur a    dipisicing elit. Ea quibusdam quas nobis minima, aspernatur laborum nihil, natus omnis quia solu    ta beatae recusandae deleniti neque    ? Voluptatibus, nulla mollitia. Possimus, laborum adipisci?&lt;/h1&gt;@endsection</code></pre><p>结果:</p><pre><code class="php">我是头部Lorem ipsum dolor sit amet consectetur a dipisicing elit. Ea quibusdam quas nobis minima, aspernatur laborum nihil, natus omnis quia solu ta beatae recusandae deleniti neque ? Voluptatibus, nulla mollitia. Possimus, laborum adipisci?我是尾部</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>larave表单验证</title>
    <link href="undefined2019/11/25/laravel1-25/"/>
    <url>2019/11/25/laravel1-25/</url>
    
    <content type="html"><![CDATA[<h1 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证:"></a>表单验证:</h1><p>多个验证规则可以通过”|”隔开:</p><p>语法:</p><pre><code class="php">$this-&gt;validate(数据对象,[数组形式的验证规则])</code></pre><table><thead><tr><th align="center">规则名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">require</td><td align="center">不能为空</td></tr><tr><td align="center">max:value</td><td align="center">字段值必须小于或等于value,如果是字符串 value则为字符串的个数</td></tr><tr><td align="center">email</td><td align="center">验证邮箱是否合法</td></tr><tr><td align="center">confirmed</td><td align="center">验证两个字段是否相同,如果是password则必须输入与之匹配的paasword_confirmation字段</td></tr><tr><td align="center">url</td><td align="center">字段必须为有效URL</td></tr><tr><td align="center">integer</td><td align="center">必须为整数</td></tr><tr><td align="center">numeric</td><td align="center">必须为数值</td></tr><tr><td align="center">max</td><td align="center">最多255字符</td></tr><tr><td align="center">min</td><td align="center">最少1字符</td></tr></tbody></table><h1 id="实现用户验证功能"><a href="#实现用户验证功能" class="headerlink" title="实现用户验证功能"></a>实现用户验证功能</h1><ol><li><p>创建一个用户控制器</p></li><li><p>新建一个index.blade.php页面</p></li><li><p>引入静态资源 CSS,Js等 </p></li><li><p>配置路由</p></li><li><p>csrf验证:</p><pre><code class="php">{{csrf_token()}}//会在页面显示 纯文本显示 用在异步提交 ajax{{csrf_field()}}//一般已html元素的形式生成 自动hidden👇也可以直接写成这个    @csrf</code></pre><p>csrf_field自动生成的html元素:</p><pre><code class="html">&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;i4Q2RwjAN5NpYyUwJogKSjsza9VBi4hYtwQ7gvvu&quot;&gt;</code></pre></li></ol><h1 id="如何得知一个请求类型"><a href="#如何得知一个请求类型" class="headerlink" title="如何得知一个请求类型"></a>如何得知一个请求类型</h1><pre><code class="php"> public function index(Request $request)    {        echo $request-&gt;method();    }</code></pre><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><pre><code class="php">//CONTROLLER.PHP:    public function index(Request $request)    {        if ($request-&gt;method() == &#39;POST&#39;) {            echo $request-&gt;method();            $this-&gt;validate($request, [                &#39;name&#39; =&gt; &#39;required|min:2|max:20&#39;,                &#39;password&#39; =&gt; &#39;required|min:6&#39;            ]);            echo &quot;success!&quot;;        } else {            echo $request-&gt;method();            return view(&#39;users.index.index&#39;);        }    }//INDEX.BLADE.PHP:    @if(count($errors) &gt; 0)    &lt;div class=&quot;alert alert-danger&quot;&gt;        &lt;ul&gt;            @foreach ($errors-&gt;all() as $error)                &lt;li&gt;{{ $error }}&lt;/li&gt;            @endforeach        &lt;/ul&gt;    &lt;/div&gt;    @endif    &lt;form action=&quot;&quot; method=&quot;post&quot; &gt;            &lt;p&gt;usrname&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;/p&gt;            &lt;p&gt;password&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;            @csrf            &lt;p&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/p&gt;       &lt;/form&gt;//WEB.PHP        Route::any(&#39;/users/index/adduser&#39;, &#39;UserController@index&#39;);</code></pre><h2 id="独立验证实现"><a href="#独立验证实现" class="headerlink" title="独立验证实现"></a>独立验证实现</h2><pre><code class="php">$validate = Validator::make($request-&gt;all(), [&#39;name&#39; =&gt; &#39;required|min:2|max:20&#39;,&#39;password&#39; =&gt; &#39;required|min:6&#39;]);//打印对象所有的方法 04:failsdump(get_class_methods($validate));if ($validate-&gt;fails()) {//通过重定向回退// return redirect()-&gt;back()-&gt;withErros($validate);}</code></pre><h2 id="通过验证器文件来实现"><a href="#通过验证器文件来实现" class="headerlink" title="通过验证器文件来实现"></a>通过验证器文件来实现</h2><p>通过命令行创建一个验证器文件</p><pre><code class="cmd">php artisan make:request UserRequest</code></pre><p>然后在该文件进行配置</p><pre><code class="php">    public function rules()    {        return [            //编写自定义规则            &#39;name&#39; =&gt; &#39;required|min:2|max:20&#39;,            &#39;password&#39; =&gt; &#39;required|min:6&#39;        ];    }    //如果需要中文的错误提示,则需要手动写方法    public function message()    {        return [            &#39;name.requiired&#39; =&gt; &#39;不能为空&#39;,            &#39;password.requiired&#39; =&gt; &#39;不能为空&#39;        ];    }</code></pre><h2 id="关于验证语言包"><a href="#关于验证语言包" class="headerlink" title="关于验证语言包"></a>关于验证语言包</h2><p>可以通过这个网站去下载<a href="https://packagist.org/packages/caouecs/laravel-lang" target="_blank" rel="noopener" title="packagist">packagist</a></p><p>使用composer安装完后 再到vendor下拿到这个文件复制到\resources\lang下</p><p>再在validation把locale修改为想要的语言就🆗</p>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lavavel视图</title>
    <link href="undefined2019/11/24/jkjk/"/>
    <url>2019/11/24/jkjk/</url>
    
    <content type="html"><![CDATA[<h1 id="视图文件的命名和渲染"><a href="#视图文件的命名和渲染" class="headerlink" title="视图文件的命名和渲染"></a>视图文件的命名和渲染</h1><ol><li>文件名习惯小写</li><li>后缀为 <strong>blade.php</strong> </li><li>不使用 <strong>balde.php</strong>结尾的话就不能使用laravel提供的标签语法显示数据,只能使用原生语法显示数据</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>在开发中可以使用compact(php内置函数)来进行数组的打包</p><h3 id="TextController"><a href="#TextController" class="headerlink" title="TextController:"></a>TextController:</h3><pre><code class="php">    public function test3()    {        //现在时间        $date = date(&#39;Y-m-d H:i:s&#39;, time());        //获取今天的星期        $day = &#39;sunday&#39;;        //show 视图        //return view(&#39;home/index/test3&#39;, [&#39;date&#39; =&gt; $date, &#39;day&#39; =&gt; $day]);        👆      效果一样            👇        return view(&#39;home/index/test3&#39;, compact(&#39;date&#39;, &#39;day&#39;));    }</code></pre><h3 id="web-php"><a href="#web-php" class="headerlink" title="web.php:"></a>web.php:</h3><pre><code class="php">Route::get(&#39;/home/index/test3&#39;, &quot;TextController@test3&quot;);</code></pre><h3 id="text3-blade-php"><a href="#text3-blade-php" class="headerlink" title="text3.blade.php:"></a>text3.blade.php:</h3><pre><code class="php">当前访问的是home/index/test3.blade.php文件&lt;br/&gt;现在是: {{$date}},今天是星期{{$day}}</code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出:"></a>输出:</h3><pre><code class="html">当前访问的是home/index/test3.blade.php文件现在是: 2019-11-23 01:47:37,今天是星期sunday</code></pre><h3 id="之前输出当前时间"><a href="#之前输出当前时间" class="headerlink" title="之前输出当前时间:"></a>之前输出当前时间:</h3><pre><code class="php">时间戳 {{date('Y-m-d H:i:s',$time)}}</code></pre><h3 id="一年后的时间"><a href="#一年后的时间" class="headerlink" title="一年后的时间:"></a>一年后的时间:</h3><pre><code class="PHP">{{date('Y-m-d H:i:s',strtotime('+1 year'))}};</code></pre><h1 id="循环分支语法标签"><a href="#循环分支语法标签" class="headerlink" title="循环分支语法标签"></a>循环分支语法标签</h1><p>下面是一个案例</p><p><strong>Controller</strong>中:</p><pre><code class="php">use DB;class TestController extends Controller{    //start    public function test1()    {        $db = DB::table(&#39;member&#39;)-&gt;get();        // dd($db);        return view(&#39;test.test1&#39;, compact(&#39;db&#39;));    }}</code></pre><p><strong>blade</strong>中:</p><pre><code class="php">id&amp;emsp;&amp;emsp;name&amp;emsp;&amp;emsp;email&amp;emsp;&lt;br&gt;@foreach ($db as $key =&gt; $value){{-- 如果不要key的话可以直接省略 ($db as $value) --}}    {{$value -> id}}&amp;emsp;&amp;emsp;    {{$value -> name}}&amp;emsp;&amp;emsp;    {{$value -> email}}    &lt;br&gt;@endforeach</code></pre><p><strong>输出结果:</strong></p><pre><code class="html">id  name  email 1   阿龙   al@gmail2   阿B   ab@gmail</code></pre><p>🙋‍特别注意</p><p>get查询道德结果集中的每一条都是一个对象,因此在循环具体字段的时候需要注意使用对象调用属性的方式才可以获取其数据</p><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><pre><code class="php">if在模板引擎的写法@if (Expression1)statement1@elseif(Expression2)statement2...@elsestatement3@endif</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel中关于数据库的操作</title>
    <link href="undefined2019/11/22/laravel4/"/>
    <url>2019/11/22/laravel4/</url>
    
    <content type="html"><![CDATA[<h1 id="所有项目都由这六个部分组成"><a href="#所有项目都由这六个部分组成" class="headerlink" title="所有项目都由这六个部分组成"></a>所有项目都由这六个部分组成</h1><ol><li>增删改查</li><li>循环</li><li>判断</li></ol><h1 id="DB类操作数据库"><a href="#DB类操作数据库" class="headerlink" title="DB类操作数据库"></a>DB类操作数据库</h1><p>按照MVC架构,对数据的操作都应该放在Model中完成.但如果不使用Model,也可以在laravel框架提供的DB类数据库操作数据.laravel中DB类的基本用法:<strong>DB::table(‘tableName’)</strong></p><p>在对数据库进行操作使用的是<strong>navicat</strong></p><ol><li><p>new 一个新的数据库 <strong>qz04</strong></p></li><li><p>在 <strong>qz04</strong>下 new 一个新的table <strong>member</strong></p></li><li><p>新建查询,代码如下:</p></li></ol><pre><code class="mysql">create table member(    id int primary key auto_increment,    name varchar(32) not null,    age tinyint unsigned not null,    email varchar(32) not null)engine myisam charset utf8;</code></pre><ol start="4"><li><p>在laravel中对 <strong>.env</strong>文件进行修改,链接到数据库</p><pre><code class="txt">DB_CONNECTION=mysqlDB_HOST=localhostDB_PORT=3306DB_DATABASE=qz04DB_USERNAME=rootDB_PASSWORD=</code></pre></li><li><p>在TextController控制器中引入DB门面</p><pre><code class="php">use DB;//因为已经在app.php文件中定义,所以可以直接use</code></pre></li><li><p>在web.php注册路由</p><pre><code class="php">//增删改查Route::group([&#39;prefix&#39; =&gt; &#39;home/index&#39;], function () {    Route::get(&#39;/add&#39;, &quot;TextController@add&quot;);    Route::get(&#39;/del&#39;, &quot;TextController@del&quot;);    Route::get(&#39;/update&#39;, &quot;TextController@update&quot;);    Route::get(&#39;/select&#39;, &quot;TextController@select&quot;);});</code></pre></li></ol><h2 id="增加信息-insert"><a href="#增加信息-insert" class="headerlink" title="增加信息(insert)"></a>增加信息(insert)</h2><p>▶<strong>insert(数组)可以同时添加一条或多条,返回的是布尔类型</strong></p><pre><code class="php">DB::table(&#39;无前缀表名&#39;) -&gt; insert(); //链式操作;</code></pre><p>向member表同时添加多条数据:</p><pre><code class="php">    public function add()    {        //定义相关联的表名        $db = DB::table(&#39;member&#39;);        //使用insert增加数据        $result = $db-&gt;insert([            [                &#39;name&#39; =&gt; &#39;安洁莉娜&#39;,                &#39;age&#39;  =&gt; &#39;17&#39;,                &#39;email&#39; =&gt; &#39;angelina@gmail.com&#39;            ],            [                &#39;name&#39; =&gt; &#39;艾雅法拉&#39;,                &#39;age&#39;  =&gt; &#39;17&#39;,                &#39;email&#39; =&gt; &#39;eyjafjalla@gmail.com&#39;            ],            [                &#39;name&#39; =&gt; &#39;陈&#39;,                &#39;age&#39;  =&gt; &#39;17&#39;,                &#39;email&#39; =&gt; &#39;chen@gmail.com&#39;            ]        ]);        dd($result);//返回为true    }</code></pre><p>extra🤹‍♀️: 也可以使用以下方法进行 <strong>insert</strong> 的操作:</p><pre><code class="php">$db = DB::table(&#39;member&#39;);$result = $db-&gt; insertGetId([    &#39;name&#39; =&gt; &#39;马冬梅&#39;,     ...])dd($result);//返回id的值;</code></pre><h2 id="修改数据-update"><a href="#修改数据-update" class="headerlink" title="修改数据(update)"></a>修改数据(update)</h2><p>▶修改数据可以使用where(‘字段名’,’符号’,’值’)  -&gt; update([]); 如下:</p><pre><code class="php">  public function update()    {        //定义需要操作的数据表        $db = DB::table(&#39;member&#39;);        //修改id为1的用户的name        $result = $db-&gt;where(&#39;id&#39;, &#39;=&#39;, &#39;1&#39;)-&gt;update([            &#39;name&#39; =&gt; &#39;安洁莉娜是jk&#39;        ]);        dd($result); //👩返回1 表示为收到影响的行数    }</code></pre><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><pre><code class="php">▶DB:table(&#39;member&#39;)-&gt;get(); //相当于 select * from member;</code></pre><pre><code class="php">    public function select()    {        $db = DB::table(&#39;member&#39;);        $result = $db-&gt;get();        //尝试循环遍历数组        foreach ($result as $key =&gt; $value) {            dump($value);        }        //获取指定范围的数据        $kk = $db-&gt;get()-&gt;where(&#39;id&#39;, &#39;&lt;&#39;, &#39;3&#39;)-&gt;where(&#39;id&#39;, &#39;&gt;&#39;, &#39;1&#39;);        //获取where(&#39;id&#39;, &#39;&lt;&#39;, &#39;3&#39;)中的第一行数据        $kk1 = $db-&gt;get()-&gt;where(&#39;id&#39;, &#39;&lt;&#39;, &#39;3&#39;)-&gt;first();        dump($kk);        dump($kk1);    }</code></pre><p>按照指定字段进行特定规则的排序</p><pre><code class="php">$kk2 = DB::table(&#39;member&#39;)-&gt;orderBy(&#39;age&#39;, &#39;desc&#39;)-&gt;get();</code></pre><p>分页操作</p><pre><code class="php">$kk3 = DB::table(&#39;member&#39;)-&gt;limit(2)-&gt;offset(2)-&gt;get();//limit(x) x:最多显示的行数 offset(y) y:从第y行开始取</code></pre><h2 id="删除数据-delete"><a href="#删除数据-delete" class="headerlink" title="删除数据(delete)"></a>删除数据(delete)</h2><p>删除中有两种方式,第一种是物理删除(本质是删除),<strong>逻辑删除(本质是修改);</strong></p><p>数据删除可以通过delete函数和truncate函数实现,</p><pre><code class="php">Delete 表示删除记录;Truncate 表示清空整个数据表;</code></pre><pre><code class="php">$db = DB::table(&#39;member&#39;);$result = $db-&gt;where(&#39;id&#39;, &#39;=&#39;, &#39;1&#39;)-&gt;delete();//返回的是受影响的行数;</code></pre><h1 id="书上的增删改查的方法"><a href="#书上的增删改查的方法" class="headerlink" title="书上的增删改查的方法"></a>书上的增删改查的方法</h1>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel控制器基础</title>
    <link href="undefined2019/11/22/laravel2/"/>
    <url>2019/11/22/laravel2/</url>
    
    <content type="html"><![CDATA[<h1 id="控制器文件的位置"><a href="#控制器文件的位置" class="headerlink" title="控制器文件的位置"></a>控制器文件的位置</h1><p>控制器属于项目代码</p><p>位于<strong>app/http/Controllers</strong></p><h1 id="命名控制器文件"><a href="#命名控制器文件" class="headerlink" title="命名控制器文件"></a>命名控制器文件</h1><p>驼峰命名+Controller.php</p><h1 id="控制器的结构代码"><a href="#控制器的结构代码" class="headerlink" title="控制器的结构代码"></a>控制器的结构代码</h1><p>🚫不需要我们自己去写,可以通过artisan来生成</p><p>相应命令:</p><pre><code class="cmd">php artisan make:controller TestController</code></pre><p>创建资源控制器:(自动生成很多方法</p><pre><code class="php">php artisan make:controller TestController --resource //简写 --r</code></pre><p>分目录控制器(没有这个文件夹的话就会创建)</p><pre><code class="cmd">php artisan make:controller Admin/TestController</code></pre><p>创建成功的提示:</p><pre><code class="cmd">Controller created successfully.</code></pre><p>生成的结构代码:</p><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;//命名空间use Illuminate\Http\Request;//命名空间三元素: 常量,方法,类class TestController extends Controller{    //}</code></pre><h1 id="控制器路由"><a href="#控制器路由" class="headerlink" title="控制器路由"></a>控制器路由</h1><p>#使用路由规则调用控制器下的方法,而不再走回调函数.</p><p>格式</p><pre><code class="php">控制器类名@方法名</code></pre><h1 id="控制下的命名空间分组"><a href="#控制下的命名空间分组" class="headerlink" title="控制下的命名空间分组"></a>控制下的命名空间分组</h1><pre><code class="php">Route::group([&#39;namespace&#39;=&gt;&#39;Admin&#39;],function(){    Route:get(&#39;/shit/test1&#39;,&#39;TestController@test1&#39;)})</code></pre><h1 id="接受用户输入"><a href="#接受用户输入" class="headerlink" title="接受用户输入"></a>接受用户输入</h1><p>接受用户输入的类:illuminate\support\facades\input</p><p><strong>facades:介于一个类实例化与没有实例化之间的一个状态,是类的一个接口的实现,说白了就是静态方法.</strong></p><blockquote><p>在laravel中如果需要使用facades,但是又不想写那么长:Use Illuminate\Support\Facades\Input 则可以在config/app.php中定义别名</p></blockquote><pre><code class="php">//自己添加的别名        &#39;Input&#39; =&gt; Illuminate\Support\Facades\Input::class</code></pre><p>👆👆👆👆👆👆👆👆👆👆👆👆👆👆👆</p><p>😤😤😤😤😤😤😤😤😤😤😤😤</p><p>上面真的是血的教训,我用的laravel是最新的6.5的,但是在5.2版本之后就开始用Request替代Input了</p><p>一开始疯狂检测自己的拼写,甚至重装laravel,花了大概一个半小时才解决了问题.</p><p>不过这个过程还是挺有意义的;</p><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;use Illuminate\Http\Request; //声明 这是自动生成的class TextController extends Controller{    public function home(Request $request)//实例化对象    {            //获取全部请求的数据        dump($request-&gt;all());        //只获取a,b字段的值        dump($request-&gt;only([&#39;a&#39;, &#39;b&#39;]));        //获取除了a,b以外的值        dump($request-&gt;except([&#39;a&#39;, &#39;b&#39;]));        //判断是否存在id的这个字段,exists完全等同于has        dump($request-&gt;has(&#39;id&#39;));        dump($request-&gt;exists(&#39;id&#39;));        //获取id的值,如果请求字段为空的话就用 &#39;xxx&#39; 代替        dump($request-&gt;input(&#39;id&#39;, &#39;xxx&#39;));        //&quot;.&quot;可以用来分别获取每个数组元素        dump($request-&gt;input(&#39;books.0&#39;));    }}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel路由规则的使用</title>
    <link href="undefined2019/11/21/lavaral/"/>
    <url>2019/11/21/lavaral/</url>
    
    <content type="html"><![CDATA[<h1 id="4种常用的路由方法"><a href="#4种常用的路由方法" class="headerlink" title="4种常用的路由方法"></a>4种常用的路由方法</h1><p>post/get/any/match</p><pre><code class="php">//get 语法//例如访问/hey的时候可以这样写Route::get (&#39;/hey&#39;, function() {    return &quot;hello&quot;;});//post//post方法可以用postman来获取值//👩post请求需要在VerifycsrfToken中修改把不想要csrf请求的路由写在这里:    protected $except = [        //把不想csrf验证得路由写在这里        &#39;/hello&#39;    ];Route::post (&#39;/hello&#39;, function() {    return &quot;hello from post&quot;;});//any//任意类型Route::any(&#39;/test2&#39;, function () {    echo &#39;当前是用any访问&#39;;});//matchRoute::match([&#39;get&#39;, &#39;post&#39;], &#39;/test3&#39;, function () {    echo &#39;当前是用match访问&#39;;});</code></pre><h1 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h1><p>路由参数其实就是给路由传递参数</p><p>参数分为<strong>必选参数</strong>和<strong>可选参数</strong></p><pre><code class="php">//必选参数 给定默认值Route::any(&#39;users/{id}&#39;, function ($id=&#39;&#39;) {    echo &#39;当前用户的id是&#39;.$id;});👆这样写会报错,不能预先给定值,必须要用户输入数字才可以    eg:example.com/users/123  //输出 当前用户的id是123//可选参数 给定默认值Route::any(&#39;users2/{id?}&#39;, function ($id=&#39;&#39;) {    echo &#39;当前用户的id是&#39;.$id;});👆可预先给定值//通过?形式传递get参数Route::any(&#39;/user3&#39;, function () {    echo &#39;当前用户的id是&#39;.$_GET[&#39;id&#39;];});//限制路由参数 例如:必须是数字 必须有参数Route::get(&#39;hello2/{id}&#39;, function ($id) {    echo &quot;now is&quot;.$id;}) -&gt; where(&#39;id&#39;,&#39;[0-9]+&#39;);</code></pre><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>使代码不累赘</p><p>c –处理用户交互逻辑,如果需要交互就会跳到mdel处理数据</p><p>else -&gt; 直接跳转到view</p><p>model –用于处理数据的增删改查</p><h1 id="路由别名"><a href="#路由别名" class="headerlink" title="路由别名"></a>路由别名</h1><pre><code class="php">//路由别名//🙅不可以直接输入到地址栏,但是可以作为简写被别的方法调用Route::any(&#39;/user4/afadfaf/asdfasfasdf/asdfasd&#39;, function () {    echo &#39;IamUser4&#39;;}) -&gt; name(&#39;user4&#39;);Route::get(&#39;/na&#39;, function () {    return redirect()-&gt;route(&#39;user4&#39;);});Route::group([&#39;prefix&#39; =&gt; &#39;admin&#39;], function () {    Route::get(&#39;/test1&#39;, function () {        return &#39;IamTest1&#39;;    });    Route::get(&#39;/test2&#39;, function () {        echo &quot;IamTest2&quot;;    });});</code></pre><h1 id="查看系统当前路由别名"><a href="#查看系统当前路由别名" class="headerlink" title="查看系统当前路由别名"></a>查看系统当前路由别名</h1><p>在laravel根目录下cmd -&gt; php artisan可以查看所有命令, 找到route:list(这代表了路由列表,然后再cmd -&gt; php artisan route:list  🆗</p><h1 id="路由群组"><a href="#路由群组" class="headerlink" title="路由群组:"></a>路由群组:</h1><p>如果路由层级过多,每次要重新定义路由会很麻烦,我们可以将前缀一样的路由放在路由群组里</p><pre><code class="php">Route::group([&#39;prefix&#39; =&gt; &#39;admin&#39;], function () {    Route::get(&#39;/test1&#39;, function () {        return &#39;IamTest1&#39;;        //匹配 &quot;/admin/test1&quot; URl    });    Route::get(&#39;/test2&#39;, function () {        echo &quot;IamTest2&quot;;        //匹配 &quot;/admin/test2&quot; URl    });    Route::group([&#39;prefix&#39; =&gt; &#39;/test1&#39;], function () {        Route::get(&#39;/login&#39;, function () {            return &#39;我是二级路由test1下面的三级路由login&#39;;        });    });});👆以上代码中admin被称为一级路由,test1/test2被称为2级路由,以此类推</code></pre><h1 id="限制路由参数"><a href="#限制路由参数" class="headerlink" title="限制路由参数"></a>限制路由参数</h1><pre><code class="php">//限制路由参数 例如:必须是数字 必须有参数Route::get(&#39;hello2/{id}&#39;, function ($id) {    echo &quot;now is&quot;.$id;}) -&gt; where(&#39;id&#39;,&#39;[0-9]+&#39;);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>laravel</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>明日方舟:大家,快回来吧!</title>
    <link href="undefined2019/11/20/arknight/"/>
    <url>2019/11/20/arknight/</url>
    
    <content type="html"><![CDATA[<p>​        花了一个中午的时间把明日方舟昨天刚刚更新的内容打完了,不得不说这次更新的内容的确很棒,我愿称这次update为我玩明日方舟以来最棒的一次更新.</p><p>​        这次新关卡的那几首bgm我认为是这次更新的最大亮点,从打鼠王那段令人热血沸腾的摇滚到我现在写着这篇博文依旧还在循环着的企鹅物流背景板的那首轻松愉快且特别的音乐,我都要给个大大的👍,值得一提的是官方也在昨天公布了一首与其他两位创作音乐人的合作曲目,听着感觉还行8,现已上架网易云了,配合着live2D合成的MV应该能获得很多人的喜欢.</p><p>​        另外,今天YJ了发布日服开服前的pv,在看pv时,大家都可以感受到一个事实,那就是明日方舟离动画化不会远了.</p><p>​        沉浸在一切的同时,我感觉制作者的愿望,想法在一步步的实现,真的很羡慕那群人,可以构想出这样一个世界,通过剧情,作画,音乐去一步一步的描述,填充着那个世界,并且让更多的人去加入他们(各种同人制作),我都可以想到制作者在死之前可以无憾地说出”hey,你说的是那个泰拉世界吗?那个世界就交给你们了”.</p><p>​        但是,如果每天为了完成游戏内每日任务而做着一样的事,无限重复,就会变得像个机器人一样了,我真的很厌恶这种感觉,所以等每个月一次的更新实装后再上线,一个月只玩一次,平时去看看同人社区才是我认为最佳的玩明日方舟的姿势.</p><p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos//img/may.png" srcset="undefined" alt=""></p><p>​    hexo d😃今天才知道自己写篇还算流畅的文章有多难,还是需要每天创作来提高自己啊</p><hr><p>分享下这次活动的pv</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=75637996&cid=129392331&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    
    <tags>
      
      <tag>arknights</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日份的美好</title>
    <link href="undefined2019/11/19/11-19/"/>
    <url>2019/11/19/11-19/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/tohrux/photos/img/suger.jpg" srcset="undefined" alt=""></p><p>今天得到了这三颗糖,当时真的是很开心,这三颗糖也真的很好吃</p><p>记得在高中的时候就有接触过UHA,不过带给我回忆的都是我不怎么喜欢的人</p><p>今天去查了下UHA才知道是一个日本的牌子</p><p>U-unique H-human A-adventure</p><blockquote><p>UHA=YUU(pleasure)－HA(waves)</p><p>UHA (pronounced YUU-HA) is originally a“coined” Japanese word, symbolizing our wish to provide pleasure through our confectioneries, quietly and gently like calm waves. We name our confectioneries YUU(=pleasure)‐SHOKU(=food) which means “food that is fun to eat.”</p></blockquote><p>原本想留下一颗留念的,但是因为贪心吃掉了,</p><p>吃完糖后想起了往事,想到了自己,心情就开始变得十分难过了</p><p>不过糖还是很好吃的</p>]]></content>
    
    
    
    <tags>
      
      <tag>sad</tag>
      
      <tag>happy</tag>
      
      <tag>subarashii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sass基础语法</title>
    <link href="undefined2019/11/18/sass/"/>
    <url>2019/11/18/sass/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>Sass是基于ruby开发的,但是用的人却不用懂得写Ruby.</p><p>首先,在编写Sass前要先下载安装Ruby</p><p>(在网上搜索Ruby的时候 看到的评价都在说这门语言很优雅,以后有空的话会去接触下的!)</p><p>👇</p><p>然后在命令行中 输入 </p><pre><code class="命令行">gem install sass </code></pre><p>等待执行完毕后 然后输入在命令行输入</p><pre><code class="c">sass -v</code></pre><p>如果出现了相应的版本号 就意味着安装成功了👏</p><h1 id="开始基础语法"><a href="#开始基础语法" class="headerlink" title="开始基础语法"></a>开始基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code class="scss">/*注释*/ 👈这种注释会在编译后的CSS中显示//注释   👈这种则不会</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code class="scss">$变量名字:变量属性值</code></pre><p>使用! default 会让之前的样式覆盖掉当前的样式</p><pre><code class="SCSS">//你好 我是sass$defaultColor: red;$defaultColor: #0000ff !default;h1{color:$defaultColor;}</code></pre><p>编译后的css:</p><pre><code class="css">h1 {  color: red;}</code></pre><h2 id="关于变量的作用域"><a href="#关于变量的作用域" class="headerlink" title="关于变量的作用域"></a>关于变量的作用域</h2><p>💡需要注意的是如果上述变量的作用域在所有类的外面,那它就是全局变量,否则他的作用域只在当前的类</p><h2 id="嵌套CSS规则"><a href="#嵌套CSS规则" class="headerlink" title="嵌套CSS规则"></a>嵌套CSS规则</h2><pre><code class="scss">/* SASS嵌套 */$defaultColor: red;#content{    article{        h1{color: $defaultColor;}        p{color: $defaultColor;}    }    aside{        color: aqua;     }}</code></pre><p>编译后的css:</p><pre><code class="css">#content article h1 {  color: red;}#content article p {  color: red;}#content aside {  color: aqua;}</code></pre><h2 id="“-”同时也可以代表父元素选择器"><a href="#“-”同时也可以代表父元素选择器" class="headerlink" title="“$”同时也可以代表父元素选择器"></a>“$”同时也可以代表父元素选择器</h2><pre><code class="scss">/*sass*/a{    font-weight: bold;    text-decoration: none;    $:hover{ color:yellow; }    p.login $ {font:weight:normal}}</code></pre><pre><code class="css">/*编译后的CSS*/a{    font-weight: bold;    text-decoration: none;}a:hover{        color:yellow;        }p.login a {font:weight:normal}</code></pre><h2 id="定义混合指令"><a href="#定义混合指令" class="headerlink" title="定义混合指令"></a>定义混合指令</h2><p>如果网站中有很多地方需要部署相似的样式,可以使用@mixin来进行封装</p><pre><code class="scss">/*Sass*/    @mixin large-text {        font:{            family: Arial;            size: 20px;            weight: bold;        }        color: #ff0000;    }    p {@include large-text()}    a {@include large-text()}</code></pre><pre><code class="css">/*编译后的CSS*/p {  font-family: Arial;  font-size: 20px;  font-weight: bold;  color: #ff0000;}a {  font-family: Arial;  font-size: 20px;  font-weight: bold;  color: #ff0000;}</code></pre><h3 id="使用-指向父类选择器"><a href="#使用-指向父类选择器" class="headerlink" title="使用$指向父类选择器"></a>使用$指向父类选择器</h3><pre><code class="scss">/*Sass*///@mixin 混合指令  $xu:#010203;$w:10px;@mixin text{    font:{       family: 华文宋体;       weight: bold;       size: $w*2.5;    }    &amp;:hover{      cursor: pointer;      text-decoration:underline #a94442 ;    }  }  p{    //通过@include调用  导入    @include text;  }</code></pre><pre><code class="css">/*编译成CSS*/p {  font-family: 华文宋体;  font-weight: bold;  font-size: 25px;}p:hover {  cursor: pointer;  text-decoration: underline #a94442;}</code></pre><h3 id="通过传参-gt-有参函数"><a href="#通过传参-gt-有参函数" class="headerlink" title="通过传参  =&gt; 有参函数"></a>通过传参  =&gt; 有参函数</h3><p>(可以给定默认值 例如$width = 1 ,这样在不给参数的时候就会默认显示1)</p><pre><code class="scss">/*sass*/  @mixin myborder($color,$width,$style){    border:{      width: $width;      color: $color;      style: $style;    } } .b{   //  传参需要一一对应   @include myborder(red,5px,solid); }</code></pre><pre><code class="css">/*编译成CSS*/.b {  border-width: 5px;  border-color: red;  border-style: solid;}</code></pre><h3 id="不确定参数的数量时…"><a href="#不确定参数的数量时…" class="headerlink" title="不确定参数的数量时…"></a>不确定参数的数量时…</h3><pre><code class="scss">//  不确定参数的写法@mixin box-s($shadow...){    -moz-box-shadow:$shadow;    box-shadow:$shadow;    -o-box-shadow: $shadow;}.b3{ //    属性可以省略   参数3不能负数//           水平阴影 垂直 阴影半径 阴影程度 颜色 Insert内扩@include box-s(5px 5px 5px 5px #123654);}</code></pre><pre><code class="css">/*编译后*/.b3 {  -moz-box-shadow: 5px 5px 5px 5px #123654;  box-shadow: 5px 5px 5px 5px #123654;  -o-box-shadow: 5px 5px 5px 5px #123654;}</code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><p>Sass支持 +,-,*,/,%等运算</p><p>如果在运算时不给单位的话,则会自动补充单位</p><pre><code class="scss">.fon{    $a:10px;    $b:10;    $c:#123456;    min-width: $a/2;    max-width: $a*2;     margin: (10px/2);//两个数字之间要加括号才可以进行除法运算    padding: #{$a}/#{$b};//使用#{$a}可以不进行除法运算}</code></pre><pre><code class="css">/*编译后的css*/.fon{min-width:5px;max-width:20px;margin:5px;padding:10px/10}</code></pre><h2 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h2><pre><code class="scss">.str {    $s:&quot;宋体&quot;;    $t:&quot;微软雅黑&quot;;    $r:&quot;sans&quot;;    font-family: $s + $t;    font-family: $r + &quot;-self&quot;;}</code></pre><pre><code class="css">/*编译后的CSS*/.str{    font-family:&quot;宋体微软雅黑&quot;;    font-family:&quot;sans-self&quot;}</code></pre><h2 id="条件判断和循环"><a href="#条件判断和循环" class="headerlink" title="条件判断和循环"></a>条件判断和循环</h2><h3 id="使用-if-和-else"><a href="#使用-if-和-else" class="headerlink" title="使用@if 和 @else"></a>使用@if 和 @else</h3><p>(支持and/or/on/not)</p><pre><code class="scss">.bol{    $age:25;    @if ($age &gt; 18 and $age &lt; 27){        color: yellow;    }@else{        color: green;    }}</code></pre><pre><code class="css">/*编译后的CSS*/.bol{color:yellow}</code></pre><p>eg2:</p><pre><code class="scss">@mixin block($bol){    @if($bol){        dispaly:block;    }@else{        display: none;    }}.block{    @include block(true);}.hidden{    @include block(false);}</code></pre><pre><code class="css">/*编译后的css*/.block {  dispaly: block;}.hidden {  display: none;}</code></pre><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="@for 循环"></a>@for 循环</h3><p>@for $i from <start> through <end> {}(会through最后一个数字)</p><p>@for $i from <start> to <end>{} (忽略最后一个数字)</p><pre><code class="scss">@for $var from 1 through(或者to) 3 {    .item-#{$var} {width: 2em * $var;}}</code></pre><pre><code class="css">/*编译后的css*/.item-1 {  width: 2em;}.item-2 {  width: 4em;}.item-3 {  width: 6em;}</code></pre><h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><p>@each $example in example1,example2,example3{}</p><pre><code class="scss">@each $animal in puma, sea-slug, egret,salamander{    .#{$animal}-icon{        background-image: url(&#39;image/#{$animal}.png&#39;);    }}@each $header, $size in (h1:2em, h2:1.5em, h3:1em){    #{$header}{        font-size: $size;    }}</code></pre><pre><code class="css">/*编译后CSS*/.puma-icon {  background-image: url(&quot;image/puma.png&quot;);}.sea-slug-icon {  background-image: url(&quot;image/sea-slug.png&quot;);}.egret-icon {  background-image: url(&quot;image/egret.png&quot;);}.salamander-icon {  background-image: url(&quot;image/salamander.png&quot;);}h1 {  font-size: 2em;}h2 {  font-size: 1.5em;}h3 {  font-size: 1em;}</code></pre><h3 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h3><p>while循环使用指令重复输出格式知道表达式返回结果为false.可以实现比@for循环更为复杂的指令</p><pre><code class="scss">$i: 5;@while $i&gt;0{    .h#{$i} {        width: 2em * $i;        $i : $i - 2;    }}</code></pre><pre><code class="css">.h5 {  width: 10em;}.h3 {  width: 6em;}.h1 {  width: 2em;}</code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Sass的数组常常被称为”map”,它总是以键值对的形式出现–”key:value”</p><p>语法格式:</p><pre><code class="scss">$map: (    key1:value1,    key2: (        key2-1: value2-1,        key2-2: value2-2,    ),    key3: value3);</code></pre><p>例子:</p><pre><code class="scss">$some-color:(    a: #ea4c89,    b: #3b5998,     c: #171515);.btn-a{    color:map-get($some-color, a ) //👈这里使用了map-get方法 这是map自带的方法}</code></pre><pre><code class="css">/*编译后*/.btn-a {  color: #ea4c89;}</code></pre><h3 id="选择器继承-extend"><a href="#选择器继承-extend" class="headerlink" title="选择器继承@extend"></a>选择器继承@extend</h3><pre><code class="scss">.father{    border: 1px solid black;}.son{    @extend .father;}</code></pre><pre><code class="css">.father, .son {  border: 1px solid black;}</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>终于完成了,😭,虽然有些疲惫.</p><p>以上都是基于我的老师@帅帅徐 笔记内容&amp;上课所讲,以及 书(@web前端开发中级 下册) 和自己微不足道的总结,</p><p>感谢阅读🙌</p><p>2019/11/19</p><p>下午 6:47</p><hr><p>刚刚问了老师一句,”实际开发中会用到sass吗 ?”</p><p>然后他回了我一句”你应该反过来问” 😂</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>前端</tag>
      
      <tag>sass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hey,Are you henrietta? CLICK HERE PLS</title>
    <link href="undefined2019/11/17/henrietta/"/>
    <url>2019/11/17/henrietta/</url>
    
    <content type="html"><![CDATA[<h1 id="hey-henriettaV01"><a href="#hey-henriettaV01" class="headerlink" title="hey henriettaV01!"></a>hey henriettaV01!</h1><h4 id="I’m-tohru-this-article-is-written-for-you"><a href="#I’m-tohru-this-article-is-written-for-you" class="headerlink" title="I’m tohru ,this article is written for you."></a>I’m tohru ,this article is written for you.</h4><h4 id="welcome-to-my-blog-it-was-created-two-days-ago…"><a href="#welcome-to-my-blog-it-was-created-two-days-ago…" class="headerlink" title="welcome to my blog, it was created two days ago…"></a>welcome to my blog, it was created two days ago…</h4><h4 id="I’ll-never-forget-the-happy-time-when-we-played-Apex-on-pc-amp-ps4"><a href="#I’ll-never-forget-the-happy-time-when-we-played-Apex-on-pc-amp-ps4" class="headerlink" title="I’ll never forget the happy time when we played Apex on pc &amp; ps4,"></a>I’ll never forget the happy time when we played Apex on pc &amp; ps4,</h4><h4 id="and-I’ll-never-forget-your-birthday-XD"><a href="#and-I’ll-never-forget-your-birthday-XD" class="headerlink" title="and I’ll never forget your birthday XD"></a>and I’ll never forget your birthday XD</h4><blockquote><p>9/10 </p></blockquote><h4 id="have-a-nice-day-henrietta-or-should-I-called-you-‘胡琼琼’-😄😄😄"><a href="#have-a-nice-day-henrietta-or-should-I-called-you-‘胡琼琼’-😄😄😄" class="headerlink" title="have a nice day~ henrietta,or should I called you ‘胡琼琼’? 😄😄😄"></a>have a nice day~ henrietta,or should I called you ‘胡琼琼’? 😄😄😄</h4>]]></content>
    
    
    
    <tags>
      
      <tag>friend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CDN来加速网页的访问</title>
    <link href="undefined2019/11/17/cdn/"/>
    <url>2019/11/17/cdn/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天是搭建github.io的第二天,很多功能都还在完善,比如说在一些地方(没错,说的就是你,天朝!)访问GitHub.Page很慢的问题,通过上网一番查找发现似乎可以用CDN来解决.</p><h1 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN?"></a>什么是CDN?</h1><p>这里粘贴一段阿里云官网上面对CDN的描述:</p><blockquote><p>将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。<br>解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</p></blockquote><p>总之它可以让别人访问自己的GitHub.Page的速度更快就对了!</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>这里就拿我们网页中需要加载很久的图片来举例8,</p><p>首先我们要找到放置自己github.io 页面的那个repo,如下图所示:</p><p><img src="/img/cdn2.png" srcset="undefined" alt=""></p><p>我们需要的图片他们现在都静静的躺在img那个文件夹里</p><p>如果想用CDN获取他们的话</p><p>可以点击图片最顶端的release来发布版本</p><p>例如我这里发布的版本为1.0  发布完成后我们就可通过jsDelivr来引用我们的资源了</p><p><img src="/img/cdn1.png" srcset="undefined" alt=""></p><p>如上面的地址所示:</p><p>​    gh 代表 github</p><p>​    tohrux是我的GitHub用户名</p><p>​    tohrux.github.io是我仓库的名字</p><p>​    1.0 是版本号</p><p>​    img/fullVersionxx.jpg 是想要获取的文件</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/tohrux/tohrux.github.io@1.0//img/fullVersionxx.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/tohrux/tohrux.github.io@1.0//img/fullVersionxx.jpg</a></p></blockquote><p>然后用这个外链来替换掉你想要替换的文件就大功告成了~</p><p>同理,用CDN来引入网页中jQuery,bootstrap等文件也是很常用的做法哦</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这算是第一次写博文8,其实就是把今晚的问题解决了,然后再总结一下,站在巨人的肩膀上真的很爽啊😊(憨憨笑)</p><p>说实话我也不知道CDN到底有没有带来显著的效果,不过欢迎在下方的评论区留言告诉我网页的加载速度有没有变化,感谢阅读!</p><p>​            </p><hr><p>2019/11/17日更新:</p><p>​    👇新发现!其实可以用github + jsDelivr + picgo 更方便快捷地实现图片的插入    </p><blockquote><p>​        <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a> </p><p>​        <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener" title="picgo地址">picgo</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>build</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现在开始我拥有了自己的博客!</title>
    <link href="undefined2019/11/17/test1/"/>
    <url>2019/11/17/test1/</url>
    
    <content type="html"><![CDATA[<h1 id="现在开始我拥有了自己的博客"><a href="#现在开始我拥有了自己的博客" class="headerlink" title="现在开始我拥有了自己的博客!"></a>现在开始我拥有了自己的博客!</h1><p>终于完成了,现在都快5点了,希望明天可以不上课8,(但估计打完这篇md要做的第一件事就是设闹钟了),</p><p>晚安世界~</p><p>上课的笔记什么的明天再更吧</p><p>总之还是开心的!</p><p>ps.这原本是11-16日凌晨4点写下的,因为一些原因现在重新上传了一遍</p>]]></content>
    
    
    
    <tags>
      
      <tag>happy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片加载测试</title>
    <link href="undefined2019/11/16/ceshi/"/>
    <url>2019/11/16/ceshi/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/rikka.jpg" srcset="undefined" alt=""></p><p><img src="/img/akane.jpg" srcset="undefined" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>ssss</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/11/15/hello-world/"/>
    <url>2019/11/15/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>